<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑博的博客</title>
  
  <subtitle>人生如梦未醒时，梦如人生我是谁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://godbobo.github.io/"/>
  <updated>2020-04-09T17:01:32.892Z</updated>
  <id>https://godbobo.github.io/</id>
  
  <author>
    <name>Godbobo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>向个人自动化前进的一小步--天气闹钟</title>
    <link href="https://godbobo.github.io/2020/04/09/shortcut-weather-clock/"/>
    <id>https://godbobo.github.io/2020/04/09/shortcut-weather-clock/</id>
    <published>2020-04-09T13:06:59.000Z</published>
    <updated>2020-04-09T17:01:32.892Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引言：在IOS13中，快捷指令已经成为每个苹果手机的预装应用，并且还新增了自动化的功能。在这个功能出来后，我就觉得这里面大有可玩性。可能，这会成为让我们离智能化家居、自动化生活更近一步。</p></blockquote><p>坦诚地说，现在的个人自动化还是有点鸡肋的。触发条件当中，只有闹钟和勿扰模式是真正可以触发自动化任务的。而这两个触发条件中，又只有闹钟可以在触发之后播放声音等更高权限的操作。</p><p>此前我看了别人制作的天气闹钟，觉得还有可以发挥的空间：制作流程更简单、可玩性更强。于是我做了个APP，下面先来看看演示视频（有声音）：</p><video controls preload="none" poster="https://bobo-image.oss-cn-beijing.aliyuncs.com/blog/show-weather-clock-poster.jpg">  <source src="https://bobo-image.oss-cn-beijing.aliyuncs.com/video/show-weather-clock.mp4" type="video/mp4"></video><p>上面是我做的一个可以直接拿来用的版本，多了很多读取用户配置的操作，所以步骤会有些多。不过不要害怕，下面手把手教你做一个天气闹钟，一共四个步骤，共计19个操作。如果想更简单就能拥有这么炫酷的操作，那么等待APP上架后我会把我上面做的这条快捷指令分享给大家。</p><blockquote><p>APP的名字叫：便捷天气</p></blockquote><h2 id="初识快捷指令"><a href="#初识快捷指令" class="headerlink" title="初识快捷指令"></a>初识快捷指令</h2><p>快捷指令最早叫<code>workflow</code>，即工作流，是一个收费软件，后来被苹果收购了，就改名为<strong>捷径</strong>免费提供给大家了（在此祭奠我多花的二十块钱），最后它又改名为<strong>快捷指令</strong>了。</p><p>不过万变不离其宗，它可以简化我们达成任务的步骤，这和最近比较火的Python自动化办公有点类似：我们把自己每天要重复做的事情抽象出来，用程序来帮我们完成这件任务。</p><p>大家可不要被程序两个字吓到了，在快捷指令里面，没有代码，只有简明扼要的文字描述。这就是为了降低门槛，让不懂程序语言的人也可以轻松利用它完成自己的重复任务。</p><p>下面还是以天气闹钟为例来介绍一下如何使用这款神奇的软件吧！</p><h2 id="制作天气闹钟"><a href="#制作天气闹钟" class="headerlink" title="制作天气闹钟"></a>制作天气闹钟</h2><p>我在厨房里是一个新手，但我觉得制作一个快捷指令和炒菜是有共通之处的。</p><p>炒菜时，我会先想到我今天要做西红柿炒鸡蛋。那么我就会为了炒这个菜而去准备切好的西红柿，拌好的鸡蛋，以及油、盐等调料。</p><p>而制作一个快捷指令时，我会想到，我这次要做的是一个天气闹钟，就是在起床闹钟停止后让Siri帮我播报今日的天气，那我需要让Siri知道她要读哪些内容。我想了想，大概应该是这样的：</p><blockquote><p>亲爱的博博，早上好。是时候起一波惊天地泣鬼神的床了。今天天气晴，最高温11度，最低温12度，降雨概率79%。很有可能会下雨，出门记得要带伞呦。</p></blockquote><p>然后我就要考虑，上面的内容很多都不是固定的，有时间，有天气，是不是要叫我起床，是不是要叫我带伞等。那我需要怎么获取其中的数据并且组装成我想要的内容呢？</p><p>下面就看我一步步拿到数据。</p><h3 id="1、获取当前时刻并判断叫不叫床（切西红柿）"><a href="#1、获取当前时刻并判断叫不叫床（切西红柿）" class="headerlink" title="1、获取当前时刻并判断叫不叫床（切西红柿）"></a>1、获取当前时刻并判断叫不叫床（切西红柿）</h3><p>由于时间长的gif图片过大，我这里就用<strong>无声的视频</strong>来演示了：</p><video controls preload="none" poster="https://bobo-image.oss-cn-beijing.aliyuncs.com/blog/weather-clock-time-poster.jpg">  <source src="https://bobo-image.oss-cn-beijing.aliyuncs.com/video/weather-clock-time.mp4" type="video/mp4"></video><p>在上面的演示中我用到了两个很重要的操作：”如果…就…否则..“判断语句.、以及”设置变量“的操作。第一个比较好理解，就和如果外面下雨，我就要带伞一样，条件成立了我就干什么，不成立我要干什么。第二个简单来讲就是把起床的话暂时存起来，并且给它起个名字，下次要用的时候就可以通过这个名字得到刚刚存起来的起床的话。</p><blockquote><p>上面有一步操作是<strong>时间是早晨吗</strong>，在没有填写时间时，默认是用当前时间去比较的，刚好符合此时的情景。</p></blockquote><h3 id="2、获取当前天气并判断带不带伞（拌鸡蛋）"><a href="#2、获取当前天气并判断带不带伞（拌鸡蛋）" class="headerlink" title="2、获取当前天气并判断带不带伞（拌鸡蛋）"></a>2、获取当前天气并判断带不带伞（拌鸡蛋）</h3><p>因为系统自带的天气获取不到降雨概率（也可能我是特例），所以我专门开发了<strong>便捷天气</strong>这款APP用于获取更加详细的天气数据，同时也是方便不懂程序的人可以一个操作就得到自己需要的数据。</p><p>因为从便捷天气得到的天气状况数据是最近十天的，所以用了一个列表去保存这个数据。而现在我们需要的是当天的天气也就是列表中的第一项，这时可以通过脚本中的<strong>从列表中获取第一项</strong>得到当天的天气数据。</p><p>天气数据里面有个降水概率，我们可以通过它来判断，如果降水概率大于30，就提醒带伞，否则就可以安心出门。</p><video controls preload="none" poster="https://bobo-image.oss-cn-beijing.aliyuncs.com/blog/weather-poster.jpg">  <source src="https://bobo-image.oss-cn-beijing.aliyuncs.com/video/weather.mp4" type="video/mp4"></video><h3 id="3、组装文本并朗读（炒菜出锅）"><a href="#3、组装文本并朗读（炒菜出锅）" class="headerlink" title="3、组装文本并朗读（炒菜出锅）"></a>3、组装文本并朗读（炒菜出锅）</h3><p>通过以上两步，我们得到了自己需要的所有内容。</p><p><img src="https://bobo-image.oss-cn-beijing.aliyuncs.com/blog/shortcut-variable.png" alt></p><p>然后通过一个文本框，把上面的信息用自然语言组装一下，就是属于自己的个性化天气播报了。</p><video controls preload="none" poster="https://bobo-image.oss-cn-beijing.aliyuncs.com/blog/weather-siri.jpg">  <source src="https://bobo-image.oss-cn-beijing.aliyuncs.com/video/weather-siri.mp4" type="video/mp4"></video><p>感觉整体上没问题了，就点击右上角保存一下，并给它起一个响亮的名字，换一个美美哒图标。</p><h3 id="4、创建个人自动化并测试-美食品鉴"><a href="#4、创建个人自动化并测试-美食品鉴" class="headerlink" title="4、创建个人自动化并测试(美食品鉴)"></a>4、创建个人自动化并测试(美食品鉴)</h3><p>如何添加自动化在第一个演示视频里面已经有出现了，这里就简单说明一下步骤及注意事项。</p><p>首先打开自动化列表页面，点击创建个人自动化，然后选择触发条件，任一闹钟停止时。</p><blockquote><p>这里选择任一闹钟只是为了方便我们测试，出现问题可以快速改正，最后还是要把触发条件改成你指定的起床闹钟的。</p></blockquote><p>然后点击下一步，添加操作，在APP列表中找到快捷指令，并选择运行快捷指令，然后指定快捷指令为我们刚刚新建的即可。</p><p>记住在完成自动化创建时要关掉<code>运行前询问</code>。</p><p>最后创建一个最接近当前时间的闹钟，为防止情况和起床时不一样，建议锁屏等待闹钟响起。</p><p><strong>小提示：</strong></p><p>当快捷指令自动启动时，你可能会听到Siri只读出了一些数字。这是IOS13的一个BUG，你需要做的，是进入刚刚创建的快捷指令，找到朗读文本的那一步操作并展开，将语言切换为英语运行一遍，然后再切换为中文运行一遍即可。</p><h2 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h2><h3 id="1、添加通知"><a href="#1、添加通知" class="headerlink" title="1、添加通知"></a>1、添加通知</h3><p>我们最后得到的播报内容，可能刚起床意识比较模糊没有听清，此时可以在读完内容之后发送一条通知，内容是播报内容即可。</p><p>具体操作步骤是点击➕添加操作，搜索<code>通知</code>,即可得到显示通知的操作。</p><h3 id="2、播放音乐"><a href="#2、播放音乐" class="headerlink" title="2、播放音乐"></a>2、播放音乐</h3><p>对于我来说，闹钟响而人不起是常态。那么就需要持续不断的声音来刺激我，保证自己不会再次睡去，播放音乐就是最好的方式。</p><p>播放音乐的通常选择是网易云音乐和QQ音乐，但你在捷径APP里是找不到对应的操作的（应该是为了用户留存率）。此时就需要进入这两家APP，把它们播放音乐的操作一个个加到快捷指令APP中。</p><p><strong>QQ音乐操作步骤：</strong></p><p><img src="https://bobo-image.oss-cn-beijing.aliyuncs.com/blog/%E6%B7%BB%E5%8A%A0QQ%E9%9F%B3%E4%B9%90%E6%8D%B7%E5%BE%84.gif" alt></p><p><strong>网易云音乐操作步骤：</strong></p><p><img src="https://bobo-image.oss-cn-beijing.aliyuncs.com/blog/%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%8D%B7%E5%BE%84.gif" alt></p><h2 id="关于便捷天气APP"><a href="#关于便捷天气APP" class="headerlink" title="关于便捷天气APP"></a>关于便捷天气APP</h2><p>这个APP的灵感就是源自天气闹钟的快捷指令，同时也有点不满国内APP对快捷指令APP的支持程度。在我看来，现有的快捷指令APP还是一片待开发的荒原，需要我们开发者去给其植树造林。</p><p>便捷天气里面两个关于时间的拓展操作就是很好的思路，让普通用户免于去拼接像<code>yyyy-MM-dd HH:mm:ss</code>这种时间格式，用纯自然语言就可以得到自己需要的信息。</p><p>另外便捷天气有关天气的操作是需要订阅才能使用的（目前订阅价格每月1元，可能以后会变吧，全看能不能收支平衡），因为这里用到了付费的API。两个关于时间的操作则是免费提供给大家用的，大家可以用更简单的操作去做自己想做的东西。</p><p>如果有任何建议，欢迎加入QQ群一起讨论。我会努力把这个APP的体验做到最好（不加广告，无冗余功能，界面极简风格），因为这个APP可是我的处女作哦，欢迎大家支持！</p><p> <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdo025jmu0j30f10kltb2.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引言：在IOS13中，快捷指令已经成为每个苹果手机的预装应用，并且还新增了自动化的功能。在这个功能出来后，我就觉得这里面大有可玩性。可能，这会成为让我们离智能化家居、自动化生活更近一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坦诚地说，现在的个
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="快捷指令" scheme="https://godbobo.github.io/tags/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>便捷天气隐私政策</title>
    <link href="https://godbobo.github.io/2020/04/08/quickweather-privacy/"/>
    <id>https://godbobo.github.io/2020/04/08/quickweather-privacy/</id>
    <published>2020-04-08T11:56:09.000Z</published>
    <updated>2020-04-08T11:56:10.383Z</updated>
    
    <content type="html"><![CDATA[<p>便捷天气尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，便捷天气会按照本隐私权政策的规定使用和披露您的个人信息。但便捷天气将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，便捷天气不会将这些信息对外披露或向第三方提供。便捷天气会不时更新本隐私权政策。 您在同意便捷服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于便捷天气服务使用协议不可分割的一部分。 </p><ol><li>适用范围 </li></ol><p>a) 在您使用便捷天气服务时，便捷天气自动接收并记录的您的计算机上的信息，包括但不限于您的IP地址、位置、使用的语言、访问日期和时间、软硬件特征信息等数据； </p><p>您了解并同意，以下信息不适用本隐私权政策： </p><p>a) 您在使用便捷天气平台提供的搜索服务时输入的关键字信息； </p><p>b) 便捷天气收集到的您在便捷天气发布的有关信息数据，包括但不限于参与活动、成交信息及评价详情；</p><ol start="2"><li>信息使用 </li></ol><p>a) 便捷天气不会向任何无关第三方提供、出售、出租、分享或交易您的个人信息，除非事先得到您的许可，或该第三方和便捷天气单独或共同为您提供服务，且在该服务结束后，其将被禁止访问包括其以前能够访问的所有这些资料。 </p><p>b) 便捷天气亦不允许任何第三方以任何手段收集、编辑、出售或者无偿传播您的个人信息。任何便捷天气平台用户如从事上述活动，一经发现，便捷天气有权立即终止与该用户的服务协议。 </p><p>c) 为服务用户的目的，便捷天气可能通过使用您的个人信息，向您提供您感兴趣的信息，包括但不限于向您发出产品和服务信息，或者与便捷天气合作伙伴共享信息以便他们向您发送有关其产品和服务的信息（后者需要您的事先同意）。 </p><ol start="4"><li>信息存储和交换  </li></ol><p>便捷天气没有后台服务，一切数据均存储在您的手机上，且不会保存或传输您的任何信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;便捷天气尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，便捷天气会按照本隐私权政策的规定使用和披露您的个人信息。但便捷天气将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，便捷天气不会将这些信息对外披露
      
    
    </summary>
    
      <category term="公众" scheme="https://godbobo.github.io/categories/%E5%85%AC%E4%BC%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue 局部打印组件二</title>
    <link href="https://godbobo.github.io/2020/03/10/web-print-2/"/>
    <id>https://godbobo.github.io/2020/03/10/web-print-2/</id>
    <published>2020-03-10T09:04:19.000Z</published>
    <updated>2020-03-10T09:04:20.032Z</updated>
    
    <content type="html"><![CDATA[<p>前面我曾经写过一个局部打印的组件，但其实一直没有将其实际应用。这次公司要将项目部署出去了，然后我在自测时才发现打包后的表格<strong>样式失效了</strong>！</p><p>然后就是漫漫的找Bug过程了，找了有三四个小时，总算是一点点一点点理清了头绪，下面我来讲讲怎么解决打包后样式失效的问题。没有看过我上一篇文章的可以先去看一下。<a href="https://godbobo.github.io/2019/12/02/web-print/">传送门</a></p><h2 id="兼容性问题？"><a href="#兼容性问题？" class="headerlink" title="兼容性问题？"></a>兼容性问题？</h2><p>刚发现这个问题时，我内心是实在不愿意接受的，毕竟也是花了那么长时间去钻研这个东西了，而且平时测试的时候也并没有出现什么问题呀。</p><p>所以内心日常甩锅给兼容问题，我测了一下在tomcat服务器和nginx服务器下的表现，发现一毛一样。又猜想是浏览器问题，又在edge上试了一下，也不对。最后发现，只有开发模式和生产模式两种构建方式的不同导致了最后结果的不同。</p><p>到了这里我其实是很疑惑的，平时开发中一般都是生产模式的样式和行为都会和开发模式中一毛一样的啊，Vue怎么会让我操心这种问题呢？</p><p>然后我找到执行打印功能部分的代码，发现会在生成的iframe中导入当前页面的样式，我把最后生成的样式部分打印了出来，然后观察两种模式的不同，结果真让我发现了问题：生产模式中样式全都是<strong>link标签</strong>，而开发模式中样式都被包裹在<strong>style标签</strong>中。</p><blockquote><p>总结：开发模式中，由于我们直接编辑的<code>.vue</code>文件，vue直接将<code>.vue</code>文件中的style标签部分解析出来放到body中，而生产模式中，打包之后的文件只有标准的HTML、CSS和JS文件，也就只能用link标签引入外部CSS文件了。</p></blockquote><p>这样的不同直接就导致了我那种写法在发送打印指令时页面还没有把CSS文件加载到的问题，如下图：</p><p>弹出对话框时</p><p><img src="https://bobo-image.oss-cn-beijing.aliyuncs.com/blogTIM%E6%88%AA%E5%9B%BE20200310153515.png" alt></p><p>对话框关闭后</p><p><img src="https://bobo-image.oss-cn-beijing.aliyuncs.com/blogTIM%E6%88%AA%E5%9B%BE20200310151033.png" alt></p><p>在打印对话框出来时，刚刚开始请求CSS文件，此时页面上自然就不会有样式被渲染出来。在开发模式行得通的原因就是style是内嵌在页面里的，就可以直接渲染出来。</p><p>知道了问题的原因，那就好解决了，我们在iframe的onload事件中执行打印操作即可。优化后的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">printTable () &#123;</span><br><span class="line">      <span class="comment">// 1.获取要打印的内容的一份复制，否则待会儿添加节点时会将原有内容删除</span></span><br><span class="line">      <span class="keyword">const</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'printTable'</span>).cloneNode(<span class="literal">true</span>)</span><br><span class="line">      <span class="comment">// 2.获取放置打印内容的iframe</span></span><br><span class="line">      <span class="keyword">const</span> ifm = <span class="built_in">document</span>.getElementById(<span class="string">'printf'</span>)</span><br><span class="line">      <span class="comment">// css会重新加载 这里监听iframe的加载事件 完成后再执行打印功能</span></span><br><span class="line">      ifm.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 4.添加打印内容并打印</span></span><br><span class="line">        ifm.contentDocument.body.appendChild(content)</span><br><span class="line">        ifm.contentWindow.print()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3.添加打印内容样式</span></span><br><span class="line">      <span class="keyword">const</span> styles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'style,link'</span>)</span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; styles.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 排除其他类型的内容，如ico js</span></span><br><span class="line">        <span class="keyword">if</span> ((styles[i].tagName === <span class="string">'LINK'</span> &amp;&amp; styles[i].rel === <span class="string">'stylesheet'</span>) || styles[i].tagName === <span class="string">'STYLE'</span>) &#123;</span><br><span class="line">          str += styles[i].outerHTML</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 向iframe添加内容 注：如果没有则页面的加载事件不会触发</span></span><br><span class="line">      ifm.contentDocument.open()</span><br><span class="line">      ifm.contentDocument.write(str)</span><br><span class="line">      ifm.contentDocument.write(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>)</span><br><span class="line">      ifm.contentDocument.close()</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>这样之后，就可以愉快地开始打印啦</p><p><img src="https://bobo-image.oss-cn-beijing.aliyuncs.com/blogTIM%E6%88%AA%E5%9B%BE20200310153356.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面我曾经写过一个局部打印的组件，但其实一直没有将其实际应用。这次公司要将项目部署出去了，然后我在自测时才发现打包后的表格&lt;strong&gt;样式失效了&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;然后就是漫漫的找Bug过程了，找了有三四个小时，总算是一点点一点点理清了头绪，下面我来讲讲
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="网页打印" scheme="https://godbobo.github.io/tags/%E7%BD%91%E9%A1%B5%E6%89%93%E5%8D%B0/"/>
    
      <category term="网页开发" scheme="https://godbobo.github.io/tags/%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Electron开发记事本</title>
    <link href="https://godbobo.github.io/2020/01/06/electron-notepad/"/>
    <id>https://godbobo.github.io/2020/01/06/electron-notepad/</id>
    <published>2020-01-06T01:32:04.000Z</published>
    <updated>2020-01-06T01:32:04.716Z</updated>
    
    <content type="html"><![CDATA[<p>Electron是一个跨平台的框架，可以用网页语言来开发客户端程序，虽然说每一个应用都是一个Chrome，但毕竟也是方便了我们这些前端开发者做自己的客户端软件的梦想。</p><p>这里我为了能使用到最新版本的Electron，并没有选择用<code>electron-vue</code>去作为项目的基础模版，而是在github上着了一个加了<code>webpack</code>功能的模版，输入以下命令开始：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:szwacz/electron-boilerplate.git life-memory</span><br></pre></td></tr></table></figure><h2 id="一、测试模版是否可用"><a href="#一、测试模版是否可用" class="headerlink" title="一、测试模版是否可用"></a>一、测试模版是否可用</h2><p>下载好之后，第一步就是将electron的版本更新到<code>v7.1.7</code>看看是否可以正常运行，这里为了避免因为网络问题导致下载失败就直接用<code>cnpm</code>进行安装了。</p><p>经过测试，这个模版的运行及打包均没有问题，可以正常执行（Mac环境），这下子可以安心地去开发了。</p><h2 id="二、为应用添加菜单"><a href="#二、为应用添加菜单" class="headerlink" title="二、为应用添加菜单"></a>二、为应用添加菜单</h2><p>模版中，应用的菜单并不符合记事本的要求，因此需要调整一下。菜单的定义位于<code>src/menu</code>目录下，我们要做两件事，一是为Mac系统的菜单腾出第一个位置，二是补充自己需要的菜单项。下面是我的菜单项定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file_menu_template.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; dialog &#125; <span class="keyword">from</span> <span class="string">'electron'</span></span><br><span class="line"><span class="keyword">import</span> log <span class="keyword">from</span> <span class="string">'electron-log'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileMenuTemplate = &#123;</span><br><span class="line">  label: <span class="string">'文件'</span>,</span><br><span class="line">  submenu: [</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   label: '新建',</span></span><br><span class="line">    <span class="comment">//   accelerator: 'CmdOrCtrl+N'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'打开'</span>,</span><br><span class="line">      accelerator: <span class="string">'CmdOrCtrl+O'</span>,</span><br><span class="line">      click: openFile</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'separator'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'保存'</span>,</span><br><span class="line">      accelerator: <span class="string">'CmdOrCtrl+S'</span>,</span><br><span class="line">      click: saveFile</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'另存为'</span>,</span><br><span class="line">      accelerator: <span class="string">'CmdOrCtrl+Shift+S'</span>,</span><br><span class="line">      click: saveAsFile</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> macAppMenuTemplate = &#123;</span><br><span class="line">  label: <span class="string">'生活记'</span>,</span><br><span class="line">  submenu: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'退出'</span>,</span><br><span class="line">      role: <span class="string">'quit'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开文件</span></span><br><span class="line"><span class="comment"> * @param &#123;MenuItem&#125; menuItem 菜单项</span></span><br><span class="line"><span class="comment"> * @param &#123;BrowserWindow&#125; browserWindow 渲染进程窗口</span></span><br><span class="line"><span class="comment"> * @param &#123;Event&#125; event 事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openFile</span>(<span class="params">menuItem, browserWindow, event</span>) </span>&#123;</span><br><span class="line">  dialog.showOpenDialog(browserWindow, &#123;</span><br><span class="line">    title: <span class="string">'打开文件'</span>,</span><br><span class="line">    filters: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Markdown 文件'</span>, <span class="attr">extensions</span>: [<span class="string">'md'</span>, <span class="string">'markdown'</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'文本文件'</span>, <span class="attr">extensions</span>: [<span class="string">'txt'</span>] &#125;</span><br><span class="line">    ],</span><br><span class="line">    properties: [<span class="string">'openFile'</span>]</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">dialogRes</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dialogRes.canceled) &#123;</span><br><span class="line">      <span class="comment">// 向当前获取焦点的窗口发送事件</span></span><br><span class="line">      <span class="keyword">if</span> (browserWindow) &#123;</span><br><span class="line">        browserWindow.webContents.send(<span class="string">'lm-open-file'</span>, dialogRes.filePaths)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    log.error(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存文件</span></span><br><span class="line"><span class="comment"> * @param &#123;MenuItem&#125; menuItem 菜单项</span></span><br><span class="line"><span class="comment"> * @param &#123;BrowserWindow&#125; browserWindow 渲染进程窗口</span></span><br><span class="line"><span class="comment"> * @param &#123;Event&#125; event 事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveFile</span>(<span class="params">menuItem, browserWindow, event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (browserWindow) &#123;</span><br><span class="line">    browserWindow.webContents.send(<span class="string">'lm-save-file'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 另存为</span></span><br><span class="line"><span class="comment"> * @param &#123;MenuItem&#125; menuItem 菜单项</span></span><br><span class="line"><span class="comment"> * @param &#123;BrowserWindow&#125; browserWindow 渲染进程窗口</span></span><br><span class="line"><span class="comment"> * @param &#123;Event&#125; event 事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAsFile</span>(<span class="params">menuItem, browserWindow, event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (browserWindow) &#123;</span><br><span class="line">    browserWindow.webContents.send(<span class="string">'lm-save-as-file'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为第一个位置暂时也不需要添加其他内容，所以我就没有将其拆分出去，而是和文件菜单放在一个文件里了。</p><blockquote><p>写这篇文档时项目已经完成，所以这个文档的代码中会包含一些现在用不到的代码，见谅见谅～</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// edit_menu_template.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> editMenuTemplate = &#123;</span><br><span class="line">  label: <span class="string">"编辑"</span>,</span><br><span class="line">  submenu: [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">"撤销"</span>, <span class="attr">accelerator</span>: <span class="string">"CmdOrCtrl+Z"</span>, <span class="attr">click</span>: undo &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">"重做"</span>, <span class="attr">accelerator</span>: <span class="string">"Shift+CmdOrCtrl+Z"</span>, <span class="attr">click</span>: redo &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">"separator"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">"剪切"</span>, <span class="attr">accelerator</span>: <span class="string">"CmdOrCtrl+X"</span>, <span class="attr">selector</span>: <span class="string">"cut:"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">"复制"</span>, <span class="attr">accelerator</span>: <span class="string">"CmdOrCtrl+C"</span>, <span class="attr">selector</span>: <span class="string">"copy:"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">"粘贴"</span>, <span class="attr">accelerator</span>: <span class="string">"CmdOrCtrl+V"</span>, <span class="attr">selector</span>: <span class="string">"paste:"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">"全选"</span>, <span class="attr">accelerator</span>: <span class="string">"CmdOrCtrl+A"</span>, <span class="attr">click</span>: selectAll &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择全部</span></span><br><span class="line"><span class="comment"> * @param &#123;MenuItem&#125; menuItem 菜单项</span></span><br><span class="line"><span class="comment"> * @param &#123;BrowserWindow&#125; browserWindow 渲染进程窗口</span></span><br><span class="line"><span class="comment"> * @param &#123;Event&#125; event 事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectAll</span>(<span class="params">menuItem, browserWindow, event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (browserWindow) &#123;</span><br><span class="line">    browserWindow.webContents.send(<span class="string">'lm-select-all'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 撤销</span></span><br><span class="line"><span class="comment"> * @param &#123;MenuItem&#125; menuItem 菜单项</span></span><br><span class="line"><span class="comment"> * @param &#123;BrowserWindow&#125; browserWindow 渲染进程窗口</span></span><br><span class="line"><span class="comment"> * @param &#123;Event&#125; event 事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">undo</span>(<span class="params">menuItem, browserWindow, event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (browserWindow) &#123;</span><br><span class="line">    browserWindow.webContents.send(<span class="string">'lm-undo'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重做</span></span><br><span class="line"><span class="comment"> * @param &#123;MenuItem&#125; menuItem 菜单项</span></span><br><span class="line"><span class="comment"> * @param &#123;BrowserWindow&#125; browserWindow 渲染进程窗口</span></span><br><span class="line"><span class="comment"> * @param &#123;Event&#125; event 事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redo</span>(<span class="params">menuItem, browserWindow, event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (browserWindow) &#123;</span><br><span class="line">    browserWindow.webContents.send(<span class="string">'lm-redo'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑菜单里面基本上都是对文档内容的快捷操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// help_menu_template.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; app, shell &#125; <span class="keyword">from</span> <span class="string">"electron"</span>;</span><br><span class="line"><span class="keyword">import</span> jetpack <span class="keyword">from</span> <span class="string">"fs-jetpack"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appDir = jetpack.cwd(app.getAppPath());</span><br><span class="line"><span class="keyword">const</span> manifest = appDir.read(<span class="string">"package.json"</span>, <span class="string">"json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> helpMenuTemplate = &#123;</span><br><span class="line">  label: <span class="string">'帮助'</span>,</span><br><span class="line">  submenu: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'学习Markdown语法'</span>,</span><br><span class="line">      click: <span class="function"><span class="keyword">function</span> (<span class="params">item, focusedWindow</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 打开外部文档</span></span><br><span class="line">        shell.openExternal(<span class="string">'https://www.runoob.com/markdown/md-tutorial.html'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   label: '帮助'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'关于'</span>,</span><br><span class="line">      submenu: [</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">'版本 v'</span> + manifest.version,</span><br><span class="line">          enabled: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//   label: '更新记录'</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>帮助菜单中则是将应用的版本号显示出来，另外还有一个开发时显示的菜单，那个菜单只需要去掉退出应用的菜单项即可。</p><p>菜单定义之后，在<code>background.js</code>中，我们需要将新增的菜单定义加入，并稍微修改一下逻辑，让Mac系统下的菜单列表前面增加一个占位的菜单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; devMenuTemplate &#125; <span class="keyword">from</span> <span class="string">"./menu/dev_menu_template"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; editMenuTemplate &#125; <span class="keyword">from</span> <span class="string">"./menu/edit_menu_template"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  macAppMenuTemplate,</span><br><span class="line">  fileMenuTemplate</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./menu/file_menu_template"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; helpMenuTemplate &#125; <span class="keyword">from</span> <span class="string">"./menu/help_menu_template"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setApplicationMenu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> menus = [fileMenuTemplate, editMenuTemplate, helpMenuTemplate];</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">"darwin"</span>) &#123;</span><br><span class="line">    menus.unshift(macAppMenuTemplate);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (env.name === <span class="string">"development"</span>) &#123;</span><br><span class="line">    menus.push(devMenuTemplate);</span><br><span class="line">  &#125;</span><br><span class="line">  Menu.setApplicationMenu(Menu.buildFromTemplate(menus));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时运行程序，我们定义的菜单就会如期显示出来，接下来要让程序对用户点击菜单项做出响应，则需要在菜单定义中定义<code>click函数</code>，普通的菜单点击，我们只需要将事件发送到当前聚焦的窗口，让它去处理这个事件即可。</p><p>不过这里就涉及到<strong>主线程主动向渲染进程发送消息</strong>的知识了，在上面的代码中我们也可以看到，我们需要拿到browserWindow的实例，然后获取到它的webContents对象，然后就可以向其发送消息了。而渲染进程要接受消息，则是通过<code>ipcRenderer</code>去获取，这一点官方文档已经讲得很详细了，我就不再细说了。</p><p>还有一种更为复杂的情况，以打开文件为例，当用户点击打开时，程序应该弹出窗口询问用户要打开哪个文件。而对话框只能由主线程来操作，当前菜单点击的处理线程正是主线程，你不可能说把事件传给渲染进程，再让渲染进程把打开对话框的事件传给你。所以最好还是直接就在这里弹出对话框，将用户选择的文件交给渲染进程处理就好了。这段代码在上面的菜单定义中也有提及。</p><h2 id="三、为应用添加日志记录功能"><a href="#三、为应用添加日志记录功能" class="headerlink" title="三、为应用添加日志记录功能"></a>三、为应用添加日志记录功能</h2><p>软件开发过程中，不可避免会遇到bug，而当bug到达用户那里时，身为开发者的你是不好去调试的。所以日志记录就显得尤为关键，还好electron生态中有比较好用的<code>electron-log</code>可以使用。我的用法比较简单，就在主线程中修改了日志记录的格式，后面因为全局共享一个实例，所以其他地方就不用去修改配置了，直接引入这个包即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> log <span class="keyword">from</span> <span class="string">"electron-log"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改日志记录的格式</span></span><br><span class="line">log.transports.console.format =</span><br><span class="line">  <span class="string">"[&#123;h&#125;:&#123;i&#125;:&#123;s&#125;.&#123;ms&#125;] [&#123;level&#125; &#123;processType&#125;] › &#123;text&#125;"</span>;</span><br><span class="line">log.transports.file.format =</span><br><span class="line">  <span class="string">"[&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;.&#123;ms&#125;] [&#123;level&#125;] &#123;text&#125;"</span>;</span><br><span class="line">log.debug(<span class="string">"path of user data: "</span>, app.getPath(<span class="string">"userData"</span>));</span><br></pre></td></tr></table></figure><p>在启动时我还去打印了一下用户数据的存放位置，方便以后排查问题。</p><h2 id="四、其他关键点记录"><a href="#四、其他关键点记录" class="headerlink" title="四、其他关键点记录"></a>四、其他关键点记录</h2><p>其实我的最终目标不是开发一个简单的记事本，所以我在项目中引入了<code>CodeMirror</code>这个插件，引入的时候还是遇到了一些问题的，下面是我的解决方案：</p><p>首先在js文件中实例化CodeMirror：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CodeMirror <span class="keyword">from</span> <span class="string">"codemirror/lib/codemirror"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"codemirror/mode/markdown/markdown"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.editor = CodeMirror.fromTextArea(</span><br><span class="line">      <span class="built_in">document</span>.getElementById(textareaId),</span><br><span class="line">      editorOptions</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>到这一步还是正常的，可当我要引入它的CSS文件时，它就报错了，我也不知道为什么。但最后想出了一个解决办法，就是把css文件在html中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/app.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/codemirror/lib/codemirror.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样做之后基本上就没什么问题了，关于记事本的代码其实很简单，逻辑也不复杂，就不贴出来献丑了。</p><p>另外就是涉及到文件读写时，node的文件系统读写结果是通过回调函数来获取的，我觉得用起来很不爽，就写了一个工具类把它包装了一下，让它返回Promise对象。然后我用的时候就可以愉快的用<code>async/await</code>了～</p><p>最后一点就是我比较喜欢用scss去写样式文件，所以需要自己配置一下scss的编译方式，首先需要安装sass：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i sass node-sass sass-loader --save-dev</span><br></pre></td></tr></table></figure><p>安装之后，找到<code>build/webpack.base.config.js</code>，在<code>rules</code>中添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'style-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'sass-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这样就可以解析scss文件了。</p><h2 id="五、打包相关"><a href="#五、打包相关" class="headerlink" title="五、打包相关"></a>五、打包相关</h2><h3 id="1、图标"><a href="#1、图标" class="headerlink" title="1、图标"></a>1、图标</h3><p>应用做好之后，我们需要为其准备一个精美的图标，而在不同的系统上使用的图标类型是不同的，因此我们在得到一张<code>1024x1024.png</code>的图标之后，还需要为windows平台生成<code>.ico</code>格式的图标，此时我们可以在<a href="https://www.easyicon.net/language.en/covert/" target="_blank" rel="noopener">https://www.easyicon.net/language.en/covert/</a>这个网站去转换。</p><p>若要为Mac平台生成<code>.icns</code>的图标则没有那么简单，因为icns格式并不是一个图标，而是包含不同分辨率图标的集合，我们需要一个一个的生成然后再去转换。</p><blockquote><p>我就填了这个坑，我在刚刚的网站把转换好的一张icns格式的图片放到项目中打包，结果打包后的应用是没有图标的！</p></blockquote><p>转换icns并没有网站可以帮我们做，我们只能在mac电脑中敲命令来做。具体可以参考<a href="https://blog.csdn.net/qq_37261367/article/details/81128276" target="_blank" rel="noopener">这个博客</a>，需要注意的是刚开始创建的目录，后面的<code>.iconset</code>不能省，前面的名字可以随便起。</p><p>当图标准备完毕之后，把它们重命名替换掉项目中<code>resources</code>目录下的图标文件即可。</p><h3 id="2、为程序关联文件格式"><a href="#2、为程序关联文件格式" class="headerlink" title="2、为程序关联文件格式"></a>2、为程序关联文件格式</h3><p>我希望我的程序在安装过后可以在用户想要打开文本文件时可以用我的程序来打开，可在Mac系统上，你会发现大部分应用处于灰色状态（如果你的应用不做处理，也会是这个样子的）</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gajpkxu2bbj318e0owjwc.jpg" alt></p><p>为了这个小功能我谷歌了好久好久都没找到解决方案，不过最后偶然间看到了Electron-bilder的配置文档，里面描述了如何配置文件关联，我只能说，，真NM简单。。</p><p>Electron-builder的配置一般会放在<code>packages.json</code>中，恰好我用的这个模版里面的打包工具就是它，我们只需要在<code>build</code>下面加上下面的配置即可关联自己定义的文件格式了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">"fileAssociations": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"ext"</span>: <span class="string">"md"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Markdown 文件"</span>,</span><br><span class="line">        <span class="attr">"role"</span>: <span class="string">"Editor"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"ext"</span>: <span class="string">"markdown"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Markdown 文件"</span>,</span><br><span class="line">        <span class="attr">"role"</span>: <span class="string">"Editor"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"ext"</span>: <span class="string">"txt"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"文本文件"</span>,</span><br><span class="line">        <span class="attr">"role"</span>: <span class="string">"Editor"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>关联之后，程序只是虚有其表，因为我们并没有真正去处理传来的文件，所以下一步就是接收文件路径。在这一步自己也爬了一个又一个坑，都是血和泪的教训啊。。。</p><p>在程序启动时接收文件路径参数，乍一想这个问题，就应该是通过进程对象就可以取到了。可当时我在Mac电脑上开发，不论怎么搞都没办法获取到路径参数，谷歌也找不到答案。又是在万念俱灰之时，我去看了看官方文档，，，我只想说MMP</p><p>原来，Mac系统是要监听app的<code>open-file</code>事件的，而Windows则是通过进程对象来获取文件路径。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gajpyg05u4j31ps0kuq7b.jpg" alt></p><p>这样可以获取到文件路径了，但最终这个路径是要交给渲染进程去处理的，而在程序刚启动时渲染进程甚至还没有创建出来！此时，就需要在主进程中先定义一个变量保存一下接收的这个路径了，等待渲染进程加载完成后再把这个路径传给它，所以，我的整个处理逻辑如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部文件路径</span></span><br><span class="line"><span class="keyword">let</span> preFilePath = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'will-finish-launching'</span>, () =&gt; &#123;</span><br><span class="line">  log.debug(<span class="string">'will-finish-launching'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开文件事件（MacOS有效）</span></span><br><span class="line">  app.on(<span class="string">"open-file"</span>, (e, filePath) =&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">"open-file: "</span>, filePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fw = BrowserWindow.getFocusedWindow();</span><br><span class="line">    <span class="keyword">if</span> (fw) &#123;</span><br><span class="line">      fw.webContents.send(<span class="string">"lm-open-file"</span>, [filePath]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      preFilePath = filePath</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查进程是否含有参数(Windows有效)</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform ===<span class="string">'win32'</span> &amp;&amp; process.argv.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    log.debug(<span class="string">'process argv:'</span>, process.argv)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// windows系统当没有路径参数时这个位置默认有个.，需要加以判断</span></span><br><span class="line">    preFilePath = process.argv[<span class="number">1</span>] === <span class="string">'.'</span> ? <span class="string">''</span> : process.argv[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mainWindow.once(<span class="string">'ready-to-show'</span>, () =&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">'ready-to-show'</span>)</span><br><span class="line">    mainWindow.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否存在需要直接打开的文件，有的话就直接打开</span></span><br><span class="line">    <span class="keyword">if</span> (preFilePath) &#123;</span><br><span class="line">      mainWindow.webContents.send(<span class="string">'lm-open-file'</span>, [preFilePath])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>其中，在app的<code>will-finish-launching</code>事件中才开始监听文件打开事件，也是官方文档上面建议的：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gajq4l05azj31na0fm0wc.jpg" alt></p><p>这样做了之后，整个记事本应用才显得完整起来。</p><p>其实，上面的很多做法不仅限于记事本中使用，希望我写的文章能对大家有所帮助！</p><p>下面放上我写的记事本的截图，来证明我做到过！</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gajq8r60cij31c00u0qvb.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Electron是一个跨平台的框架，可以用网页语言来开发客户端程序，虽然说每一个应用都是一个Chrome，但毕竟也是方便了我们这些前端开发者做自己的客户端软件的梦想。&lt;/p&gt;
&lt;p&gt;这里我为了能使用到最新版本的Electron，并没有选择用&lt;code&gt;electron-vu
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="Electron" scheme="https://godbobo.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>2019年度总结</title>
    <link href="https://godbobo.github.io/2019/12/27/end-2019/"/>
    <id>https://godbobo.github.io/2019/12/27/end-2019/</id>
    <published>2019-12-27T02:18:28.000Z</published>
    <updated>2019-12-27T02:18:28.525Z</updated>
    
    <content type="html"><![CDATA[<p>人总是在不停得长大，一年又一年。当到了年尾，总会有很多感慨想要抒发，有很多事情想要总结。但万万没想到，还有很多事情要<strong>被迫总结</strong>。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaelqu6u4j30kw0h4abo.jpg" alt></p><p>那么，多情的我只好写两份总结啦。下面是我的个人自愿版总结：</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>总的来说，今年相较于往年，自己的生活已经可以用丰富多彩来形容了。可能也是因为毕业季的原因吧，又是毕业论文又是找工作的，反正就是可以拿出来说的事情有很多很多。</p><p>今年的我从1月份就开始忙碌起来了，放了寒假之后就立马去找工作了。也算是比较幸运的吧，不爱背题面试准备不充分的我竟然在一星期的漫漫求职路中通过了。在公司过完年会之后回家过了个年，然后就开始边工作边补自己的毕业设计了，在做这个设计的时候才知道要搞一个完整的系统有多难，没办法，时间也紧，就草草做了一个还看得过去的毕设出来。到了四五月份，学校就催着回去搞论文了，我一听到截止日期，就天真地回去了，结果大家都不回来，搞得我多在学校待了几个星期。不过却也算把论文搞得像模像样了，这一点还是要谢谢张翔老师的，虽然最后没把我的论文作为优秀毕业论文，不过我也没有特别看重这个。毕竟自己越长大，对生活的要求就越低了，能过就好了嘛，很满足了。然后又回到杭州开始了苦逼了码农生活，期间将自己租的房子换得离公司近了一点，少走了几步路，不过也激发了自己的惰性，自从搬家之后就很少自己做饭了。然后从十月份到现在，就是还算奢靡的生活了，把自己所能用到的电子产品都买了个遍，只想说一句，能挣钱的感觉真好。</p><h2 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h2><p>在1月份那几天的面试过程中，我也算是碰了很多次壁，有问我问题我答不上来的，有劝我去培训的，还有劝我转行的。</p><p>找工作对于一些人来讲可能是人生的一个小小的分叉路口，但对于我来说并不是这样，因为我没有第二条路，我只想做程序员，如果现在的我不能，那我宁愿去被培训机构培训之后再来做。</p><p>不过还好，在不是特别好的求职时间段中，我现在的这家公司接纳了我，算是给我了一个在杭州的容身之地和待在杭州的理由。</p><p>说到为什么会选择来杭州，其实也没那么多为什么，这对于我来说就是一个玄学的问题。在高考填报志愿的时候，我就因为我暗恋的女生名字里有个“楠”字而把所有志愿报到了南方，虽然她还在省内。。。</p><p>而选择来杭州，一是自己的工作性质，在家里那种小城市肯定是不好找工作的，二是年轻人总要多出来闯荡闯荡，三可能是我想往更南方走一点，四是深圳那种地方，大晴天突然给你下一顿雨，来也匆匆去也匆匆的，让我这种十分不爱带伞的人很不爽，很怕，那里还会随时查你身份证！我不爱带钱包，自然也不爱带身份证！如果不是我对于手机那刻骨铭心的爱，说不定我连手机也不爱带呢。</p><p>这样综合一考虑，也就上有天堂下有苏杭的电商之都，杭州似乎是我最理想的城市了。</p><p>刚开始工作的时候，看公司的代码，一个后台200多M的代码，也算是让我长见识了。不过后面看里面的代码，其实重复的东西也是有很多的，而且用了一次就不用的东西也有很多，里面的代码质量和自己的比起来，说不定真是自己更胜一筹呢。不过慢慢的，也发现了里面有很多我以前没有了解过的很实用的东西，还是很值得我去了解一下的。</p><p>在写后台的时候，最让我头疼的就是里面的各种业务逻辑了，光整理逻辑就要花大半天，有的时候光凭自己瞎找还搞不定，真的是一有这种任务就会有点后怕。</p><p>之后就还算好点了，我基本上就专职搞公司的前端了，用自己现学现卖的uni-app框架把公司的微信端网页给重构了，还用Vuejs写了两个后台管理系统的项目，也算是前端修炼小成了。</p><p>不过正当我准备在前端大展身手的时候，领导需要我去做后端了。那我自然是乐意的，毕竟后端正在用最近很火热的微服务架构去重构，这么热门的技术我不去了解一下怎么能行？虽然这样又要涉及到复杂且繁琐的业务逻辑的梳理了，但一切为了技术，都是值得的！希望明年可以有更好的发展吧</p><h2 id="生活总结"><a href="#生活总结" class="headerlink" title="生活总结"></a>生活总结</h2><p>刚来杭州找到工作之后，第一件事就是要确定自己的住处。当时也真是“果断”，看了一个还算便宜的房子，就立刻租下来了。直到拿快递的时候才知道我在的地方不是滨江区而是萧山区，自那时起我就下定决心以后不租这种“公寓“式的房子了，不仅要自己以贷款的名义先让他们资金回笼，业务员还为了达成交易不择手段，欺骗我幼小的心灵，哼！</p><p>不过那个房子除了离公司远点之外，房间面积小点之外，似乎也还是挺不错的。至少在刚开始的几个月，没有室友的时候，天天都能独占一整个房子，想躺客厅哪里就躺哪里，想怎么做饭就怎么做饭，想怎么哼歌就怎么哼歌。</p><p>后面来室友了，一个个都是情侣，一点也不给我想象中的爱情的发展空间，当然就算有想象空间了对我而言可能也真的就是想想而已。</p><p>刚开始工作的时候，由于是实习生，工资低的可怜，一个月才2000。没办法，只好能省则省了，也就是那个时候开始尝试自己去做饭，炒菜，也算是有了一点点自己的心得了。记得最深的一次就是我在炒菜的时候锅里着火了，刚开始我还很开心，觉得自己要变身大厨了，连电视里厨师做饭的效果都搞出来了。结果那火一直不灭，越着越旺，我就开始慌了，把🔥调小也没用，急的我直接把锅从灶台上拿下来放到地上降温，真的是惊心动魄。</p><p>毕业之后工资总算高了点，就给自己找了个离公司还算近的地方，每天上下班骑车的话十五分钟左右就可以到了。</p><blockquote><p>可是，为什么，这个月我又迟到了五次😭</p></blockquote><p>在这里就是有一点不好，做饭太不方便了，这让比较懒的我更多了一个借口不去做饭了。说到懒，我是真的无解了，大概是从3月份得知办市民卡之后可以免费骑公共自行车，就想着要办一下。结果到年底了，我还没有去办，只能寄希望于明年我有这个决心可以尽早办一下吧。</p><p>物质方面，由于近段时间转正后工资的提升以及杭州市政府的一次补贴，让我有了更多买东西的想法。前前后后的，把MacBook Air、AirPods、机械键盘、妙控鼠标和显示器都算是补充完毕了，自此，短期内是没有什么特别想要的电子产品了。</p><p>今年也是自己用ihpone的第一年，说真的，除了新iPhone上市的时候有些心动之外，我真的没有一点换手机的想法，就算是5G也对我没什么吸引力了。在这一点上，我只能说一句苹果真香！</p><h2 id="情感总结"><a href="#情感总结" class="headerlink" title="情感总结"></a>情感总结</h2><p>如上所示</p><p><strong>一片空白</strong></p><h2 id="兴趣总结"><a href="#兴趣总结" class="headerlink" title="兴趣总结"></a>兴趣总结</h2><p>很幸运的是，我的兴趣就是我的工作，所以对于我工作上的任何成果，我都是会非常开心的。</p><p>第一点就是完成了自己的毕业设计《校园博客系统的设计与实现》，这算是自己独立完成的第二个项目了（第一个应该算是自己胎死腹中的安卓音乐播放器了），在做这个系统时，自己用到了很多最新的技术，比如前后端分离，比如Vue和SpringBoot，都是我在边学边做的过程中完成的。自然，代码质量肯定不会太高，但也是有一定的水准的。下面把地址贴上：</p><p><a href="https://github.com/godbobo/school-blog-vue" target="_blank" rel="noopener">https://github.com/godbobo/school-blog-vue</a>22次提交</p><p><a href="https://github.com/godbobo/school-blog-springboot" target="_blank" rel="noopener">https://github.com/godbobo/school-blog-springboot</a>22次提交</p><p>然后就是自己独立一人将公司原有的微信前端项目用uni-app改造后并上线了，虽然也出过不少bug，但大部分最后都解决了。现在基本上就剩两个小问题我无从下手了，一是微信的浏览器缓存实在顽固，每次更新总会有用户手机里有缓存清不掉，二是框架自动提示的网络不给力问题，报bug给官方官方也不重视起来，让我有想骂人的冲动。由于是公司的代码，就只放上一张打码后的首页截图留做纪念吧。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaahhke4u1j30sg1ekwnk.jpg" alt></p><p>还有就是从零开始用Vuejs写的一个后台管理系统，那时的自己了解到的东西并不多，所以代码质量什么的真的不是特别好。再后面根据现有的后台管理系统改造成Vue项目，虽然还没用起来，但我基本上是很用心地把能完善的地方都完善了一下，总会有上线的一天的。</p><p>在写uni-app项目的时候，还抽空写了两个组件发布到了插件市场，目前虽然也不火热，但用的人也没有特别差的评论，其实也就挺满足了。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaai313xlmj32600kswim.jpg" alt></p><p>中间还因为买了Mac，去买了本写IOS软件的书，买了写IOS软件的视频教程。结果学了之后感觉差不多都掌握了，但真正去做的时候还是很难下手，这点感觉有点不爽。</p><p>最近又沉迷在了electron开发当中，希望能开发一款属于自己的Markdown编辑器，来代替自己现在在用的这个。</p><p>不过就在今天晚上谈定了一个私活，做好后等于自己一个月工资，看来接下来的这个年怕是过不好喽～不过还是感谢显威给了我一个赚钱的机会😘</p><h2 id="浮云流水"><a href="#浮云流水" class="headerlink" title="浮云流水"></a>浮云流水</h2><p>心情因为能多赚钱而觉得有些浮躁，就不想那么多了。下面用照片回顾一下今年的历程。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaifnnoaij315s0l6npd.jpg" alt></p><p>这是充满希望的时刻，每张照片里都有光亮在前方。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaihgsrkhj31hp0u0qv7.jpg" alt></p><blockquote><p>2018-12-30</p></blockquote><p>这是孤独的时刻，一个人在冰天雪地里，希望能留下与景德镇最后的回忆。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaiiti60lj30k40u60vo.jpg" alt></p><blockquote><p>2018-12-31夜  和室友跨年</p></blockquote><p>这是彷徨的时刻，不知前路在何方。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaainy1dcgj30sc10o4qp.jpg" alt></p><blockquote><p>2019-01-01 现实且充满希望的新年祝福</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaips8dtnj30u60k4wlx.jpg" alt></p><blockquote><p>毕业啦</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaair0zmqpj30sg0lctco.jpg" alt></p><blockquote><p>2019-01-07 这个夜晚，见证了郭园的悲欢离合的那群人</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaisixv6lj30ih0wuabk.jpg" alt></p><blockquote><p>2019-01-13 临别时的矫情</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaitzeeobj30sg0lcdkq.jpg" alt></p><blockquote><p>2019-01-13 端阳兄请客！</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaivsy9zxj30sg0lc7e0.jpg" alt></p><blockquote><p>2019-01-16 没有面试？西湖走起！</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaixdv87zj30sg0lctdl.jpg" alt></p><blockquote><p>2019-01-18 确定工作后的展望</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaiyhu9f0j30sg0lc0zv.jpg" alt></p><blockquote><p>01-21 上班是件充满朝气的事情（当然，现在又开始赖床了）</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaj0wp9xhj30sg0lctin.jpg" alt></p><blockquote><p>02-24 兄台，你这个地方有点问题，来，我指给你看！</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaj2n5hvuj30sg0sgdo8.jpg" alt></p><blockquote><p>03-03 不会做饭怎么办？当然是请人来做！</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaj3xxim2j30sg0lcn2u.jpg" alt></p><blockquote><p>03-17 啥玩意儿？有比赛看？</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaj592npsj30sg0lck2l.jpg" alt></p><blockquote><p>03-30 草长莺飞的季节</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaj6aaxsmj30sg0lck04.jpg" alt></p><blockquote><p>03-30 西溪且留下</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaaj8swfktj30wu0ihq5m.jpg" alt></p><blockquote><p>04-20 再续前缘</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajasilpnj30sg0lcqcc.jpg" alt></p><blockquote><p>06-07 万千繁华隐于世</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajc40g8nj30lc0sggrl.jpg" alt></p><blockquote><p>06-19 上班路上</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajdbfv0lj30sg0lcq71.jpg" alt></p><blockquote><p>07-03 咋又见面了，不是说好不见的吗</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajek92v6j31400u0b2a.jpg" alt></p><blockquote><p>07-05 真香，见的好！</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajgdesllj30sg0lc78c.jpg" alt></p><blockquote><p>09-08 惬意</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajh965rej30ih0wuq40.jpg" alt></p><blockquote><p>09-13 身在潮边仍要看电视观潮的无奈</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajinre4dj30sg0sgh0o.jpg" alt></p><blockquote><p>09-21 公司团建</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajjkykasj30lc0sgtcu.jpg" alt></p><blockquote><p>10-05 天上地下我最穷！</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajl26mbfj30sg0lcn5j.jpg" alt></p><blockquote><p>10-05 猜猜哪个是出自心灵手巧的我？</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajm7rlusj30ih0wu15s.jpg" alt></p><blockquote><p>10-19 周末在庐山</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajnqz7zbj30sg0lcn07.jpg" alt></p><blockquote><p>11-18 可能是买回来树莓派后的最高光时刻</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gaajp8cnllj30sg0lcwj5.jpg" alt></p><blockquote><p>12-19 边听歌边敲代码的休闲时光</p></blockquote><p>攒了这么多图片，一口气发出来的感觉真好。</p><h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1><p>在这一年里，作为自己人生的一个转折点，自我感觉转的方向是对的。至于后续，走一步看一步吧。</p><p>一个人生活的一年时光里，最多的感觉莫过于孤独，最渴望的也莫过于爱情。但越渴望，越觉得害怕，每每想到这里，都觉得自己以后还是去相亲靠谱。可相亲又是最看重现实情况的，这样一想，一个人倒也不过，每个月留不住钱却也活得自在。</p><p>明年加油吧，还是那个不切实际的愿望。</p><p>希望它能实现。</p><p>希望它不能实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人总是在不停得长大，一年又一年。当到了年尾，总会有很多感慨想要抒发，有很多事情想要总结。但万万没想到，还有很多事情要&lt;strong&gt;被迫总结&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwg
      
    
    </summary>
    
      <category term="个人" scheme="https://godbobo.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="年度总结" scheme="https://godbobo.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>在自己的网站中启用HTTPS服务</title>
    <link href="https://godbobo.github.io/2019/12/18/ssl/"/>
    <id>https://godbobo.github.io/2019/12/18/ssl/</id>
    <published>2019-12-18T08:56:59.000Z</published>
    <updated>2019-12-18T08:57:00.426Z</updated>
    
    <content type="html"><![CDATA[<p>看着身边的网站一个个在地址栏都有了小锁的标志，自己也是心痒痒呀。正好今天手头的事情不多，就来搞了一下这个东西。</p><h2 id="一、SSL证书平台选择"><a href="#一、SSL证书平台选择" class="headerlink" title="一、SSL证书平台选择"></a>一、SSL证书平台选择</h2><p>首先，提供SSL证书的平台有很多，各种云计算平台也都有提供的。不过他们提供的免费证书大部分都是有时间限制的，三个月到一年不等，到期就要自己手动续期。</p><p>本着一劳永逸的原则，我开始了寻找SSL证书平台之旅。结果并没有找到自己想要的结果，不过中途却发现了有些平台用的就是<strong>Let’s Encrypt</strong>这个平台的证书，就是做了一个中间商，只不过不赚差价而已。而我生平，最讨厌中间商。</p><p>于是我直接找到了“厂商”，点击<code>Get Started</code>，就开始了探索<strong>CentOs下Nginx服务器安装SSL证书</strong>的旅程。</p><blockquote><p>剧透一下结果：证书同样需要续期，不过可以安装工具自动续期，相当于永久的证书了。</p></blockquote><p>在快速入门章节，可以看到有两种方式可以获取到SSL证书。而我的情况，适用于第一种，拥有命令行访问权限。</p><blockquote><p>摘自<a href="https://letsencrypt.org/zh-cn/getting-started/" target="_blank" rel="noopener">https://letsencrypt.org/zh-cn/getting-started/</a></p><p>我们建议大多数具有命令行访问权限的人使用 Certbot ACME 客户端。它可以在不下线您的服务器的前提下自动执行证书颁发和安装。对于不需要自动配置的用户，Certbot 还提供专家模式。它易于使用，适用于许多操作系统，并且具有出色的（注：英文）文档。访问 Certbot 官网 以获取针对于操作系统和 Web 服务器的订制文档。</p></blockquote><p>所以接下来，就是如何使用certbot的问题了。</p><h2 id="二、配置环境并安装CertBot"><a href="#二、配置环境并安装CertBot" class="headerlink" title="二、配置环境并安装CertBot"></a>二、配置环境并安装CertBot</h2><p>在<strong>Let’s Encrypt</strong>的快速入门页面中，可以找到<a href="https://certbot.eff.org/" target="_blank" rel="noopener">CertBot官网</a>的链接。</p><p>进入CertBot官网后，首先它让我们检查自己的网站是否已经有了HTTPS访问的功能。很显然，我的并没有，于是就需要安装CertBot了。</p><p><img src="https://i.loli.net/2019/12/18/gWCBS6wsqlZNunh.png" alt></p><p>点击右边的<strong>Get Certbot instructions</strong>来查看Certbot的使用说明。</p><p>在新的页面里，会让你选择自己的服务运行环境，我这里就是Nginx运行在CentOS7上面，所以按下图这样选择。</p><p><img src="https://i.loli.net/2019/12/18/6LcOrWDlGKoNVen.png" alt></p><p>然后向下滚动页面就可以看到适用于自己系统的安装方式了。</p><p>第一步是通过SSH连接到服务器，第二部具体是在干嘛的不太清楚，就按它的要求开启这个东西就行了。开启方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>第三步是开启可选模块，我当时啥都没想直接就开启了，现在想想似乎并不需要开启这个，因为那啥Oracle Linux应该和我无关吧。不过保险起见还是把命令列出来吧，下次再安装的时候万一就用到了呢。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure><p>接下来就是安装本篇文章的主角<strong>Certbot</strong>了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install certbot python2-certbot-nginx</span><br></pre></td></tr></table></figure><h2 id="三、修改nginx配置文件并启用SSL证书"><a href="#三、修改nginx配置文件并启用SSL证书" class="headerlink" title="三、修改nginx配置文件并启用SSL证书"></a>三、修改nginx配置文件并启用SSL证书</h2><p>接下来，就到了第五步了。这时，它又让我选择安装方式，那看了说明自然是第一种简单呀，一键自动化配置，爽！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>爽不过一秒，命令行就报错了。</p><blockquote><p>这里还要说一下，如果是第一次执行这个命令，会让你输入自己的邮箱，输入一下即可。</p></blockquote><p><img src="https://i.loli.net/2019/12/18/W3hnXZY79uBrHm1.png" alt></p><p>看上面说的，再去搜索了一下相关问题，大概知道是自己在nginx配置文件中用了中文注释的原因。删掉后再次运行，又卡在了服务器验证这一步，看来安装SSL服务并没有想象中那么简单啊。</p><p><img src="https://i.loli.net/2019/12/18/4IlQTG7VjefJC63.png" alt></p><p>然后在一番乱搜之后，在这两篇文章的帮助下我完成了SSL服务的搭建。</p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-centos-7" target="_blank" rel="noopener">How To Secure Nginx with Let’s Encrypt on CentOS 7</a><br><a href="https://linuxize.com/post/secure-nginx-with-let-s-encrypt-on-centos-7/" target="_blank" rel="noopener">Secure Nginx with Let’s Encrypt on CentOS 7</a></p><p>在第一篇文章里，我用一下命令<strong>更新了一下自己的防火墙配置</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许http和https和重定向访问</span></span><br><span class="line">sudo firewall-cmd --add-service=http</span><br><span class="line">sudo firewall-cmd --add-service=https</span><br><span class="line">sudo firewall-cmd --runtime-to-permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许外网访问80端口和443端口</span></span><br><span class="line">sudo iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">sudo iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这样做了之后，还是没有效果（以前曾经把80端口放开过），然后又参考第二篇文章，终于成功了，具体步骤如下：</p><h3 id="1、生成强Dh-Diffie-Hellman-群（并不懂在说啥，敲代码就是了）"><a href="#1、生成强Dh-Diffie-Hellman-群（并不懂在说啥，敲代码就是了）" class="headerlink" title="1、生成强Dh (Diffie-Hellman)群（并不懂在说啥，敲代码就是了）"></a>1、生成强Dh (Diffie-Hellman)群（并不懂在说啥，敲代码就是了）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</span><br></pre></td></tr></table></figure><blockquote><p>这个步骤需要花费一段时间，屏幕中会有大片英文逗号出现。</p></blockquote><h3 id="2、创建存放证书的目录"><a href="#2、创建存放证书的目录" class="headerlink" title="2、创建存放证书的目录"></a>2、创建存放证书的目录</h3><blockquote><p>我猜是这么回事。进行HTTPS访问时，总会有一个额外的操作用来获取证书内容，那证书从哪里来呢？当然要找个地方存起来才能让浏览器获取。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/lib/letsencrypt/.well-known</span><br><span class="line">sudo chgrp nginx /var/lib/letsencrypt</span><br><span class="line">sudo chmod g+s /var/lib/letsencrypt</span><br><span class="line"></span><br><span class="line">sudo mkdir /etc/nginx/snippets</span><br></pre></td></tr></table></figure><p>目录创建好之后，将下面两个文件创建到<code>/etc/nginx/snippets</code>目录下面：</p><p><strong>/etc/nginx/snippets/letsencrypt.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">  allow all;</span><br><span class="line">  root /var/lib/letsencrypt/;</span><br><span class="line">  default_type &quot;text/plain&quot;;</span><br><span class="line">  try_files $uri =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>/etc/nginx/snippets/ssl.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class="line"></span><br><span class="line">ssl_session_timeout 1d;</span><br><span class="line">ssl_session_cache shared:SSL:50m;</span><br><span class="line">ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_ciphers &apos;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&apos;;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">ssl_stapling on;</span><br><span class="line">ssl_stapling_verify on;</span><br><span class="line">resolver 8.8.8.8 8.8.4.4 valid=300s;</span><br><span class="line">resolver_timeout 30s;</span><br><span class="line"></span><br><span class="line">add_header Strict-Transport-Security &quot;max-age=15768000; includeSubdomains; preload&quot;;</span><br><span class="line">add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">add_header X-Content-Type-Options nosniff;</span><br></pre></td></tr></table></figure><p>看到上面的文件内容基本可以知道，这是Nginx配置文件的格式。把这个配置文件单独拿出来存放应该是为了在Nginx主配置文件中复用上面的配置内容（每个不同的域名均需要配置SSL证书）。</p><h3 id="3、修改Nginx配置文件"><a href="#3、修改Nginx配置文件" class="headerlink" title="3、修改Nginx配置文件"></a>3、修改Nginx配置文件</h3><p>这时，我们需要在Nginx配置文件中的<code>server</code>区域内加入下面这句话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include snippets/letsencrypt.conf;</span><br></pre></td></tr></table></figure><p>这时，这个配置文件就大概应该是这个样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name example.com www.example.com;</span><br><span class="line"></span><br><span class="line">  include snippets/letsencrypt.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启Nginx服务器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><p>然后教程中的下一步是以<code>certbot certonly</code>开头的一段命令，用于获取对应域名的证书。而我运行这个命令死活不成功，会报<code>No valid IP addresses found for aqzscn.com</code>的错误。</p><p>万念俱灰之下，我又回到Certbot的说明文档，执行了一下<code>sudo certbot --nginx</code>，结果一路畅通无阻，中间还提示我是否要将HTTP请求重定向为HTTPS请求，那当然OK呀。</p><p>下面是我生成证书成功后提示的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   /etc/letsencrypt/live/www.aqzscn.com/fullchain.pem</span><br><span class="line">   Your key file has been saved at:</span><br><span class="line">   /etc/letsencrypt/live/www.aqzscn.com/privkey.pem</span><br><span class="line">   Your cert will expire on 2020-03-17. To obtain a new or tweaked</span><br><span class="line">   version of this certificate in the future, simply run certbot again</span><br><span class="line">   with the &quot;certonly&quot; option. To non-interactively renew *all* of</span><br><span class="line">   your certificates, run &quot;certbot renew&quot;</span><br><span class="line"> - If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class="line">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure><p>证书生成成功之后，还需要做的就是自动更新证书，在命令行中敲以下命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew"</span> | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure><h2 id="四、测试结果"><a href="#四、测试结果" class="headerlink" title="四、测试结果"></a>四、测试结果</h2><p>这个时候，就到了检验结果的时候了。</p><p>在浏览器地址栏输入自己的域名后，预期的网页终于出现了。不过奇怪的一点是，如果我不加HTTPS，它并不会给我重定向到HTTPS的请求。</p><p><img src="https://i.loli.net/2019/12/18/L6xHtVZiIDRPT5j.png" alt></p><p>因为我这个域名下面还有几个子域名，于是我将其也加入了HTTPS访问。但这次我在地址栏输入<code>care.aqzscn.com</code>时，它又确实给我重定向到HTTPS请求了。很奇怪很奇怪，应该是有哪里没有搞好把。</p><p><img src="https://i.loli.net/2019/12/18/N9kzF3wExchR1Ae.png" alt></p><p>此时又出现了一个问题就是我的后台服务没有开启HTTPS服务，好难啊。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，这次是实现了在网站中添加SSL证书的功能，其中还是有一些不足需要完善，不过还是留到下次再说吧，到时候研究一下能不能把相同的证书用在没有域名的服务器上，或者说就用自己生成的证书来提供HTTPS服务，反正API请求的地址用户也看不到了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看着身边的网站一个个在地址栏都有了小锁的标志，自己也是心痒痒呀。正好今天手头的事情不多，就来搞了一下这个东西。&lt;/p&gt;
&lt;h2 id=&quot;一、SSL证书平台选择&quot;&gt;&lt;a href=&quot;#一、SSL证书平台选择&quot; class=&quot;headerlink&quot; title=&quot;一、SSL证书
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="nginx" scheme="https://godbobo.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>vue项目手写一个局部打印的组件</title>
    <link href="https://godbobo.github.io/2019/12/02/web-print/"/>
    <id>https://godbobo.github.io/2019/12/02/web-print/</id>
    <published>2019-12-02T07:24:16.000Z</published>
    <updated>2019-12-02T07:24:16.352Z</updated>
    
    <content type="html"><![CDATA[<p>后台管理系统当中，报表的打印和导出是非常常用的功能，这次我就记录一下如何手写一个局部打印功能的组件。</p><p>最终实现效果：</p><p><img src="https://i.loli.net/2019/12/02/gTW3ZitramsDnHv.png" alt></p><blockquote><p>上图的数据打了马赛克，不过还是基本能看出来实现了局部打印功能，并且表格的样式都能正常显示。为了实现这个局部打印功能，我在中间还是趟了不少坑的。</p></blockquote><h2 id="一、实现局部打印的方式"><a href="#一、实现局部打印的方式" class="headerlink" title="一、实现局部打印的方式"></a>一、实现局部打印的方式</h2><p>浏览器的<code>window</code>对象有一个<code>print()</code>方法可以用来打印，但这种方式只能打印整个网页，不能对具体的某个元素进行打印，并且dom元素对象中也没有相关的打印方法，这就使得局部打印必须采取一些技巧才能实现。</p><p>第一种方式是新建窗口（标签页），专门放打印内容，然后调用<code>window.print()</code>方法进行打印。但这种方式就要每一个打印内容都需要新建页面（标签页必须得有网址，不能用js凭空创建），不能进行有效的复用。</p><p>第二种方式是用<code>iframe</code>标签，在里面放置打印内容，然后调用<code>iframe.contentWindow.print()</code>方法进行打印。这种方式需要处理很多细节上的东西，但处理之后其他地方就可以进行简单的调用了。</p><p>综合考虑，最终我选择使用第二种方式，并且使用组件来做而非常规的js文件（可以方便地使用vue的模板渲染表格）。</p><blockquote><p>另外就是使用jquery插件<code>printArea</code>，但是作为一个高端的vue项目，怎么能jQuery这种东西呢？遂弃之。</p><p>还有就是printjs、vuePlugs_printjs等纯js插件，printjs可以打印，但样式不能设置成我满意的样式；vuePlugs_printjs样式和原内容一样，但不能将超出内容自动分页，遂弃之。</p></blockquote><h2 id="二、实现局部打印"><a href="#二、实现局部打印" class="headerlink" title="二、实现局部打印"></a>二、实现局部打印</h2><p>这里参考了<a href="https://github.com/xyl66/vuePlugs_printjs/blob/master/print.js" target="_blank" rel="noopener">vuePlugs_printjs</a>的源码，在此表示感谢。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打印占位 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"printf"</span> <span class="attr">src</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打印内容,我这里是为了打印表格，你也可以替换为自己需要打印的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">ref</span>=<span class="string">"printTable"</span> <span class="attr">id</span>=<span class="string">"printTable"</span> <span class="attr">class</span>=<span class="string">"spl-table"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'simple-table'</span>,</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 打印表格内容</span><br><span class="line">     */</span><br><span class="line">    printTable () &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 1.获取要打印的内容的一份复制，否则待会儿添加节点时会将原有内容删除</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'printTable'</span>).cloneNode(<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2.获取放置打印内容的iframe</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> ifm = <span class="built_in">document</span>.getElementById(<span class="string">'printf'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3.添加打印内容样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> str = <span class="string">''</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> styles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'style,link'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; styles.length; i++) &#123;</span></span><br><span class="line">        str += styles[i].outerHTML</span><br><span class="line">      &#125;</span><br><span class="line">      ifm.contentDocument.write(str)</span><br><span class="line"><span class="javascript">      <span class="comment">// 4.添加打印内容并打印</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 使iframe中存在body元素，便于使用dom元素的方法</span></span></span><br><span class="line"><span class="xml">      ifm.contentDocument.write('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>')</span></span><br><span class="line">      ifm.contentDocument.close()</span><br><span class="line">      ifm.contentDocument.body.appendChild(content)</span><br><span class="line">      ifm.contentWindow.print()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'./simple-table.css'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中的注释已经写的很全面了，重点就是要将当前页面中的样式定义导入到<code>&lt;ifrme&gt;</code>元素中。并且在导入dom元素时没有将其转为字符串写入，而是直接采用<code>appendChild()</code>方法插入dom元素，这是因为转为字符串插入过程中一些dom元素会丢失导致表格显示异常。不过用了这种dom节点插入的方式之后，原有的节点就会被移动到这里，那么用户重复打印时这个组件的打印功能就失效了，这显然不是我们想要看到的结果。因此在前面创建了一个打印内容的复制，保证在插入节点后原节点依旧存在。</p><h2 id="三、超出内容分页、隐藏打印内容"><a href="#三、超出内容分页、隐藏打印内容" class="headerlink" title="三、超出内容分页、隐藏打印内容"></a>三、超出内容分页、隐藏打印内容</h2><p>在上面的代码实现了局部打印功能之后，当打印内容超出一页时，我发现打印预览却依然只有一页，而在正常页面中直接右键打印却可以自动分页，那到底是哪里出了问题呢?</p><p>在参考了<a href="https://segmentfault.com/q/1010000004342977" target="_blank" rel="noopener">这篇文章</a>之后，我明白了问题所在：我们的后台管理系统基本上body、html都是固定高度的，此时window的打印功能就只能确定一页的高度，因此我们需要将body和html的高度自适应子元素的高度，即：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是先别急，这样一设置我们的后台管理页面不就乱了套了嘛，此时就要用到CSS的媒体查询了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 打印时显示 */</span></span><br><span class="line">@<span class="keyword">media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.spl-table</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: inherit;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中同样将我们要打印的内容显示出来了，因此在普通的样式中我们就要将打印内容隐藏起来。这样就可以实现一个较为完美的局部打印功能了。</p><h2 id="附录：简单的表格打印组件"><a href="#附录：简单的表格打印组件" class="headerlink" title="附录：简单的表格打印组件"></a>附录：简单的表格打印组件</h2><p>下面是我实现的一个表格打印组件（环境：Vue+iview表格）。iview表格用于在查询界面显示报表，这个表格打印组件用于显示标准的表格打印内容。所以这个组件的各种参数都是以iview中的Table组件的参数来定义的，为的就是不用对同一个数据源做两次改变。</p><p><strong>组件内容</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打印占位 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"printf"</span> <span class="attr">src</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打印内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">ref</span>=<span class="string">"printTable"</span> <span class="attr">id</span>=<span class="string">"printTable"</span> <span class="attr">class</span>=<span class="string">"spl-table"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义header插槽，用于放置自定义标题内容，详见https://cn.vuejs.org/v2/guide/components-slots.html，注意：建议不要与下方title一起使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spl-fz16"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spl-fz12"</span>&gt;</span>&#123;&#123;subTitle&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遍历标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"n in headLoopData.trNum"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">"(th, thIndex) in headLoopData.deepArray[n - 1]"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">"thIndex"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:rowspan</span>=<span class="string">"hasChildren(th) ? 1 : (headLoopData.trNum - n + 1)"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:colspan</span>=<span class="string">"hasChildren(th) ? th.children.length : 1"</span></span></span><br><span class="line"><span class="tag">          &gt;</span>&#123;&#123;th.title&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遍历数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item, trIndex) in data"</span> <span class="attr">:key</span>=<span class="string">"trIndex"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"(pptDe, tdIndex) in headLoopData.columnDefines"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-if</span>=<span class="string">"rowAndColSpan(trIndex, tdIndex).indexOf(0) &lt; 0"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:key</span>=<span class="string">"tdIndex"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:rowspan</span>=<span class="string">"rowAndColSpan(trIndex, tdIndex)[0]"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:colspan</span>=<span class="string">"rowAndColSpan(trIndex, tdIndex)[1]"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:class</span>=<span class="string">"tdClass(rowAndColSpan(trIndex, tdIndex))"</span></span></span><br><span class="line"><span class="tag">            &gt;</span>&#123;&#123;tdContent(item, pptDe, trIndex)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'simple-table'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 列定义</span></span></span><br><span class="line">    columns: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> []</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 表格数据</span></span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> []</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 合并单元格策略(要隐藏的单元格需设置span为0，否则会导致表格显示错位)</span></span></span><br><span class="line">    spanMethod: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">1</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 标题</span></span></span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 二级标题</span></span></span><br><span class="line">    subTitle: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 显示标题行所需的变量</span></span></span><br><span class="line">    headLoopData () &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 行数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> trNum = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 每层标题的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> deepArray = []</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 每列的定义</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> columnDefines = []</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算列定义深度</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">countDeep</span> (<span class="params">obj, num</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line">          deepArray[num - 1].push(obj)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (obj.children &amp;&amp; obj.children.length) &#123;</span></span><br><span class="line">          num++</span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (num &gt; trNum) &#123;</span></span><br><span class="line">            trNum = num</span><br><span class="line">            deepArray.push([])</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          obj.children.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">            countDeep(item, num)</span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">          columnDefines.push(obj)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.columns.length) &#123;</span></span><br><span class="line">        trNum = 1</span><br><span class="line">        deepArray.push([])</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.columns.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">        countDeep(item, 1)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; trNum, deepArray, columnDefines &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 是否有子节点</span><br><span class="line">     * @param th - 列定义数组中的对象</span><br><span class="line">     */</span><br><span class="line">    hasChildren (th) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> th.children &amp;&amp; th.children.length</span></span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 单元格合并策略</span><br><span class="line">     * @param rowIndex - 行索引</span><br><span class="line">     * @param columnIndex - 列索引</span><br><span class="line">     */</span><br><span class="line">    rowAndColSpan (rowIndex, columnIndex) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> de = [<span class="number">1</span>, <span class="number">1</span>]</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.spanMethod &amp;&amp; <span class="keyword">this</span>.spanMethod <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span></span><br><span class="line"><span class="javascript">        de = <span class="keyword">this</span>.spanMethod(&#123; rowIndex, columnIndex &#125;)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> de</span></span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 单元格显示内容</span><br><span class="line">     * @param row - 行数据</span><br><span class="line">     * @param colDe - 列定义</span><br><span class="line">     * @param trIndex - 行索引</span><br><span class="line">     */</span><br><span class="line">    tdContent (row, colDe, trIndex) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (colDe.type === <span class="string">'index'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> trIndex + <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> colDe.key ? row[colDe.key] : <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 单元格样式</span><br><span class="line">     * @param spanDef - 单元格合并结果，例:[1,1]</span><br><span class="line">     */</span><br><span class="line">    tdClass (spanDef) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (spanDef[<span class="number">0</span>] &gt; <span class="number">1</span> || spanDef[<span class="number">1</span>] &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 合并单元格后设置单元格内容居中显示</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">'cell-center'</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 打印表格内容</span><br><span class="line">     */</span><br><span class="line">    printTable () &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 1.获取要打印的内容的一份复制，否则待会儿添加节点时会将原有内容删除</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'printTable'</span>).cloneNode(<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2.获取放置打印内容的iframe</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> ifm = <span class="built_in">document</span>.getElementById(<span class="string">'printf'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3.添加打印内容样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> str = <span class="string">''</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> styles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'style,link'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; styles.length; i++) &#123;</span></span><br><span class="line">        str += styles[i].outerHTML</span><br><span class="line">      &#125;</span><br><span class="line">      ifm.contentDocument.write(str)</span><br><span class="line"><span class="javascript">      <span class="comment">// 4.添加打印内容并打印</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 使iframe中有body元素</span></span></span><br><span class="line"><span class="xml">      ifm.contentDocument.write('<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>')</span></span><br><span class="line">      ifm.contentDocument.close()</span><br><span class="line">      ifm.contentDocument.body.appendChild(content)</span><br><span class="line">      ifm.contentWindow.print()</span><br><span class="line">    &#125;,</span><br><span class="line">    exportTable () &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// excel.export_table_to_excel('tryprint', '测试表格.xlsx')</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'./simple-table.css'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>样式文件</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认隐藏 */</span></span><br><span class="line"><span class="selector-class">.spl-table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印时显示 */</span></span><br><span class="line">@<span class="keyword">media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.spl-table</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: inherit;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spl-table</span> <span class="selector-tag">caption</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spl-table</span> <span class="selector-tag">thead</span> <span class="selector-tag">tr</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: <span class="built_in">rgb</span>(211, 202, 221);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spl-table</span> <span class="selector-tag">thead</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Verdana;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(95, 74, 121);</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spl-table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Verdana;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(95, 74, 121);</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spl-fz16</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spl-fz12</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打印组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">simple-table</span> <span class="attr">ref</span>=<span class="string">"spTable"</span> <span class="attr">:columns</span>=<span class="string">"tableColumns"</span> <span class="attr">:data</span>=<span class="string">"tableList"</span> <span class="attr">:span-method</span>=<span class="string">"controlTableSpan"</span> <span class="attr">title</span>=<span class="string">"统计报表"</span> <span class="attr">sub-title</span>=<span class="string">"2019-12-15 ~ 2019-12-30 统计报表"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行打印方法</span></span><br><span class="line"><span class="keyword">this</span>.$refs[<span class="string">'spTable'</span>].printTable()</span><br></pre></td></tr></table></figure><blockquote><p>另外还有一个功能是将表格内容强制分页，同样是利用CSS来做的，思路就是将要分页的表格分成多个table，然后在table之间加上css分页样式：<code>page-break-after: always;</code>即可。不过怎么在这个组件中实现我暂时还没有思路，先在此记录一下。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;后台管理系统当中，报表的打印和导出是非常常用的功能，这次我就记录一下如何手写一个局部打印功能的组件。&lt;/p&gt;
&lt;p&gt;最终实现效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/12/02/gTW3ZitramsDnHv.png&quot; alt
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="网页打印" scheme="https://godbobo.github.io/tags/%E7%BD%91%E9%A1%B5%E6%89%93%E5%8D%B0/"/>
    
      <category term="网页开发" scheme="https://godbobo.github.io/tags/%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>树莓派入门之4位数码管</title>
    <link href="https://godbobo.github.io/2019/11/19/raspberry-digital-tube/"/>
    <id>https://godbobo.github.io/2019/11/19/raspberry-digital-tube/</id>
    <published>2019-11-19T01:23:07.000Z</published>
    <updated>2019-11-19T01:23:18.144Z</updated>
    
    <content type="html"><![CDATA[<p>数码管长这个样子：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92hyf6ibjj31800u07wi.jpg" alt></p><p>数码管分为静态数码管和动态数码管，如果是静态数码管的话针脚数量不敢想象，我这个是动态的数码管，所以只有12个针脚。</p><p>可能大家还不是很懂，可是解释啥的感觉自己也不太会，就放上一个链接供大家参考：</p><p><a href="https://www.cnblogs.com/badnewfish/p/5908423.html" target="_blank" rel="noopener">https://www.cnblogs.com/badnewfish/p/5908423.html</a></p><p>然后放上驱动的代码（显示当前时间）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># abcdefg 从上边开始顺时针编号， dp 表示小数点 dotpoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义单个数码管各段led对应的GPIO口</span></span><br><span class="line">LED_A = <span class="number">26</span></span><br><span class="line">LED_B = <span class="number">19</span></span><br><span class="line">LED_C = <span class="number">13</span></span><br><span class="line">LED_D = <span class="number">6</span></span><br><span class="line">LED_E = <span class="number">5</span></span><br><span class="line">LED_F = <span class="number">11</span></span><br><span class="line">LED_G = <span class="number">9</span></span><br><span class="line">LED_DP = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义1到4号数码管阳极对应的GPIO口</span></span><br><span class="line">DIGIT1 = <span class="number">12</span></span><br><span class="line">DIGIT2 = <span class="number">16</span></span><br><span class="line">DIGIT3 = <span class="number">20</span></span><br><span class="line">DIGIT4 = <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义按钮输入的GPIO口</span></span><br><span class="line"><span class="comment"># btn = 27</span></span><br><span class="line"></span><br><span class="line">RPi.GPIO.setmode(RPi.GPIO.BCM)</span><br><span class="line"></span><br><span class="line">RPi.GPIO.setup(LED_A, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(LED_B, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(LED_C, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(LED_D, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(LED_E, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(LED_F, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(LED_G, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(LED_DP, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(DIGIT1, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(DIGIT2, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(DIGIT3, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(DIGIT4, RPi.GPIO.OUT)</span><br><span class="line"></span><br><span class="line">RPi.GPIO.output(DIGIT1, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(DIGIT2, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(DIGIT3, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(DIGIT4, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RPi.GPIO.setup(btn, RPi.GPIO.IN, pull_up_down=RPi.GPIO.PUD_UP)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定no(1-4)号数码管显示数字num(0-9)，第三个参数是显示不显示小数点（true/false）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showDigit</span><span class="params">(no, num, showDotPoint)</span>:</span></span><br><span class="line">    <span class="comment"># 先将正极拉低，关掉显示</span></span><br><span class="line">RPi.GPIO.output(DIGIT1, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(DIGIT2, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(DIGIT3, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(DIGIT4, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">1</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">2</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">3</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">4</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">5</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">6</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">7</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">8</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">9</span>) :</span><br><span class="line">RPi.GPIO.output(LED_A, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_B, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_C, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_D, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_E, <span class="literal">True</span>)</span><br><span class="line">RPi.GPIO.output(LED_F, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_G, <span class="literal">False</span>)</span><br><span class="line">RPi.GPIO.output(LED_DP, <span class="keyword">not</span> showDotPoint)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (no == <span class="number">1</span>) :</span><br><span class="line">RPi.GPIO.output(DIGIT1, <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">elif</span> (no == <span class="number">2</span>) :</span><br><span class="line">RPi.GPIO.output(DIGIT2, <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">elif</span> (no == <span class="number">3</span>) :</span><br><span class="line">RPi.GPIO.output(DIGIT3, <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">elif</span> (no == <span class="number">4</span>) :</span><br><span class="line">RPi.GPIO.output(DIGIT4, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  t=<span class="number">0.005</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 按钮按下时显示日期，否则显示时间</span></span><br><span class="line"><span class="comment"># 为了区别左右的数字，让第二个数码管的小数点显示出来</span></span><br><span class="line"><span class="comment">#（本来应该是一个冒号，我们这个数码管没有，就用小数点代替了</span></span><br><span class="line">    currentTime = time.localtime(time.time())</span><br><span class="line">    currentH = int(time.strftime(<span class="string">"%H"</span>, currentTime))</span><br><span class="line">    currentM = int(time.strftime(<span class="string">"%M"</span>, currentTime))</span><br><span class="line"></span><br><span class="line">    time.sleep(t)</span><br><span class="line">    showDigit(<span class="number">1</span>, int(currentH / <span class="number">10</span>), <span class="literal">False</span>)</span><br><span class="line">    time.sleep(t)</span><br><span class="line">    showDigit(<span class="number">2</span>, int(currentH % <span class="number">10</span>), <span class="literal">True</span>)</span><br><span class="line">    time.sleep(t)</span><br><span class="line">    showDigit(<span class="number">3</span>, int(currentM / <span class="number">10</span>), <span class="literal">False</span>)</span><br><span class="line">    time.sleep(t)</span><br><span class="line">    showDigit(<span class="number">4</span>, int(currentM % <span class="number">10</span>), <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后清理GPIO口（不做也可以，建议每次程序结束时清理一下，好习惯）</span></span><br><span class="line">RPi.GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>这里着重要说的就是接线，接线的话上面代码里定义的GPIO编号不要改，接线时刚好能连在一块。</p><p>首先拿出12根线，连到数码管上，连的时候注意四根控制四个数字发光的线的颜色最好类似，方便我们识别，我这里用的是白色的线。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92iqw2bk5j30zy0m8thq.jpg" alt></p><p>连上之后就要参照代码中定义的A对应哪条线，这条线又对应哪个GPIO引脚这样的思路去接线，接完之后就可以运行程序了。</p><p>然后就是见证奇迹的时刻：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92iuhel7kj313y0u01kz.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数码管长这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g92hyf6ibjj31800u07wi.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;数码管分为静态数码管和动态数码管，如果是静态数码管的话针脚数
      
    
    </summary>
    
    
      <category term="数码管" scheme="https://godbobo.github.io/tags/%E6%95%B0%E7%A0%81%E7%AE%A1/"/>
    
      <category term="树莓派" scheme="https://godbobo.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派入门之有源蜂鸣器</title>
    <link href="https://godbobo.github.io/2019/11/19/raspberry-active-buzzer/"/>
    <id>https://godbobo.github.io/2019/11/19/raspberry-active-buzzer/</id>
    <published>2019-11-19T01:21:03.000Z</published>
    <updated>2019-11-19T01:21:47.995Z</updated>
    
    <content type="html"><![CDATA[<p>在资金本来就不怎么充裕的双十一，我忍痛买下了价值近700的树莓派4B+，从此开始了我的物联网之旅～～（当然，才刚开始～）</p><p>在漫长的等待之后，它终于到了我手上。在将它开机并和我的Mac连接上之后，我并不知道该如何去用剩下的一堆传感器，遂打算看一本入门教程，然后发现教程里的入门实验是用LED灯的，还要用电阻之类的。我扒拉了一下这一盒东西，有点想哭，竟然什么都没有。无良商家啊，我都买最贵的套餐了，我只想入个门啊，怎么连这点都洗都不给配呢？</p><p>不甘心的我又不想这么快就去买新的配件，就随意在网上看，就发现了有源蜂鸣器的触发方式和LED灯一样，十分简单，就只要发一个信号就可以了。而我刚好有这个东东，那么就开始进入正文吧。</p><h2 id="一、简单了解树莓派的接口"><a href="#一、简单了解树莓派的接口" class="headerlink" title="一、简单了解树莓派的接口"></a>一、简单了解树莓派的接口</h2><p>树莓派与这些传感器及其他硬件的通信基本上都是通过左上角的一排针来完成的，这些针基本上分为电源针、GPIO接口针和接地针，就是下图中标着0的那一块。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92g5g1bb0j308905tglq.jpg" alt></p><p>我买的这个树莓派一共有40针，这些针里面最重要的就是GPIO针了，GPIO翻译过来就是通用输入输出针脚，具体哪根针什么作用我还真没了解透，但已经足以让我完成正常的接线工作了。</p><p>接线时，比较困扰我的一点就是GPIO针的顺序不是固定的，每次接线都要对照着针脚图去做。我这里有一个简便的办法就是接线时在树莓派的命令行打上<code>pinout</code>，然后就会出现针脚对应的GPIO编号，比自己一直保存一张图片要方便一点。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92gcfbxm7j306n09f3zb.jpg" alt></p><p>上面的图片就是命令行里出来的内容，其中<code>3V3</code>表示3.3伏的电压，红色的<code>5V</code>当然就是5伏电压了。然后<code>GND</code>表示接地，剩余的绿色针脚就都是GPIO接口了。</p><blockquote><p>这里想提一点的是我刚拿到树莓派给它装上外壳后，上面有一个附带的小风扇不论我怎么接都不会转，我都以为是坏掉了呢。结果查了这些针脚的作用之后，我把红线接正极，黑线接地，风扇就顺利的转起来了。。。</p></blockquote><h2 id="二、开始接线？"><a href="#二、开始接线？" class="headerlink" title="二、开始接线？"></a>二、开始接线？</h2><p>在接线的时候，我也遇到了一些困扰。商家送了我面包板和排线，我也听人说面包板和排线会让自己接线更加方便一点，但我双手拿着这两样东西时，却不知道要怎么组装在一起了。。</p><p>后面看了一个教程之后才明白，要用排线将树莓派和T型板连上，然后在将T型板和面包板连上，也就是下图这样：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92gpvdgd8j31470u0npf.jpg" alt></p><p>但当我要将排线连到树莓派上时，却发现加装了外壳的树莓派放不下这一块排线。。。无良商家啊，，我都买的是套餐了，你的配件竟然还不配套，气死我啦。难道我每次接线都要拆外壳吗？</p><p>最终我放弃了使用面包板，一是因为要拆外壳，二是因为我没有可以插在面包板上的针😂那就只好采用直接接线大法了。</p><h2 id="三、正式开始"><a href="#三、正式开始" class="headerlink" title="三、正式开始"></a>三、正式开始</h2><p>先亮出我的低电平触发有源蜂鸣器，即它会在低电平时发出固定频率的声音。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92gx546brj31440u07wj.jpg" alt></p><p>它上面有三个脚，GND接地，VCC接电源，一般接树莓派上的3.3V电源即可（接5V没有电阻的话我可不敢保证它会不会坏掉。。）。中间的那个IO就是接树莓派的GPIO口的，这里由于我的python程序是网上找的，也懒得改，就直接用它定义的GPIO口了。</p><p><strong>alarm.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># GPIO 口为17</span></span><br><span class="line">trig=<span class="number">17</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    GPIO.setwarnings(<span class="literal">False</span>)</span><br><span class="line">    GPIO.setmode(GPIO.BCM) </span><br><span class="line">    GPIO.setup(trig,GPIO.OUT,initial=GPIO.HIGH)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beep</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    GPIO.output(trig,GPIO.LOW) </span><br><span class="line">    time.sleep(seconds)</span><br><span class="line">    GPIO.output(trig,GPIO.HIGH) </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beepBatch</span><span class="params">(seconds,timespan,counts)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(counts):</span><br><span class="line">        beep(seconds)</span><br><span class="line">        time.sleep(timespan) </span><br><span class="line">        </span><br><span class="line">init()</span><br><span class="line"><span class="comment"># 修改下面这一行的参数</span></span><br><span class="line">beepBatch(<span class="number">0.2</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>上面的程序会在蜂鸣器发出三次短暂的鸣响后自动退出，我们在连线之后可以修改前两个参数来控制鸣响时长和间隔时间，以此来测试我们程序是否运行成功。</p><p>下面就开始正式的接线了，其实这就比较简单了。我用红色线表示电源线，黑色线表示地线，然后随便一个颜色线表示GPIO线，查阅针脚对应GPIO图，可知GPIO17对应第11个接口。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92hd2py25j313z0u01kz.jpg" alt></p><p>请忽略背景中小风扇的线。。。</p><p>接好之后，在树莓派中运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python alarm.py</span><br></pre></td></tr></table></figure><p>然后你就可以听到悦耳的三声鸣响了～</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>无意中看到无源蜂鸣器可以播放音乐，我就想到每次别人生日，生日蛋糕中带的那个东西都可以响好长时间，好烦好烦。我也好想做一个这么烦的东西啊，可是手里没设备～</p><p>还有就是遇到开发要在自己电脑开发，调试要在别的电脑调试的情况，可以在VSCode上装一个sftp插件，这样当你保存文件时就会自动上传到服务器，十分好用。</p><p>最后想说的是，我还有这么多传感器要把玩呢，有兴趣的话要关注我欧～</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g92hmdrou6j30by0bnab5.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在资金本来就不怎么充裕的双十一，我忍痛买下了价值近700的树莓派4B+，从此开始了我的物联网之旅～～（当然，才刚开始～）&lt;/p&gt;
&lt;p&gt;在漫长的等待之后，它终于到了我手上。在将它开机并和我的Mac连接上之后，我并不知道该如何去用剩下的一堆传感器，遂打算看一本入门教程，然后发
      
    
    </summary>
    
    
      <category term="树莓派" scheme="https://godbobo.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="有源蜂鸣器" scheme="https://godbobo.github.io/tags/%E6%9C%89%E6%BA%90%E8%9C%82%E9%B8%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>IOS 无需代码实现TableViewCell自适应高度</title>
    <link href="https://godbobo.github.io/2019/11/19/ios-tableview-cell-autoheight/"/>
    <id>https://godbobo.github.io/2019/11/19/ios-tableview-cell-autoheight/</id>
    <published>2019-11-19T01:16:09.000Z</published>
    <updated>2019-11-19T01:18:22.392Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始入门IOS开发了，本来打算用以前的方式自学的，但发现找不到什么好的视频教程，最后只好花钱买了一个基础教程，算是入门了IOS开发吧。</p><p>花了一个星期差不多学完教程之后，打算做一个文本编辑器，那么首先要有一个列表，我希望能够显示文章的标题以及开头的几行内容，但我发现要做到显示简介还并不是一个容易的事情。</p><p>不过最终还是实现了自适应高度的效果，下面先放上效果图：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90xkqm4pnj30jc0y879a.jpg" alt></p><p>下面正式开始我的探索之旅。（如果不想看前面的铺垫可直接跳到<a href="#二、自定义TableCell实现自适应高度">第二节</a>）</p><h2 id="一、实现TableView并使用自定义Cell"><a href="#一、实现TableView并使用自定义Cell" class="headerlink" title="一、实现TableView并使用自定义Cell"></a>一、实现TableView并使用自定义Cell</h2><p>首先拖一个TalbeViewController到页面中并指定入口，然后<code>⌘+N</code>创建一个对应的TableViewController实现类<code>PostController.swift</code>，并在TableView的页面中连接上该类。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90xt4catmj307803mmx5.jpg" alt></p><p><code>PostController</code>此时应该有Xcode自动帮我们生成的一些代码，我们现在需要设置一下TableView的数据源：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 tableView 有几部分</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">( <span class="keyword">in</span> tableView: UITableView)</span></span> - &gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 tableView 有几行</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> - &gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置t tableView 的单元格内容</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> - &gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="comment">// 根据单元格上定义的 identifer 识别对应的单元格</span></span><br><span class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"postItem"</span>,</span><br><span class="line">        <span class="keyword">for</span>: indexPath)</span><br><span class="line">    cell.textLabel?.text = <span class="string">"我是修改后的内容"</span></span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中用到了TableCell的标识符<code>postItem</code>，我们需要在界面中定义一下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90y4rx1ztj3075046glm.jpg" alt></p><p>然后按下<code>⌘+R</code>运行项目，得到的结果如下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90y64hnd6j30j80dqjsk.jpg" alt></p><p>这样就得到了最基本的TableView样式了，但显然不能满足我的要求。所以需要将TableCell的类型改为自定义类型。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90y8818flj307002xgli.jpg" alt></p><p>此时我们需要新建一个类继承TableViewCell，以便我们对这个自定义Cell进行操作。</p><p><code>⌘+N</code>新建CocoaTouchClass，并继承<code>UITableViewCell</code>：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90ybm3zx6j30k70ejdit.jpg" alt></p><p>创建完成后，同样需要将界面中的TableCell和代码连接起来。连接成功后，应该就可以在代码助手中找到该类：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90yfs37ejj30xm09kjuq.jpg" alt></p><p>然后我们先按照预想的方式来实现两个Label的TableCell。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90ykyxc36j30iy04wgme.jpg" alt></p><p>这样设计之后乍一看应该是能满足要求了吧？运行起来看看：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90ymkhxenj30iw0aydgo.jpg" alt></p><p>发现只显示了第一个Table，第二个却没有显示。</p><h2 id="二、自定义TableCell实现自适应高度"><a href="#二、自定义TableCell实现自适应高度" class="headerlink" title="二、自定义TableCell实现自适应高度"></a>二、自定义TableCell实现自适应高度</h2><p>遇到这种情况，我第一个想到的就是TableView有没有自动高度的功能呢？找了一下发现TableView和TableCell里面都有这个属性，但我开启了之后也没有作用。然后求助百度，一堆代码实现的方法，看不下去啊。实在不甘心，就去求助谷歌，结果在这个网站上找到的方法：<a href="http://www.thomashanning.com/uitableview-automatic-row-height/" target="_blank" rel="noopener">http://www.thomashanning.com/uitableview-automatic-row-height/</a></p><p>总的来说就是要给TableCell里面的内容添加约束，<strong>使其上下左右四个方向均存在和父元素的约束，然后再让TableCell里面的内容可以动态改变大小</strong>。然后我自己试了一下，确实是有用的，但当我换成两个元素在四个方向上的约束时，却又失效了。</p><p>于是我想到可以用StackView将两个元素整合成一个元素，所以下面就是我的做法：</p><p>1、选中两个Label，将其合并为一个Label</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90yzm0ixuj30ew0gi0vs.jpg" alt></p><p>2、给合并后的StackView添加四个方向的约束，距离均为0</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90z07h1h3j308409lwi1.jpg" alt></p><p>设置完成后，由于StackView的四条边均和外部有了约束，里面的两个Label的高度就不能确定了。而我们的目标是第一个Label的高度固定为1行，而第二个Label的高度随内容变化，且最多显示3行。那么我们就需要给第一个Label添加高度的约束。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90z52o8e7j308409lwhm.jpg" alt></p><p>再次运行项目，即可看到第二个Label出现了。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g90z6240j9j30j60q878u.jpg" alt></p><p>因为目前的内容是静态的，所以不能确定这样做是否实现了自适应高度。而这一点就需要你们用代码来验证一下了，至少我是验证通过了～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近开始入门IOS开发了，本来打算用以前的方式自学的，但发现找不到什么好的视频教程，最后只好花钱买了一个基础教程，算是入门了IOS开发吧。&lt;/p&gt;
&lt;p&gt;花了一个星期差不多学完教程之后，打算做一个文本编辑器，那么首先要有一个列表，我希望能够显示文章的标题以及开头的几行内容，
      
    
    </summary>
    
    
      <category term="IOS开发" scheme="https://godbobo.github.io/tags/IOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="TableViewCell" scheme="https://godbobo.github.io/tags/TableViewCell/"/>
    
  </entry>
  
  <entry>
    <title>这个微信浏览器跳转技巧，每个月能帮你省几百块</title>
    <link href="https://godbobo.github.io/2019/10/22/wx-jump/"/>
    <id>https://godbobo.github.io/2019/10/22/wx-jump/</id>
    <published>2019-10-22T01:16:19.000Z</published>
    <updated>2019-10-22T01:16:19.274Z</updated>
    
    <content type="html"><![CDATA[<p> 在微信公众号开发中，不可避免地要遇到下载软件、支付宝支付等需求，而这些需求都是无法在微信浏览器内部实现的，那么在微信浏览器内自动跳转到外部浏览器就是一个刚需了。</p><p> 百度一下微信跳转，可以发现大部分结果都被这些跳转平台承包了。</p><blockquote><p>这张图片不知道为什么被删掉了，那就不添加了。大家可以自行搜索看看。</p></blockquote><p>然后打开一个还可以用的跳转平台，可以看到最主要的功能就是：</p><ul><li>IOS微信会提示用户右上角打开浏览器（这谁还不会提示呀）</li><li>安卓微信则是自动用默认浏览器打开链接（我们主要就是实现安卓端的自动跳转功能）</li></ul><p>然后看了一下价格，500块？一个月？最低？溜了溜了溜了。 <img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w7muzypij30xn0kk4f1.jpg" alt></p><p>不过穷人也有穷人的办法，这些平台显然没有和微信合作，那么他们是怎么做到这个跳转功能的呢？我们需要跟踪调研一番。。。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w7oce07wj30q90b73zb.jpg" alt></p><p>打开这个平台的演示二维码，我的是苹果手机，扫描之后确实只显示了<em>请点击右上角选择Safari打开</em>的提示。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w7qa8uafj30wa0eh74w.jpg" alt></p><p>然后我解析了这个二维码，得到一个地址，直接在浏览器打开。哇噻，神奇呀，竟然跳到百度了。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w7qwop7aj30c40rtn11.jpg" alt> </p><p>经过以上步骤，已经验证了以下两点：</p><ol><li>苹果手机确实只能用户手动打开浏览器</li><li>普通浏览器可以直接跳转到指定页面</li></ol><p>那么现在需要验证的就是安卓微信里面打开这个网页是否可以跳转到外部浏览器并打开指定页面。</p><p>不过在此之前，我们先对普通浏览器打开这个网页的所有请求进行抓包，稍后比较与安卓微信打开这个网页的请求进行比较，看看两者是不是有哪些不一样的地方导致了安卓微信可以跳转到外部浏览器而不是直接打开页面。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w7xc8xnxj30sa09b75s.jpg" alt></p><p>先看第一个请求，这是我们解析的网址，然后重定向到了<code>http://jumpqq.doupie.cn</code>这个网址，看域名可以发现，这应该是一个新浪微博的<strong>短网址生成</strong>工具，最后的<code>jumpqq.doupie.cn</code>才是我们真正跳转到的地址。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w80i6zgij30t40c276i.jpg" alt></p><p>然后在这个真正的网址中，它又重定向到了<code>www.baidu.com</code>，也就是刚刚我们看到的页面。</p><p>分析了普通的浏览器跳转流程之后，我们来验证和分析一下安卓微信浏览器里面的跳转流程。</p><p>打开genimotion模拟器并安装微信，然后随便找个聊天框输入刚刚解析出来的网址并打开，可以发现确实是自动弹出了跳转浏览器的选项（我没有设置默认浏览器，如果设置了会直接使用默认浏览器打开）。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w86aaafnj30hi0t6tc2.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w86kfwy4j30hi0t6q5v.jpg" alt></p><p>现在问题来了，怎么抓包呢？</p><p>在Chrome浏览器地址栏输入<code>chrome://inspect/#devices</code>打开设备管理界面，如果此时你的微信浏览器还没有关掉的话，稍等一下应该可以看到一个页面在手机下面的列表中。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w89hz0svj30nd0bzdhl.jpg" alt></p><blockquote><p>Tips:使用这个调试功能需要FQ，如果没有FQ的话是可以显示这个页面但无法打开具体页面的开发者工具的。</p></blockquote><p>下面还有一个问题，只有手机里面已经打开了页面这个列表里面才会显示，我们才能去抓包。而我们要分析的主要就是<strong>打开这个页面之前的请求流程</strong>，此时我们在自己电脑上编写一个HTML文件并放到Nginx服务器上，页面里面就放一个链接，指向刚刚的那个网址。这样的话就是先打开自己写的页面，然后电脑上打开该页面的调试工具，然后点击刚刚的链接就可以成功抓到我们需要的请求了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-hans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge, chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>微信跳转测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://sinaurl.cn/AiYTFMTB"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w8i3mqidj30hi0t60vs.jpg" alt></p><p>在微信中输入并打开我们刚刚写的页面（地址要用电脑的局域网地址），先不要点击下载，等待Chrome浏览器设备调试页面出现这个页面之后，点击标题下方的<code>inspect</code>,等待片刻即可看到熟悉的开发者工具了。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w8kc7kctj30t20dgjt7.jpg" alt></p><p>然后把开发者工具切换到<code>Network</code>一栏。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w8ly8r8pj30yi0hvtav.jpg" alt></p><p>在模拟器中点击<em>下载</em>这个超链接</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w8mssxudj30hi0t6dhb.jpg" alt></p><p>然后来分析这次请求中究竟有什么是和普通浏览器的请求是不同的：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w8o5ms69j30m107raan.jpg" alt></p><p>第一步还是短网址的重定向，和普通浏览器流程相同。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w8ovbtqjj30m40agdgp.jpg" alt></p><p>但在真正跳转的网址里面就有不同之处了，首先状态码变成了<strong>206</strong>，然后Headers里面还多了一个<code>Content-Disposition</code>属性，那么我想应该就是这两处不同导致可以在安卓微信里跳转到外部浏览器了。</p><blockquote><p>百度百科HTTP状态码206含义（部分）：</p><h3 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h3><p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p></blockquote><blockquote><p>MDN Content-Disposition含义：</p><p>在常规的HTTP应答中，<strong>Content-Disposition</strong>`响应头指示回复的内容该以何种形式展示，是以<strong>内联</strong>的形式（即网页或者页面的一部分），还是以<strong>附件</strong>的形式下载并保存到本地。</p><p>作为消息主体中的消息头</p><p>在HTTP场景中，第一个参数或者是<code>inline</code>（默认值，表示回复中的消息体会以页面的一部分或者整个页面的形式展示），或者是<code>attachment</code>（意味着消息体应该被下载到本地；大多数浏览器会呈现一个“保存为”的对话框，将<code>filename</code>的值预填为下载后的文件名，假如它存在的话）。</p></blockquote><p>查阅上方资料得知这两个东西都是在告诉微信浏览器，我接下来要做的事你干不了，赶紧找个专业的来干吧。</p><p>理解了关键点之后，也就知道要做到跳转这个功能，最重要的是服务端的响应，我这里就以Nginx为例，配置了当请求来自微信浏览器时，就把某个路径下的页面响应加上特殊的请求头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root html;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 指定目录下的文件</span><br><span class="line">location /test/ss/ &#123;</span><br><span class="line"># 微信内置浏览器</span><br><span class="line">if ($http_user_agent ~* (MicroMessenger)) &#123;</span><br><span class="line">add_header Content-Type &quot;text/plain; charset=utf-8&quot;;</span><br><span class="line">add_header Content-Disposition &quot;attachment;filename=open.apk&quot;;</span><br><span class="line">return 206;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就在<code>test</code>目录下新建一个<code>ss</code>目录，然后放上我们要跳转的页面（即微信会屏蔽的页面），随便写点内容，然后修改我们刚刚的“首页”，把地址换为这个随便写的页面地址。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-hans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge, chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>微信跳转测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://192.168.3.132/test/ss/toc.html"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后尝试在微信里面打开这个链接，就可以实现跳转浏览器的效果了。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w94hy6ewj30hi0t6dh2.jpg" alt></p><p>至此，主要功能已经实现了，但还有一个短网址生成服务，我们可以用下面这个网站提供的服务，不仅可以手动输入，还提供API生成，可以说十分良心了。</p><p><a href="http://www.sina-url.cn/" target="_blank" rel="noopener">http://www.sina-url.cn/</a></p><p>下面写一下我想的微信跳转功能的完整思路：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7w9ngdv9qj30zw0u0tei.jpg" alt></p><p>根据上面的思路，还有一些做法需要完善：</p><p>服务端判断<strong>安卓微信</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># nginx不支持&amp;&amp;和||和if嵌套，通过变量来解决</span><br><span class="line">set $flag 0;</span><br><span class="line"></span><br><span class="line">if ($http_user_agent ~* MicroMessenger)&#123;</span><br><span class="line">set $flag “$&#123;flag&#125;1”;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($http_user_agent ~* Android)&#123;</span><br><span class="line">set $flag “$&#123;flag&#125;1”;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 此时，如果有一个为真，flag=01，全部为真，flag=011</span><br><span class="line">if ($flag = &quot;011&quot;) &#123;</span><br><span class="line">add_header Content-Type &quot;text/plain; charset=utf-8&quot;;</span><br><span class="line">add_header Content-Disposition &quot;attachment;filename=open.apk&quot;;</span><br><span class="line">return 206;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js判断微信浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_weixn</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();  </span><br><span class="line">     <span class="keyword">if</span>(ua.match(<span class="regexp">/MicroMessenger/i</span>)==<span class="string">"micromessenger"</span>) &#123;  </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一整套流程下来，就实现了区分不同设备，对于可以自动跳转设备进行跳转了。</p><p>怎么样？我不是一个标题党吧，嘿嘿</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 在微信公众号开发中，不可避免地要遇到下载软件、支付宝支付等需求，而这些需求都是无法在微信浏览器内部实现的，那么在微信浏览器内自动跳转到外部浏览器就是一个刚需了。&lt;/p&gt;
&lt;p&gt; 百度一下微信跳转，可以发现大部分结果都被这些跳转平台承包了。&lt;/p&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="微信开发" scheme="https://godbobo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>FRP内网穿透一站式配置</title>
    <link href="https://godbobo.github.io/2019/09/24/frp-01/"/>
    <id>https://godbobo.github.io/2019/09/24/frp-01/</id>
    <published>2019-09-24T11:55:19.000Z</published>
    <updated>2019-09-24T11:55:19.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FRP内网穿透一站式配置"><a href="#FRP内网穿透一站式配置" class="headerlink" title="FRP内网穿透一站式配置"></a>FRP内网穿透一站式配置</h1><p>场景1：我有一台配置很差的服务器，也有一台放在公司可以一直开机的电脑，我想跑一个springboot项目。</p><p>场景2:我要做微信开发，我必须要有一个公网可以访问的域名。</p><p>针对这两种场景，要怎么做呢？当然是使用内网穿透，而市面上好的内网穿透工具收费，免费的每次建立的域名都是随机的，那能不能自己搭一个内网穿透服务呢？当然可以！</p><h2 id="一、FRP安装"><a href="#一、FRP安装" class="headerlink" title="一、FRP安装"></a>一、FRP安装</h2><p>frp是一款开源的内网穿透软件，可以在GitHub上找到：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a>。</p><p>readme中有中文文档的链接，在release中可以看到最新的版本<code>0.29.0</code> 。其中我需要的是Linux版本的、Windows版本的和Mac版本的，目前我们的电脑大部分都是64位的了，我选择下载的分别是以下几个文件：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7691tuilzj318e0ow0xp.jpg" alt></p><h3 id="1、Linux服务端安装"><a href="#1、Linux服务端安装" class="headerlink" title="1、Linux服务端安装"></a>1、Linux服务端安装</h3><p>我的服务器是CentOS 7，可以直接通过命令下载，也省去了文件上传的步骤：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.29.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p> 删除我们不需要的客户端文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> frp_0.29.0_linux_amd64</span><br><span class="line">ls -a</span><br><span class="line">rm frpc</span><br><span class="line">rm frpc.ini</span><br></pre></td></tr></table></figure><p>打开服务端配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure><p>将文件内容换为下面的：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">token</span> = bobozuihao</span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = bobozuihao</span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>端口号均采用默认值即可，上面字段的含义如下：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>bind_port</td><td>服务端口号</td></tr><tr><td>token</td><td>客户端服务器之间的密钥</td></tr><tr><td>dashboard_port</td><td>frp仪表盘端口号</td></tr><tr><td>dashboard_user</td><td>admin</td></tr><tr><td>dashboard_pwd</td><td>仪表盘密码</td></tr><tr><td>vhost_http_port</td><td>web服务代理端口号</td></tr></tbody></table><p>按下<code>esc</code> 键进入命令模式，保存并退出当前文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>然后运行服务端：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure><p>此时访问服务端x.x.x.x:7500即可访问FRP仪表盘。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g76a8dubi2j31h00u0k3m.jpg" alt></p><blockquote><p>这张截图是配置过Nginx重定向之后的仪表盘页面</p></blockquote><h3 id="2、Linux服务端后台运行FRP"><a href="#2、Linux服务端后台运行FRP" class="headerlink" title="2、Linux服务端后台运行FRP"></a>2、Linux服务端后台运行FRP</h3><p>在上一节中我们成功运行了FRP，但我们按Ctrl+C退出或关闭SSH窗口后，FRP均会停止运行，此时我们需要使用nohup将其运行在后台。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure><p>Ctrl+C关闭nohup并查看后台中是否有FRP：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment"># 下面是显示结果</span></span><br><span class="line">[1]+  Running                 nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure><h3 id="3、Windows及Mac安装客户端"><a href="#3、Windows及Mac安装客户端" class="headerlink" title="3、Windows及Mac安装客户端"></a>3、Windows及Mac安装客户端</h3><p>Windows和Mac就需要手动下载了，对于用浏览器下载GitHub文件的下载速度真的不敢苟同，不过Windows上可以用freedownloader下载，Mac上用aria2下载，相比之下速度真的很感人了。</p><p>将下载后的文件解压，并删除服务端的文件。</p><p>然后对<code>frpc.ini</code>进行如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">66.42</span>.<span class="number">62.8</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = bobozuihao</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">custom_domains</span> = web.frp.aqzscn.com</span><br></pre></td></tr></table></figure><p>最主要的就是common的配置和web的配置了,根据我的观察，这个文件是根据[xxx]来划分范围的，如果要开启多个不同的映射，多声明几个不同名字的[xx]模块就行。</p><p>因为我是在Mac上测试的，nginx的默认端口就是8080，然后修改nginx的欢迎页为<strong>this is Redirect Page</strong>以示和服务器上的默认页面的不同。</p><p>命令行输入<code>.\frpc -c frpc.ini</code>即可与服务端连通，访问刚刚配置的<a href="web.frp.aqzscn.com">web.frp.aqzscn.com</a>即可访问到我们本地的欢迎页了。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g76aacvys7j30wa0em0wc.jpg" alt></p><blockquote><p>这张截图是映射到Windows上运行的Restful服务的页面。</p></blockquote><h3 id="4、功能点补充"><a href="#4、功能点补充" class="headerlink" title="4、功能点补充"></a>4、功能点补充</h3><p>上面的两张截图中，域名后面均没有加端口号，这是因为我在服务端配置了nginx转发的缘故。</p><p>首先我希望我的域名<code>frp.aqzscn.com</code> 作为我的frp仪表盘页面，而<code>*.frp.aqzscn.com</code>则是客户端配置的各种映射地址，那么我需要先去域名服务提供商那里修改我的dns配置，增加两条A记录，或者索性配置一条A记录<code>*.aqzscn.com</code>转发到服务器的80端口，然后所有转发就可以放在服务器的nginx上了。</p><p>下面贴出我的nginx配置供大家参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  127.0.0.1 aqzscn.com www.aqzscn.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name frp.aqzscn.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass http://127.0.0.1:7500/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name *.frp.aqzscn.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用server_name来匹配对应的域名，<code>proxy_set_header</code> 来保证请求的头信息和原始的头信息是一致的。</p><h2 id="二级域名配置"><a href="#二级域名配置" class="headerlink" title="二级域名配置"></a>二级域名配置</h2><p>上面只是实现了简单的一个域名的映射，如需映射多个域名，就需要配置二级域名了。</p><p>配置服务端：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi frp_0.29.0_linux_amd64/frps.ini</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subdomain_host</span> = frp.aqzscn.com</span><br></pre></td></tr></table></figure><p>重启FRP服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般来说，可以通过jobs列出当前会话中的进程，然后kill %【序号】，但我是新建立的ssh连接，所以只能通过第二种方式了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出与frps有关的进程</span></span><br><span class="line">ps -aux|grep frps</span><br><span class="line"><span class="comment"># root      7415  0.0  2.5 114076 25248 ?        Sl   Sep19   0:06 ./frps -c frps.ini</span></span><br><span class="line"><span class="comment"># root     28113  0.0  0.2 112724  2240 pts/0    S+   13:34   0:00 grep --color=auto frps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后杀掉对应的进程号</span></span><br><span class="line"><span class="built_in">kill</span> 7415</span><br><span class="line"><span class="built_in">kill</span> 28113</span><br><span class="line"><span class="comment"># -bash: kill: (28113) - No such process</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用nohup启动frps</span></span><br><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure><p>配置客户端：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mweb]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">subdomain</span> = test</span><br><span class="line"><span class="comment">;这是ini文件的注释，我们可以在一个配置文件中配置多个web服务的重定向，并通过注释来关闭和开启对应的映射。</span></span><br></pre></td></tr></table></figure><p>然后启动客户端，并访问我们配置的地址：<a href="http://test.frp.aqzscn.com/" target="_blank" rel="noopener">http://test.frp.aqzscn.com/</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g76bkv7nowj31dm0j044p.jpg" alt></p><p>可以明显地看到这是我们本地的网页。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;FRP内网穿透一站式配置&quot;&gt;&lt;a href=&quot;#FRP内网穿透一站式配置&quot; class=&quot;headerlink&quot; title=&quot;FRP内网穿透一站式配置&quot;&gt;&lt;/a&gt;FRP内网穿透一站式配置&lt;/h1&gt;&lt;p&gt;场景1：我有一台配置很差的服务器，也有一台放在公司可以一直开
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="frp" scheme="https://godbobo.github.io/tags/frp/"/>
    
      <category term="内网穿透" scheme="https://godbobo.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CentOS快速安装SSR</title>
    <link href="https://godbobo.github.io/2019/09/24/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85SSR/"/>
    <id>https://godbobo.github.io/2019/09/24/CentOS快速安装SSR/</id>
    <published>2019-09-24T10:44:00.000Z</published>
    <updated>2019-09-24T10:44:00.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br></pre></td></tr></table></figure><h2 id="2、修改安装脚本权限"><a href="#2、修改安装脚本权限" class="headerlink" title="2、修改安装脚本权限"></a>2、修改安装脚本权限</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocksR.sh</span><br></pre></td></tr></table></figure><h2 id="3、配置SSR"><a href="#3、配置SSR" class="headerlink" title="3、配置SSR"></a>3、配置SSR</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br><span class="line">// 之后会让配置密码等信息，我们自定义一下密码之后，剩下的都直接回车用默认值就行。</span><br></pre></td></tr></table></figure><p>配置信息一定要保存起来，否则找起来太麻烦了。。</p><p><img src="https://i.loli.net/2019/09/19/bDftyc3PxHNzqj1.png" alt></p><h1 id="开启BBR加速"><a href="#开启BBR加速" class="headerlink" title="开启BBR加速"></a>开启BBR加速</h1><h2 id="1、下载安装包-1"><a href="#1、下载安装包-1" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br></pre></td></tr></table></figure><h2 id="2、获取权限"><a href="#2、获取权限" class="headerlink" title="2、获取权限"></a>2、获取权限</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x bbr.sh</span><br></pre></td></tr></table></figure><h2 id="3、开始安装"><a href="#3、开始安装" class="headerlink" title="3、开始安装"></a>3、开始安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bbr.sh</span><br><span class="line">// 这一步之后会让重启，确定即可</span><br></pre></td></tr></table></figure><h2 id="4、验证安装状态"><a href="#4、验证安装状态" class="headerlink" title="4、验证安装状态"></a>4、验证安装状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><blockquote><p>BBR 加速有点坑，开启就不能连接了，建议不要开启！！！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h1&gt;&lt;h2 id=&quot;1、下载安装包&quot;&gt;&lt;a href=&quot;#1、下载安装包&quot; class=&quot;headerlink&quot; title=&quot;1、下
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="linux" scheme="https://godbobo.github.io/tags/linux/"/>
    
      <category term="ssr" scheme="https://godbobo.github.io/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>CenOS 快速安装 Nginx</title>
    <link href="https://godbobo.github.io/2019/09/24/CenOS-%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85-Nginx/"/>
    <id>https://godbobo.github.io/2019/09/24/CenOS-快速安装-Nginx/</id>
    <published>2019-09-24T10:41:24.000Z</published>
    <updated>2019-09-24T10:44:09.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="1、将nginx放到yum-repro库中"><a href="#1、将nginx放到yum-repro库中" class="headerlink" title="1、将nginx放到yum repro库中"></a>1、将nginx放到yum repro库中</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="2、查看nginx信息"><a href="#2、查看nginx信息" class="headerlink" title="2、查看nginx信息"></a>2、查看nginx信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info nginx</span><br></pre></td></tr></table></figure><h2 id="3、使用yum安装ngnix"><a href="#3、使用yum安装ngnix" class="headerlink" title="3、使用yum安装ngnix"></a>3、使用yum安装ngnix</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">// 中途需要输入 y 确认安装</span><br></pre></td></tr></table></figure><h2 id="4、启动nginx"><a href="#4、启动nginx" class="headerlink" title="4、启动nginx"></a>4、启动nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><h2 id="5、查看nginx版本"><a href="#5、查看nginx版本" class="headerlink" title="5、查看nginx版本"></a>5、查看nginx版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h2 id="6、访问nginx"><a href="#6、访问nginx" class="headerlink" title="6、访问nginx"></a>6、访问nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i localhost</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="1、nginx配置文件目录"><a href="#1、nginx配置文件目录" class="headerlink" title="1、nginx配置文件目录"></a>1、nginx配置文件目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /etc/nginx/</span><br></pre></td></tr></table></figure><h2 id="2、修改nginx配置文件"><a href="#2、修改nginx配置文件" class="headerlink" title="2、修改nginx配置文件"></a>2、修改nginx配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><h2 id="3、重启服务"><a href="#3、重启服务" class="headerlink" title="3、重启服务"></a>3、重启服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="4、停止服务"><a href="#4、停止服务" class="headerlink" title="4、停止服务"></a>4、停止服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx –s stop</span><br></pre></td></tr></table></figure><h2 id="5、测试配置文件是否正常"><a href="#5、测试配置文件是否正常" class="headerlink" title="5、测试配置文件是否正常"></a>5、测试配置文件是否正常</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx –t</span><br></pre></td></tr></table></figure><h1 id="外网不能访问的问题"><a href="#外网不能访问的问题" class="headerlink" title="外网不能访问的问题"></a>外网不能访问的问题</h1><p>查看并关闭防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><h1 id="CenOS-服务常用命令"><a href="#CenOS-服务常用命令" class="headerlink" title="CenOS 服务常用命令"></a>CenOS 服务常用命令</h1><h2 id="1、启动一个服务"><a href="#1、启动一个服务" class="headerlink" title="1、启动一个服务"></a>1、启动一个服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></table></figure><h2 id="2、关闭一个服务"><a href="#2、关闭一个服务" class="headerlink" title="2、关闭一个服务"></a>2、关闭一个服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h2 id="3、重启一个服务"><a href="#3、重启一个服务" class="headerlink" title="3、重启一个服务"></a>3、重启一个服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><h2 id="4、显示服务状态"><a href="#4、显示服务状态" class="headerlink" title="4、显示服务状态"></a>4、显示服务状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><h2 id="5、开机时启用一个服务"><a href="#5、开机时启用一个服务" class="headerlink" title="5、开机时启用一个服务"></a>5、开机时启用一个服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br></pre></td></tr></table></figure><h2 id="6、开机时禁用一个服务"><a href="#6、开机时禁用一个服务" class="headerlink" title="6、开机时禁用一个服务"></a>6、开机时禁用一个服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h2 id="7、查看服务是否开机启动"><a href="#7、查看服务是否开机启动" class="headerlink" title="7、查看服务是否开机启动"></a>7、查看服务是否开机启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled firewalld.service;<span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><h2 id="8、查看已启动的服务列表"><a href="#8、查看已启动的服务列表" class="headerlink" title="8、查看已启动的服务列表"></a>8、查看已启动的服务列表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files|grep enabled</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装过程&quot;&gt;&lt;a href=&quot;#安装过程&quot; class=&quot;headerlink&quot; title=&quot;安装过程&quot;&gt;&lt;/a&gt;安装过程&lt;/h1&gt;&lt;h2 id=&quot;1、将nginx放到yum-repro库中&quot;&gt;&lt;a href=&quot;#1、将nginx放到yum-repro库中&quot; c
      
    
    </summary>
    
      <category term="用就对了" scheme="https://godbobo.github.io/categories/%E7%94%A8%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    
    
      <category term="nginx" scheme="https://godbobo.github.io/tags/nginx/"/>
    
      <category term="linux" scheme="https://godbobo.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号制作记账功能（三）</title>
    <link href="https://godbobo.github.io/2019/07/22/wechat-account-03/"/>
    <id>https://godbobo.github.io/2019/07/22/wechat-account-03/</id>
    <published>2019-07-22T06:17:22.000Z</published>
    <updated>2019-07-22T12:22:28.507Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章基本上把技术上的实现都讲了一遍，证明实现这个功能是切实可行的。下面就对建好的服务雏形进行完善和增加功能。</p><p>先放这个系列的文章：</p><p><a href="https://godbobo.github.io/2019/07/16/wechat-account-01/">微信公众号制作记账功能（一）</a></p><p><a href="https://godbobo.github.io/2019/07/17/wechat-account-02/">微信公众号制作记账功能（二）</a></p><h1 id="一、默认回复"><a href="#一、默认回复" class="headerlink" title="一、默认回复"></a>一、默认回复</h1><p>前面设置的默认回复就是简单的一句话，一点都不够智能，当然了，我再怎么改造，只要不用到聊天机器人这种功能，那就不会特别智能。但聊天机器人的API都是要收费的哎，而如果我用python在服务器上自己搭一个，那我真怕服务器会受不了这么大的压力。</p><p>那要怎么办呢？至少每次给用户的回复都不一样吧。这时我想到了<code>hitokoto</code>这个API，接口基本上没什么限制，每次都会返回一个新的句子，挺适合我的需求的。</p><p>下面新建<strong>/api/api.js</strong>，用于请求接口数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处放置有关请求API接口的代码</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一言数据</span></span><br><span class="line"><span class="keyword">const</span> getHitokoto = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: <span class="string">'https://international.v1.hitokoto.cn/'</span></span><br><span class="line">    &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(body))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getHitokoto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口有了，下面就要使用这个接口，这里用到上篇文章说的链式调用处理信息。首先建立<code>/service/default.js</code>，这里同样要实现功能的分发，因为后面可能会为默认回复增加不同的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>)</span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'../api/api'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能分发</span></span><br><span class="line"><span class="keyword">const</span> doQuery = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (payload.Content === <span class="string">'一言'</span> || payload.Content === <span class="string">'hitokoto'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> returnHitokoto(payload, <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> returnHitokoto(payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一言</span></span><br><span class="line"><span class="keyword">const</span> returnHitokoto = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;, isTarget = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> api.getHitokoto().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tips = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (!isTarget) &#123;</span><br><span class="line">      tips = <span class="string">'主人我太笨了，没有明白你的意思。不过我准备了一句话，你看你喜不喜欢？\n\n'</span></span><br><span class="line">      <span class="comment">// 构造未识别对话记录</span></span><br><span class="line">      <span class="keyword">const</span> unknownWord = &#123;</span><br><span class="line">        openid: FromUserName,</span><br><span class="line">        content: Content,</span><br><span class="line">        createTime: CreateTime</span><br><span class="line">      &#125;</span><br><span class="line">      db.unkonwnDb.insert(unknownWord)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">`<span class="subst">$&#123;tips&#125;</span><span class="subst">$&#123;data.hitokoto&#125;</span>\n\nby <span class="subst">$&#123;data.<span class="keyword">from</span>&#125;</span>`</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = doQuery</span><br></pre></td></tr></table></figure><p>因为获取一句话同样是一个小功能，所以就先判断是否是专门获取一句话的，如果是的话，就不再添加<em>我不懂我不懂</em>之类的废话了，哈哈。</p><p>然后就是链式调用的实现了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通文字消息</span></span><br><span class="line">      moneyManager.doQuery(json.xml).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">          <span class="keyword">return</span> msg</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> defaultFilter(json.xml)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">        res.send(resbody)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error)</span><br><span class="line">        res.send(<span class="string">'服务器发生异常，请联系微信号aqzscn解决'</span>)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>可以这么做的原因是如果上一个过滤器匹配到命令，它的返回值就不会为空，反之则会为空。这里当然是用的最笨的过滤器实现方式–手动添加，不过至少功能是实现了。</p><p>然后就可以尝试发送一条系统不懂的消息了：</p><p><img src="https://i.loli.net/2019/07/18/5d2fbe27ea40223895.png" alt></p><p>怎么样？效果还可以吧</p><p>但这时我遇到一个问题，我请求<code>hitokoto</code>源是要消耗一段时间的，但微信服务器等不及呀，它就启动了它的三次重试机制。那我就只好增加一个过滤机制了，打开<code>app.js</code>，在系统启动时新增一个全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义缓存消息id的数组,防止重复响应</span></span><br><span class="line">global.tempMsg = []</span><br></pre></td></tr></table></figure><p>然后在<code>/routes/wx.js</code>中先判断是否是重复消息，不是的话才允许向下执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为系统还会请求其他服务器，返回可能会有延时，因此在这里判断并保存每个消息的openid和msgid(可能是在if语句外面，不过目前只是处理文字信息，先不考虑那么多了吧)</span></span><br><span class="line">      <span class="keyword">let</span> mIndex = <span class="number">-1</span></span><br><span class="line">      global.tempMsg.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.openid === openid &amp;&amp; item.msgid === json.xml.MsgId) &#123;</span><br><span class="line">          mIndex = index</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (mIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        res.send(resbody)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mIndex = global.tempMsg.length</span><br><span class="line">        <span class="comment">// 添加到缓存</span></span><br><span class="line">        global.tempMsg.push(&#123;</span><br><span class="line">          openid: openid,</span><br><span class="line">          msgid: json.xml.MsgId</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在请求执行完之后，再将缓存中的数据删除</span></span><br><span class="line">global.tempMsg.splice(mIndex, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这样就能防止重复对一个请求做出响应了。但不足的是代码实现不够优雅，后面应该增加一个前置过滤器来处理这种事情。</p><h1 id="二、账单分页"><a href="#二、账单分页" class="headerlink" title="二、账单分页"></a>二、账单分页</h1><p>这个功能的实现就比较简单了，预期的实现效果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求：账单</span><br><span class="line">回复：第一页账单</span><br><span class="line"></span><br><span class="line">请求：账单2</span><br><span class="line">回复：第二页账单</span><br></pre></td></tr></table></figure><p>首先就是对功能分发的改造：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配以账单开头的命令</span></span><br><span class="line"><span class="keyword">if</span> (payload.Content.indexOf(<span class="string">'账单'</span>) === <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>查询账单时就是多了一个计算页数的过程，然后分页的逻辑<code>nedb</code>中已经有了，直接用就是了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询账单</span></span><br><span class="line"><span class="keyword">const</span> queryBill = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pageIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (Content.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> temPage = <span class="built_in">parseInt</span>(Content.replace(<span class="string">'账单'</span>,<span class="string">''</span>))</span><br><span class="line">      <span class="keyword">if</span> (temPage) &#123;</span><br><span class="line">        pageIndex = temPage</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pageIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      pageIndex--</span><br><span class="line">    &#125;</span><br><span class="line">    db.moneyDb.find(&#123;<span class="attr">openid</span>: FromUserName&#125;).sort(&#123;<span class="attr">recordTime</span>: <span class="number">-1</span>&#125;).skip(pageIndex * config.billRows).limit(config.billRows).exec(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">      docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> d = dateUtil.getNowSimpleFormatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(item.recordTime * <span class="number">1000</span>))</span><br><span class="line">        <span class="keyword">const</span> s = <span class="string">`[<span class="subst">$&#123;d&#125;</span>] <span class="subst">$&#123;item.type&#125;</span> <span class="subst">$&#123;item.price&#125;</span>元\n`</span></span><br><span class="line">        str += s</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> msg = str ? (<span class="string">'您的账单如下:\n'</span> + str + <span class="string">'\n回复【账单+数字】可翻页'</span>) : <span class="string">'没有查询到账单哦~'</span></span><br><span class="line">      res(msg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就有了这种效果：</p><p><img src="https://i.loli.net/2019/07/18/5d2fc22c74dab45935.png" alt></p><blockquote><p>刚刚在正式的公众号看时间显示有点问题，待会儿看看怎么回事。</p></blockquote><h1 id="三、统计功能"><a href="#三、统计功能" class="headerlink" title="三、统计功能"></a>三、统计功能</h1><p>统计功能的预期实现效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求：统计</span><br><span class="line">回复：当天收支情况</span><br><span class="line"></span><br><span class="line">请求：统计2</span><br><span class="line">回复：近2天收支情况</span><br></pre></td></tr></table></figure><p>这个功能也是很简单就能实现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配统计开头的命令</span></span><br><span class="line">fun doQuery:</span><br><span class="line"><span class="keyword">if</span> (payload.Content.indexOf(<span class="string">'统计'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line"><span class="keyword">const</span> tongji = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dayIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (Content.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> temday = <span class="built_in">parseInt</span>(Content.replace(<span class="string">'统计'</span>,<span class="string">''</span>))</span><br><span class="line">      <span class="keyword">if</span> (temday &amp;&amp; temday &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        dayIndex = temday</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(CreateTime * <span class="number">1000</span>)</span><br><span class="line">    now.setDate(now.getDate() - dayIndex)</span><br><span class="line">    <span class="keyword">const</span> d = dateUtil.getStartOfDay(now)</span><br><span class="line">    db.moneyDb.find(&#123; <span class="attr">recordTime</span>: &#123; <span class="attr">$gt</span>: d.getTime()/<span class="number">1000</span> &#125;, <span class="attr">openid</span>: FromUserName&#125;, (err, docs) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 定义结余、收入、支出</span></span><br><span class="line">      <span class="keyword">let</span> remain = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> reward = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> cost = <span class="number">0</span></span><br><span class="line">      docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        remain += item.yk * item.price</span><br><span class="line">        <span class="keyword">if</span> (item.yk &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          reward += item.price</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          cost += item.price</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> dayTxt = dayIndex === <span class="number">0</span> ? <span class="string">'当天'</span> : <span class="string">`近<span class="subst">$&#123;dayIndex&#125;</span>天`</span></span><br><span class="line">      <span class="keyword">const</span> msg = <span class="string">`<span class="subst">$&#123;dayTxt&#125;</span>的收支情况如下：\n【结余】: <span class="subst">$&#123;remain&#125;</span> 元\n【收入】: <span class="subst">$&#123;reward&#125;</span> 元\n【支出】: <span class="subst">$&#123;cost&#125;</span> 元`</span></span><br><span class="line">      res(msg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现效果如下：</p><p><img src="https://i.loli.net/2019/07/18/5d2fc3586244997545.png" alt></p><h1 id="四、固定开支"><a href="#四、固定开支" class="headerlink" title="四、固定开支"></a>四、固定开支</h1><p>我们每个月都会有固定开支，如工资、花呗、分期，这些固定的项目其实是不需要用户手动去输入的，系统完全可以帮用户做到。</p><p>预期效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请求：月开销预设</span><br><span class="line">回复：请输入\n示例：【1工资2000】【2分期还款-500】\nTips:文字前的数字为每月几日，只支持1-28，不填写默认为1日</span><br><span class="line">==================</span><br><span class="line">30分钟内未回复则放弃当前指令</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">请求：1工资1999</span><br><span class="line">回复：设置成功\n每月1日工资收入1999</span><br></pre></td></tr></table></figure><p>要实现这样的效果，就要缓存用户上一步的指令，并且要知道指令的总步骤数量及当前进行到哪一步。</p><p>既然缓存了，就要有删除的步骤，一种方式是定义一个定时器，每隔一段时间清除失效的指令。另一种方式是在用户下一次请求时判断指令是否失效，如果失效就重新开始。</p><p>这里也要考虑到如果用户一直不发下个请求呢？难道服务器要一直缓存直到内存爆炸？所以定时器一定要有，但太频繁也不好，所以还是要在读取指令前判断用户之前的指令是否失效。</p><p>其实到现在这个步骤，整个后台应用就显得有点复杂了，我们必须要把过滤器的思路贯彻到底，重新改写响应逻辑，实现路由入口处的简洁。</p><p>首先，路由入口会收到两种消息类型：普通消息及事件推送，为了区分它们，我们先建立消息类型分发器<code>msgTypeDispatcher.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/index'</span>)</span><br><span class="line"><span class="keyword">const</span> moneyManager = <span class="built_in">require</span>(<span class="string">'./money'</span>)</span><br><span class="line"><span class="keyword">const</span> defaultManager = <span class="built_in">require</span>(<span class="string">'./default'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doDispatch = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过MsgType区分事件还是普通消息</span></span><br><span class="line">    <span class="keyword">if</span> (payload.MsgType !== <span class="string">'event'</span>) &#123;</span><br><span class="line">      resolve(doNormalMsgPreFilter(payload))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(doEventMsgPreFilter(payload))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通消息的前置过滤器</span></span><br><span class="line"><span class="keyword">const</span> doNormalMsgPreFilter = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断系统是否正在处理该消息</span></span><br><span class="line">  <span class="keyword">let</span> mIndex = <span class="number">-1</span></span><br><span class="line">  global.tempMsg.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.openid === payload.FromUserName &amp;&amp; item.msgid === payload.MsgId) &#123;</span><br><span class="line">      mIndex = index</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (mIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果正在处理，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'success'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mIndex = global.tempMsg.length</span><br><span class="line">    <span class="comment">// 添加到缓存，表示系统正在处理</span></span><br><span class="line">    global.tempMsg.push(&#123;</span><br><span class="line">      openid: payload.FromUserName,</span><br><span class="line">      msgid: payload.MsgId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (payload.MsgType === <span class="string">'text'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> moneyManager.doQuery(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultManager.doQuery(payload)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> doNormalMsgSufFilter(mIndex, msg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doNormalMsgSufFilter(mIndex, <span class="string">'不支持的消息类型'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通消息的后置过滤器</span></span><br><span class="line"><span class="keyword">const</span> doNormalMsgSufFilter = <span class="function">(<span class="params">index, msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 最终请求会走到这里，在这里从缓存中删除该消息</span></span><br><span class="line">  global.tempMsg.splice(index, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件消息的前置过滤器</span></span><br><span class="line"><span class="keyword">const</span> doEventMsgPreFilter = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 暂时不需要对事件有额外操作，判断事件类型后直接返回结果即可</span></span><br><span class="line">  <span class="keyword">if</span> (payload.Event === <span class="string">'subscribe'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> subscribe()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Event === <span class="string">'unsubscribe'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> unsubscribe()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'不支持的事件类型'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理关注事件</span></span><br><span class="line"><span class="keyword">const</span> subscribe = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> config.banner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理取消关注事件</span></span><br><span class="line"><span class="keyword">const</span> unsubscribe = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = doDispatch</span><br></pre></td></tr></table></figure><p>将消息分发的逻辑抽取出来之后，<code>/routes/wx.js</code>接口的代码就变得非常简洁了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msgDiapatcher(json.xml).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">      tempBody.xml.Content = msg</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error)</span><br><span class="line">      tempBody.xml.Content = <span class="string">'系统运行出错，请联系微信号aqzscn解决'</span></span><br><span class="line">    &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res.send(jParser.parse(tempBody))</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>因为设定固定开支的步骤一共需要两步，那么我们就要保存上一步的状态，为了统一所有具有多个步骤的操作，新增一个步骤过滤器，在过滤器中可以直接执行相应步骤的代码。而且为了方便以后拓展，通过设定step来判断步骤执行到第几步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presetManager = <span class="built_in">require</span>(<span class="string">'./preset'</span>)</span><br><span class="line"><span class="keyword">const</span> garbageManager = <span class="built_in">require</span>(<span class="string">'./garbage'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doFilter = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断用户是否正在执行上一步操作</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  global.stepMsg.some(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.openid === payload.FromUserName) &#123;</span><br><span class="line">      index = idx</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Content === <span class="string">'q'</span>) &#123;</span><br><span class="line">    <span class="comment">// 从缓存中移除该命令</span></span><br><span class="line">    global.stepMsg.splice(index, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'已恢复正常模式'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 进入到指定的命令中</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 更新步骤消息的最后时间</span></span><br><span class="line">    global.stepMsg[index].time = <span class="built_in">Math</span>.ceil(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">switch</span> (global.stepMsg[index].command) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'setKz'</span>:</span><br><span class="line">        <span class="keyword">const</span> msg = presetManager.setKz(payload, global.stepMsg[index].step)</span><br><span class="line">        <span class="comment">// 从缓存中移除该命令</span></span><br><span class="line">        global.stepMsg.splice(index, <span class="number">1</span>)</span><br><span class="line">        resolve(msg)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'queryGarbage'</span>:</span><br><span class="line">        resolve(garbageManager.queryStep(payload, global.stepMsg[index].step))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        resolve(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  doFilter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立完成后在消息分发器中调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (payload.MsgType === <span class="string">'text'</span> || payload.Content) &#123;</span><br><span class="line">    <span class="comment">// 首先执行步骤过滤器</span></span><br><span class="line">    <span class="keyword">const</span> filterRes = stepFilter.doFilter(payload)</span><br><span class="line">    <span class="keyword">if</span> (filterRes) &#123;</span><br><span class="line">      <span class="keyword">return</span> filterRes</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过上面的处理，步骤消息就能到达指定的方法中，并且该方法也不必去管怎么去缓存当前步骤，怎么去删除缓存的事情，在我看来还算是一个较好的解决方案。下面把处理固定开支的代码放上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doQuery = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (payload.Content === <span class="string">'月收支预设'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> setKz(payload)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Content === <span class="string">'查询收支预设'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> queryPreset(payload)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预设开支</span></span><br><span class="line"><span class="keyword">const</span> setKz = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;, index = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">''</span></span><br><span class="line">  <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="comment">// 将该用户的命令设置到缓存中</span></span><br><span class="line">      global.stepMsg.push(&#123;</span><br><span class="line">        openid: FromUserName,</span><br><span class="line">        step: <span class="number">1</span>,</span><br><span class="line">        command: <span class="string">'setKz'</span>,</span><br><span class="line">        time: CreateTime</span><br><span class="line">      &#125;)</span><br><span class="line">      msg = <span class="string">'请输入\n示例1：【1工资2000】\n示例2：【2分期还款-500】\nTips:文字前的数字为每月几日，只支持1-28，不填写默认为1日'</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">const</span> dayReg = Content.match(<span class="regexp">/^\d&#123;1,2&#125;/</span>)</span><br><span class="line">      <span class="keyword">const</span> titleReg = Content.match(<span class="regexp">/[^\d-]+/</span>)</span><br><span class="line">      <span class="keyword">const</span> priceReg = Content.match(<span class="regexp">/-?\d+$/</span>)</span><br><span class="line">      <span class="keyword">if</span> (titleReg &amp;&amp; priceReg) &#123;</span><br><span class="line">        <span class="keyword">const</span> day = dayReg ? <span class="built_in">parseInt</span>(dayReg[<span class="number">0</span>]) : <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> title = titleReg[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">const</span> price = <span class="built_in">parseInt</span>(priceReg[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">1</span> || day &gt; <span class="number">28</span>) &#123;</span><br><span class="line">          msg = <span class="string">'为保证程序正常执行，只允许在每月1日到28日设置固定收支'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> kz = &#123;</span><br><span class="line">            openid: FromUserName,</span><br><span class="line">            day: day,</span><br><span class="line">            title: title,</span><br><span class="line">            money: price</span><br><span class="line">          &#125;</span><br><span class="line">          db.presetDb.insert(kz)</span><br><span class="line">          msg = <span class="string">`设置成功！\n将于每月<span class="subst">$&#123;day&#125;</span>日自动添加账单【<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;price&#125;</span>元】`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        msg = <span class="string">'信息匹配失败，请检查是否符合【1工资2000】的格式'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      msg = <span class="string">'预设收支命令匹配失败'</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询收支预设</span></span><br><span class="line"><span class="keyword">const</span> queryPreset = <span class="function">(<span class="params">&#123;FromUserName&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    db.presetDb.find(&#123;<span class="attr">openid</span>: FromUserName&#125;).sort(&#123;<span class="attr">day</span>: <span class="number">1</span>&#125;).exec(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (docs) &#123;</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="string">'您的预设信息如下：\n'</span></span><br><span class="line">        docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> zy = item.money &gt; <span class="number">0</span> ? <span class="string">'增加'</span> : <span class="string">'扣除'</span></span><br><span class="line">          <span class="keyword">const</span> money = <span class="built_in">Math</span>.abs(item.money)</span><br><span class="line">          msg += <span class="string">`每月<span class="subst">$&#123;item.day&#125;</span>日 <span class="subst">$&#123;zy&#125;</span>【<span class="subst">$&#123;item.title&#125;</span><span class="subst">$&#123;money&#125;</span>元】\n`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(<span class="string">'没有查询到您预设的收支\n回复【月收支预设】来设置一笔吧'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  doQuery,</span><br><span class="line">  setKz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的实现效果就是：</p><p><img src="https://i.loli.net/2019/07/22/5d3554528a9f672026.png" alt></p><p>当然，这样只是实现了记录的功能，那么自动执行任务还没有做。我的预想是每晚3点定时去判断每个用户当天的收支预设信息，如果是当天，则向账单中添加记录。又因为项目中不可能只有这一个定时器，因此干脆一了百了，再做一个定时器管理的功能。</p><p>js中与定时有关的也就是<code>setTimeout</code>和<code>setInterval</code>了，而且现在需要做的也只是定时（整点）执行任务，那么我们就可以计算当前时间距离下一个整点还有多久，然后<code>setTimeout</code>到下一个整点（也可以是下下个整点，计算时间并相加即可），启动<code>setInterval</code>执行我们真正需要执行的任务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presetTimer = <span class="built_in">require</span>(<span class="string">'./presetTimer'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../../config/index'</span>)</span><br><span class="line"><span class="keyword">const</span> stepTimer = <span class="built_in">require</span>(<span class="string">'./stepTimer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeDefine = config.taskTimerConfig</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> init = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 测试功能</span></span><br><span class="line">  <span class="comment">// test()</span></span><br><span class="line">  <span class="comment">// 一天的时间 毫秒数</span></span><br><span class="line">  <span class="keyword">const</span> dayTimeStamp = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">1000</span></span><br><span class="line">  <span class="comment">// 月固定开支</span></span><br><span class="line">  startOfHourSchedule(timeDefine.presetTime, dayTimeStamp, presetTimer.doSchedule)</span><br><span class="line">  <span class="comment">// 定时清除缓存步骤消息</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    stepTimer.doSchedule()</span><br><span class="line">  &#125;, timeDefine.clearStepMsgTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  presetTimer.doSchedule()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义在每天的某个小时执行的任务</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; targetHour 目标起始时间</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; intervalTime 循环时间</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fun 要执行的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> startOfHourSchedule = <span class="function">(<span class="params">targetHour, intervalTime, fun</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (targetHour &lt; <span class="number">0</span> || targetHour &gt; <span class="number">23</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">const</span> nowtimeStamp = date.getTime()</span><br><span class="line">  <span class="keyword">const</span> nowHour = date.getHours()</span><br><span class="line">  date.setHours(nowHour + <span class="number">1</span>)</span><br><span class="line">  date.setMinutes(<span class="number">0</span>)</span><br><span class="line">  date.setSeconds(<span class="number">0</span>)</span><br><span class="line">  date.setMilliseconds(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> nextHourTimeStamp = date.getTime()</span><br><span class="line">  <span class="keyword">const</span> diffTime = nextHourTimeStamp - nowtimeStamp</span><br><span class="line">  <span class="keyword">const</span> hour = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">let</span> time = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (nowHour &lt; targetHour ) &#123;</span><br><span class="line">    <span class="comment">// 当前时间小于预计时间</span></span><br><span class="line">    time = targetHour - nowHour <span class="number">-1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    time = <span class="number">24</span> - (nowHour - targetHour + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'将于'</span> + <span class="built_in">Math</span>.ceil((diffTime + hour * time) / <span class="number">1000</span> / <span class="number">60</span>) + <span class="string">'分钟后执行定时任务'</span> + i++)</span><br><span class="line">  <span class="comment">// 开启24个settiemout  0-23 分别对应下n个整点时间</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fun()</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fun()</span><br><span class="line">    &#125;, intervalTime);</span><br><span class="line">  &#125;, diffTime + hour * time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  init</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写了之后，我们在项目的<code>app.js</code>中调用这个文件的<code>init</code>方法即可。</p><p>然后对于具体的固定收支添加账单的逻辑就比较简单了，就不再放到上面了，有兴趣的可以到我的github上看源码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章基本上把技术上的实现都讲了一遍，证明实现这个功能是切实可行的。下面就对建好的服务雏形进行完善和增加功能。&lt;/p&gt;
&lt;p&gt;先放这个系列的文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://godbobo.github.io/2019/07/16/wechat-a
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="微信开发" scheme="https://godbobo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号制作记账功能（二）</title>
    <link href="https://godbobo.github.io/2019/07/17/wechat-account-02/"/>
    <id>https://godbobo.github.io/2019/07/17/wechat-account-02/</id>
    <published>2019-07-17T09:07:47.000Z</published>
    <updated>2019-07-17T09:07:47.270Z</updated>
    
    <content type="html"><![CDATA[<p>上次<a href="https://godbobo.github.io/2019/07/16/wechat-account-01/">微信公众号制作记账功能（一）</a>把nodejs的环境搭好了，并且可以简单地回复用户地信息了，那么接下来就要正式实现我们地功能了。</p><p>为了方便大家查看，也方便大家自己部署到公众号上，我把代码放到<a href="https://github.com/godbobo/wx" target="_blank" rel="noopener">github</a>上了，有兴趣可以去看一下。</p><h1 id="一、功能分发"><a href="#一、功能分发" class="headerlink" title="一、功能分发"></a>一、功能分发</h1><p>因为我的订阅号的权限十分有限，那么基本上就只能靠用户的输入来猜测命令了，打开<code>/routes/wx.js</code>，找到处理普通文字消息的代码，进行如下修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断消息类型</span></span><br><span class="line">    <span class="keyword">if</span> (json.xml.MsgType === <span class="string">'text'</span>) &#123;</span><br><span class="line">      <span class="comment">// 普通文字消息</span></span><br><span class="line">      moneyManager.doQuery(json.xml).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!msg) &#123;</span><br><span class="line">          tempBody.xml.Content = <span class="string">'你好,我在努力进步中哦...'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tempBody.xml.Content = msg</span><br><span class="line">        &#125;</span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">        res.send(resbody)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1、链式调用模块"><a href="#1、链式调用模块" class="headerlink" title="1、链式调用模块"></a>1、链式调用模块</h2><p>首先我的需求是不止有记账这一种功能，可以想见，那么多命令，如果都在<code>wx.js</code>里判断，那以后光找功能就要找好久。</p><p>我的思路是，将命令划分为几个模块，然后每个模块有自己专门的命令分发方法，每个模块处理完之后，<code>wx.js</code>就只负责将处理的结果返回给用户。</p><p>那么怎么判断这个命令属于哪个模块呢？我的想法是利用Promise的链式调用，如果上一个模块没有返回值，就执行下一个模块的命令分发，直至匹配到一个模块。类似下面这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modelA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modelB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">modelA().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!res) &#123;</span><br><span class="line">        <span class="keyword">return</span> modelB()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>目前只定义了一个模块，暂时看不出效果，不过后面我会定义一个默认模块，即若前面的模块都没有匹配到命令时，进入该模块返回一个默认的回复信息。</p><h2 id="2、命令识别"><a href="#2、命令识别" class="headerlink" title="2、命令识别"></a>2、命令识别</h2><blockquote><p>人工智能离用户很近，但离开发者很远~</p></blockquote><p>首先，记账模块有三个子功能：记账、查询账单、统计，而且记账时我想让用户直接输入，因为输入就已经够麻烦了，不能再增加步骤了。</p><p>那么在分发的入口就先去匹配固定的命令，如果没有匹配到，再去匹配记账这个随机性很大的命令。而在匹配记账的过程中，我用的是比较笨的方法，定义一个用户可能会输入的数组，然后再去匹配。</p><p>下面放上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /service/money.js</span></span><br><span class="line"><span class="keyword">const</span> keywords = [ <span class="string">'吃饭'</span>, <span class="string">'购物'</span>, <span class="string">'工资'</span>, <span class="string">'日用'</span>, <span class="string">'交通'</span>, <span class="string">'零食'</span>, <span class="string">'运动'</span>, <span class="string">'娱乐'</span>, <span class="string">'通讯'</span>, <span class="string">'服饰'</span>, <span class="string">'住房'</span>, <span class="string">'居家'</span>, <span class="string">'社交'</span>, <span class="string">'旅行'</span>, <span class="string">'烟酒'</span>, <span class="string">'数码'</span>, <span class="string">'医疗'</span>, <span class="string">'书籍'</span>, <span class="string">'礼物'</span>, <span class="string">'快递'</span>, <span class="string">'水果'</span>, <span class="string">'蔬菜'</span>, <span class="string">'亲友'</span>, <span class="string">'彩票'</span>, <span class="string">'捐赠'</span>, <span class="string">'维修'</span>, <span class="string">'办公'</span>, <span class="string">'宠物'</span>, <span class="string">'学习'</span>, <span class="string">'汽车'</span>, <span class="string">'美容'</span>, <span class="string">'兼职'</span>, <span class="string">'理财'</span>, <span class="string">'礼金'</span>, <span class="string">'早餐'</span>, <span class="string">'午餐'</span>, <span class="string">'晚餐'</span>, <span class="string">'早饭'</span>, <span class="string">'午饭'</span>, <span class="string">'晚饭'</span>]</span><br><span class="line"><span class="keyword">const</span> mt = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能分发</span></span><br><span class="line"><span class="keyword">const</span> doQuery = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 在此处比较数量是否一致，防止输入时出错</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'记账关键词与盈亏数量对比：'</span>, keywords.length, mt.length)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (payload.Content === <span class="string">'账单'</span>) &#123;</span><br><span class="line">      queryBill(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Content === <span class="string">'统计'</span>) &#123;</span><br><span class="line">      tongji(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 记账</span></span><br><span class="line">      addBill(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记账</span></span><br><span class="line"><span class="keyword">const</span> addBill = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content, MsgId&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">    keywords.some(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Content.indexOf(item) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        index = idx</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> price = <span class="built_in">parseFloat</span>(Content.replace(keywords[index], <span class="string">''</span>))</span><br><span class="line">      <span class="keyword">if</span> (!price) &#123;</span><br><span class="line">        res(<span class="string">'错误提示：未输入金额或金额格式错误\n所属模块：[记账]'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> tempTxt = mt[index] &gt; <span class="number">0</span> ? <span class="string">'收入'</span> : <span class="string">'支出'</span></span><br><span class="line">        retMsg = <span class="string">`记录成功！\n<span class="subst">$&#123;keywords[index]&#125;</span> <span class="subst">$&#123;tempTxt&#125;</span> <span class="subst">$&#123;price&#125;</span>元`</span></span><br><span class="line">        res(retMsg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询账单</span></span><br><span class="line"><span class="keyword">const</span> queryBill = <span class="function">(<span class="params">&#123;FromUserName, CreateTime&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'您的账单如下:\n'</span></span><br><span class="line">      res(str)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line"><span class="keyword">const</span> tongji = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  doQuery</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将模块都放在<code>service</code>目录，以便统一管理。上面的代码<code>Promise</code>用得总感觉有点别扭，但还是可以正常运行的，等哪天开窍了估计就能写出更优雅的代码了。</p><h1 id="二、数据存储"><a href="#二、数据存储" class="headerlink" title="二、数据存储"></a>二、数据存储</h1><p>记账记账，如果不存下来，那还叫什么记账？</p><h2 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h2><p>nodejs在数据存储方面的选择其实有很多种，但限于我的服务器很菜，我只能选择基于文件系统的数据库了，那就排除掉MySql、Redis。然后我听人推荐LevelDb，好家伙，感觉比Redis难用多了，我就想简单地放个对象数组，放了大半天都失败了，还读取不到！然后又把目光放到Sqlite3上面，又是一个好家伙，我还要在代码中定义数据结构，这还是我印象中地js吗？</p><p>就在我彷徨不所知时，一道闪电击中了我的脑袋，<code>nedb</code>!赶忙在github上搜索，竟然搜到了这个数据库，然后赶紧试试能不能用，好不好用。用过之后，我只有一个感觉，丝滑~</p><p>我就稍微介绍一下它吧（太丝滑了，必须得多说几句啊），nedb是mongoDb的一个子集，mongoDb相信大家会有所耳闻，而子集，就是将mongoDb的常用操作抽取出来了，所以用着是真的顺手。啥也不说了，先放链接：</p><p><a href="https://github.com/louischatriot/nedb" target="_blank" rel="noopener">https://github.com/louischatriot/nedb</a></p><p><img src="https://i.loli.net/2019/07/17/5d2ed79ec3b9399820.png" alt></p><p>这是我生成的数据库文件，没错，只有一个文件，文件内容肉眼可读！一个字，强啊。</p><h2 id="2、应用"><a href="#2、应用" class="headerlink" title="2、应用"></a>2、应用</h2><p>在<code>nedb</code>中，一个表就是一个文件（个人肤浅见解），因此管理表的任务就交给我们了。</p><p>我的做法是专门用一个文件<code>/service/db.js</code>去管理数据库信息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Datastore = <span class="built_in">require</span>(<span class="string">'nedb'</span>)</span><br><span class="line"><span class="comment">// 生成nedb的实例并自动打开数据库</span></span><br><span class="line"><span class="keyword">var</span> moneyDb = <span class="keyword">new</span> Datastore(&#123; <span class="attr">filename</span>: <span class="string">'moneyLog.db'</span>, <span class="attr">autoload</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里我考虑到项目中不止会用到一张表，就用这种方式导出多个nedb的操作对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  moneyDb</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>/service/money.js</code>中的用法就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造账单记录</span></span><br><span class="line"><span class="keyword">const</span> bill = &#123;</span><br><span class="line">    msgId: MsgId,</span><br><span class="line">    type: keywords[index],</span><br><span class="line">    yk: mt[index],</span><br><span class="line">    price: price,</span><br><span class="line">    openid: FromUserName,</span><br><span class="line">    recordTime: CreateTime</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没错，就这么简单就插入了</span></span><br><span class="line">db.moneyDb.insert(bill)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'您的账单如下:\n'</span></span><br><span class="line"><span class="comment">// 查询也很简单，还可以排序，具体的可以看github上的文档</span></span><br><span class="line">db.moneyDb.find(&#123;<span class="attr">openid</span>: FromUserName&#125;).sort(&#123;<span class="attr">recordTime</span>: <span class="number">-1</span>&#125;).exec(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> d = dateUtil.getNowSimpleFormatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(CreateTime * <span class="number">1000</span>))</span><br><span class="line"><span class="keyword">const</span> s = <span class="string">`[<span class="subst">$&#123;d&#125;</span>] <span class="subst">$&#123;item.type&#125;</span> <span class="subst">$&#123;item.price&#125;</span>元\n`</span></span><br><span class="line">str += s</span><br><span class="line">&#125;)</span><br><span class="line">res(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>做到这一步之后，就可以运行查看效果了。</p><p><img src="https://i.loli.net/2019/07/17/5d2edad30427c47415.png" alt></p><p>可以看到，这里我专门取消关注后再新增的记录，一样可以获取到以前的记录。</p><p>当然，这个功能还有许多地方要完善，比如支持查询啦，支持翻页啦，这些就放到下次再讲吧。</p><h1 id="三、自适应环境"><a href="#三、自适应环境" class="headerlink" title="三、自适应环境"></a>三、自适应环境</h1><p>这个标题实在想不到既简短又直击要害的了…</p><p>通常情况下，我们的开发环境和生产环境的配置信息是有所不同的，那我们每次切换环境都要重新手动修改配置文件吗？</p><p>这当然不行。</p><p>以前这种区分开发环境和生产环境的功能也用过，不过都是别人写好的模板，这次总算自己实现了一下。</p><p>原理很简单，我们的系统都是可以设置环境变量的，而我们平常运行项目执行的<code>yarn start</code>或者<code>npm start</code>其实都是执行的<code>package.json</code>中配置的<code>scripts: {&quot;start&quot;: &quot;node xxxx.js&quot;}</code>这种命令。那我们就可以在执行这个命令之前先将系统的环境变量设为开发环境或生产环境，然后程序里读取当前是开发环境还是生产环境，然后加载不同的配置文件就可以了。</p><p>首先，了解一下设置环境变量的方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows系统</span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV=development</span><br><span class="line"><span class="comment"># Linux/Mac系统</span></span><br><span class="line"><span class="built_in">export</span> NODE_ENV=development</span><br></pre></td></tr></table></figure><p>不同操作系统的命令不一样，这确实给我造成了不小的困扰，但也只能在不同的系统上再手动改一下了。</p><p>然后修改<code>packages.json</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 开发环境是windows，因此先设置为windows的命令</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "set NODE_ENV=development&amp;&amp; nodemon ./bin/www",</span><br><span class="line">    "prod": "set NODE_ENV=production&amp;&amp; nodemon ./bin/www"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>上面用到了<code>&amp;&amp;</code>用于在同一行内区分两条命令，同时要注意的是，<strong><code>&amp;&amp;</code>前面不能用空格分开！</strong>，这导致我一直无法区分开发环境和生产环境。</p><p>这样修改之后，在js代码中，就可以通过以下代码进行判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这样设置完成基本上就可以了，但因为我想把代码放到github上让大家参考，又不能把自己的密钥之类的放在上面，那么我就还需要想点褶子。</p><p>首先，项目中要将开发环境和生产环境的配置文件分开，同时要将私密信息单独创建一个文件，还要有一个文件专门放不会变的配置信息。因此，我的<code>config</code>文件夹就变成了这个样子：</p><p><img src="https://i.loli.net/2019/07/17/5d2ee305ec3e220680.png" alt></p><p>其中<code>*.self.js</code>是我配置私密信息的地方，然后在<code>dev.js</code>中获取，最后在<code>index.js</code>中判断环境后获取对应的配置信息。然后，我再将<code>*.self.js</code>的文件设置为忽略上传就可以了。不过这样的话我又要去写<code>README.md</code>了。。。</p><p>下面附上<code>index.js</code>中区分环境的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> devConfig = <span class="built_in">require</span>(<span class="string">'./dev'</span>)</span><br><span class="line"><span class="keyword">const</span> prodConfig = <span class="built_in">require</span>(<span class="string">'./prod'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区分开发环境和生产环境</span></span><br><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV || <span class="string">'development'</span></span><br><span class="line"><span class="keyword">var</span> isDev = env === <span class="string">'development'</span></span><br><span class="line"><span class="comment">// 每次启动时会打印当前运行环境，更好的提醒使用者</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'当前运行环境：'</span>,env)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appid = isDev ? devConfig.appid : prodConfig.appid</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在做这个记账功能的时候，数据库的选择真的是卡了我好长时间，还好有那一道闪电~</p><p>最后，希望大家可以关注一下我的公众号，体验一下微信记账的感觉~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次&lt;a href=&quot;https://godbobo.github.io/2019/07/16/wechat-account-01/&quot;&gt;微信公众号制作记账功能（一）&lt;/a&gt;把nodejs的环境搭好了，并且可以简单地回复用户地信息了，那么接下来就要正式实现我们地功能了。&lt;/p
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="微信开发" scheme="https://godbobo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号制作记账功能（一）</title>
    <link href="https://godbobo.github.io/2019/07/16/wechat-account-01/"/>
    <id>https://godbobo.github.io/2019/07/16/wechat-account-01/</id>
    <published>2019-07-16T06:47:38.000Z</published>
    <updated>2019-07-16T06:47:38.433Z</updated>
    
    <content type="html"><![CDATA[<p>一直想写一个记账软件，但界面的设计真让我头大。这不，刚买了个服务器，那用这个当后台存储，微信公众号菜单作为界面交互，练个手？</p><p>我的服务器只有<strong>512M内存，10G硬盘</strong>，跑Java就别想了。刚刚看自己的SpringBoot应用跑在自己电脑上就占了479M内存，这还没说Mysql呢，服务器还挂着SSR，没办法，不能用Java来开发了。</p><p>从网上查找Java、Python、nodejs、php的性能比较，都说nodejs性能最好，那就玩nodejs喽（当然我在python上纠结过，不过nodejs一是比较熟悉，而是自己想实现的聊天机器人可以通过API调用来实现，也就是python能做的nodejs都有替代方案，性能又好，那必须选它了）</p><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1、安装express"><a href="#1、安装express" class="headerlink" title="1、安装express"></a>1、安装express</h2><p>这里就参考<a href="http://expressjs.com/zh-cn/starter/installing.html" target="_blank" rel="noopener">Express官方文档</a>一步步操作的。</p><p>不过官方文档稍微有点啰嗦，说了前一步，结果后面告诉你前面的方法太Low了。所以这里我就把关键部分再描述一遍。</p><p>全局安装Express脚手架：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add express-generator</span><br></pre></td></tr></table></figure><p>创建项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express --view=pug myapp</span><br></pre></td></tr></table></figure><blockquote><p>如果不输入项目名[myapp]，就会在当前目录生成各种文件。</p><p>如果不输入–view=pug，控制台会报错jade模板不能用之类的事，我怂，我输入。</p></blockquote><p>进入项目，安装依赖并运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">$ yarn</span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><h2 id="2、控制台输出端口信息"><a href="#2、控制台输出端口信息" class="headerlink" title="2、控制台输出端口信息"></a>2、控制台输出端口信息</h2><p>这时控制台是很干巴巴的，对于就喜欢看控制台不停输出信息的Java开发者来说，难受吖。</p><p>打开<code>/bin/www</code>，找到末尾的<code>onListening</code>方法，这样进行改动：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onListening</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  debug(<span class="string">'Listening on '</span> + bind);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening on '</span> + bind)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后控制台就会输出<code>Listening on port 3000</code>了，舒服了舒服了。</p><h2 id="3、代码自动刷新"><a href="#3、代码自动刷新" class="headerlink" title="3、代码自动刷新"></a>3、代码自动刷新</h2><p>习惯了<code>vuejs</code>的自动刷新，每每改完文件还要<code>Ctrl + C</code>、<code>Y</code>、<code>⬆</code>是真的痛苦。还好我有~</p><p><strong>nodemon</strong></p><p>首先全局安装nodemon：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add nodemon</span><br></pre></td></tr></table></figure><p>打开<code>package.json</code>，修改<code>scripts</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"nodemon ./bin/www"</span></span><br></pre></td></tr></table></figure><p>依旧是原来的配方，<code>yarn start</code>启动项目，舒服了舒服了。</p><p><img src="https://i.loli.net/2019/07/15/5d2c8143a82a922054.png" alt></p><h1 id="二、与微信服务器“配对”"><a href="#二、与微信服务器“配对”" class="headerlink" title="二、与微信服务器“配对”"></a>二、与微信服务器“配对”</h1><p>申请微信公众号之后，在开发者工具中找到公众平台测试账号，填写接口配置信息。</p><p><img src="https://i.loli.net/2019/07/15/5d2c81d64dce639607.png" alt></p><p>当然现在点击保存肯定是提示配置失败的，下面我们开始配置自己的Express服务器来正确响应微信服务器的消息。</p><p>在<code>/routes/</code>目录下新建<code>wx.js</code>文件，直接把<code>user.js</code>的内容复制过来。打开<code>app.js</code>，仿照<code>user.js</code>导入路由的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wxRouter = <span class="built_in">require</span>(<span class="string">'./routes/wx'</span>)</span><br><span class="line">app.use(<span class="string">'/cqm/wx'</span>, wxRouter)</span><br></pre></td></tr></table></figure><p>然后在测试号的页面再次点击保存，这次不是为了配对成功，而是查看接口会传来什么参数，然后我们需要验证这是微信服务器发来的消息。</p><p>此时需要安装一个模块用来加密信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add jssha --dev</span><br></pre></td></tr></table></figure><p>然后就是根据传来的参数验证信息，成功后把<code>echostr</code>字段返回给微信服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信服务器认证</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1 获取微信服务器请求参数</span></span><br><span class="line">  <span class="keyword">var</span> signature = req.query.signature <span class="comment">// 加密签名</span></span><br><span class="line">  <span class="keyword">var</span> timestamp = req.query.timestamp <span class="comment">// 时间戳</span></span><br><span class="line">  <span class="keyword">var</span> nonce = req.query.nonce <span class="comment">// 随机数</span></span><br><span class="line">  <span class="keyword">var</span> echostr = req.query.echostr <span class="comment">// 随机字符串</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`接收到微信服务器认证请求`</span>)</span><br><span class="line">  <span class="comment">// 2 将token timestamp nonce 按字典序排序</span></span><br><span class="line">  <span class="keyword">var</span> array = [config.token, timestamp, nonce]</span><br><span class="line">  array.sort()</span><br><span class="line">  <span class="comment">// 3 将参数加密</span></span><br><span class="line">  <span class="keyword">var</span> tempStr = array.join(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">var</span> shaObj = <span class="keyword">new</span> jsSHA(<span class="string">'SHA-1'</span>, <span class="string">'TEXT'</span>)</span><br><span class="line">  shaObj.update(tempStr)</span><br><span class="line">  <span class="keyword">var</span> scyptoStr = shaObj.getHash(<span class="string">'HEX'</span>)</span><br><span class="line">  <span class="comment">// 4 将加密后的字符串与signature对比，相同则表示验证成功</span></span><br><span class="line">  <span class="keyword">if</span> (signature === scyptoStr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'验证成功'</span>)</span><br><span class="line">    res.send(echostr)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'验证失败'</span>)</span><br><span class="line">    res.send(<span class="string">'验证失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>保存后在微信测试号里再次保存配置信息，就可以保存成功了。</p><blockquote><p>我在测试时用到了一个公司的反向代理工具，把自己电脑映射到服务器的指定网址了。其实原理是差不多的，你只要有一台自己的服务器，在上面配置nginx反向代理，映射到你本机，就可以实现开发环境与微信服务器联调了。</p></blockquote><h1 id="三、响应用户发来的消息"><a href="#三、响应用户发来的消息" class="headerlink" title="三、响应用户发来的消息"></a>三、响应用户发来的消息</h1><p>微信服务器会把用户发送的消息以post方式发送到刚刚验证的接口，同样的，我们需要正确回复微信服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信服务器消息接收</span></span><br><span class="line">router.post(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> signature = req.query.signature</span><br><span class="line">  <span class="keyword">var</span> timestamp = req.query.timestamp</span><br><span class="line">  <span class="keyword">var</span> nonce = req.query.nonce</span><br><span class="line">  <span class="keyword">var</span> openid = req.query.openid</span><br><span class="line">  <span class="comment">// 需要回复success微信才会认为服务器已经收到消息</span></span><br><span class="line">  <span class="keyword">var</span> to = <span class="string">`&lt;ToUserName&gt;<span class="subst">$&#123;openid&#125;</span>&lt;/ToUserName&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">from</span> = <span class="string">`&lt;FromUserName&gt;<span class="subst">$&#123;config.userName&#125;</span>&lt;/FromUserName&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> time = <span class="string">`&lt;CreateTime&gt;<span class="subst">$&#123;timestamp&#125;</span>&lt;/CreateTime&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="string">`&lt;MsgType&gt;text&lt;/MsgType&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">`&lt;Content&gt;你好,我在努力进步中哦...&lt;/Content&gt;`</span></span><br><span class="line">  res.send(<span class="string">`&lt;xml&gt;<span class="subst">$&#123;to&#125;</span><span class="subst">$&#123;<span class="keyword">from</span>&#125;</span><span class="subst">$&#123;time&#125;</span><span class="subst">$&#123;type&#125;</span><span class="subst">$&#123;msg&#125;</span>&lt;/xml&gt;`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后手机关注自己的测试号并随便发送一个消息，就可以看到自己的回复了：</p><p><img src="https://i.loli.net/2019/07/16/5d2d182b5ff4654818.png" alt></p><p>还是很神奇的，不过到这一步只是简单实现了回复消息，实际上我们没有识别用户的输入，也没有做其他复杂的机制，比如5秒内无法回复时要先返回<code>success</code>告知微信服务器我收到消息了，还要应对微信服务器的3次重试机制。</p><p>下面就先实现识别用户发送消息的功能：</p><p>在nodejs中，接收post请求参数的方式和Java的不一样，Java直接就可以获取了，而nodejs还要等待数据传输完毕。因此我们就需要先监听数据传输事件，并将数据保存到一个buffer中，然后监听接收完成的事件，接着才是处理数据及返回消息的步骤：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = []</span><br><span class="line"><span class="comment">// 监听data事件 用于接收数据</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    buffer.push(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 监听end事件，用于处理接收完成的数据</span></span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Buffer.concat(buffer).toString(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment">// 需要回复success微信才会认为服务器已经收到消息</span></span><br><span class="line">    <span class="keyword">var</span> to = <span class="string">`&lt;ToUserName&gt;<span class="subst">$&#123;openid&#125;</span>&lt;/ToUserName&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = <span class="string">`&lt;FromUserName&gt;<span class="subst">$&#123;config.userName&#125;</span>&lt;/FromUserName&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="string">`&lt;CreateTime&gt;<span class="subst">$&#123;timestamp&#125;</span>&lt;/CreateTime&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">`&lt;MsgType&gt;text&lt;/MsgType&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> msg = <span class="string">`&lt;Content&gt;你好,我在努力进步中哦...&lt;/Content&gt;`</span></span><br><span class="line">    res.send(<span class="string">`&lt;xml&gt;<span class="subst">$&#123;to&#125;</span><span class="subst">$&#123;<span class="keyword">from</span>&#125;</span><span class="subst">$&#123;time&#125;</span><span class="subst">$&#123;type&#125;</span><span class="subst">$&#123;msg&#125;</span>&lt;/xml&gt;`</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>用惯了Java的我，发现不能直接获取post请求参数之后，我还傻傻地去找转换工具，结果看到了一个<code>body-parser</code>，用了之后发现没效果。算了算了，入乡随俗。</p></blockquote><p>这样修改之后，就可以获取到用户发来的消息了：</p><p><img src="https://i.loli.net/2019/07/16/5d2d1de895fec15097.png" alt></p><p>下面就是解析信息了（看到请求消息才明白官方文档的<code>![CDATA[]]</code>是不能省略的，但竟然识别出了我的回复，强吖）</p><p>安装<code>fast-xml-parser</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add fast-xml-parser</span><br></pre></td></tr></table></figure><p>解析xml数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlParser = <span class="built_in">require</span>(<span class="string">'fast-xml-parser'</span>)</span><br><span class="line"><span class="keyword">var</span> xml = Buffer.concat(buffer).toString(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xml)</span><br><span class="line"><span class="keyword">var</span> json = xmlParser.convertToJson(xmlParser.getTraversalObj(xml))</span><br><span class="line"><span class="built_in">console</span>.log(json)</span><br></pre></td></tr></table></figure><p>然后，我们熟悉的json就又回来啦：</p><p><img src="https://i.loli.net/2019/07/16/5d2d2086e8f5727885.png" alt></p><h1 id="四、自定义菜单"><a href="#四、自定义菜单" class="headerlink" title="四、自定义菜单"></a>四、自定义菜单</h1><p>被动回复我们现在可以做到了，下面就是要主动向微信服务器发送消息告诉它我们要设置菜单项！</p><h2 id="1、获取access-token"><a href="#1、获取access-token" class="headerlink" title="1、获取access_token"></a>1、获取access_token</h2><p>与微信服务器的很多交互都需要用到<code>access_token</code>的，而<code>access_token</code>有7200秒（2小时）的有效期，那我们需要做的，就是在项目启动后获取一次<code>access_token</code>，并且启动一个定时器，每隔7000秒重新获取一次。</p><p>因为习惯了<code>vue.js</code>的开发模式，我这里在项目根目录下新建了<code>/api/wx.js</code>文件，专门负责发送微信请求。在请求库的选择上，因为我们现在是服务端，不可能只请求一个域名，那么用axios设置baseUrl的方式就不是特别合适，就直接用<code>request</code>库来发送请求就好了，每次请求都定义一下url，也没有特别麻烦，而且我看很多人都这么用，那应该不会错了。</p><p>安装<code>request</code>和<code>querystring</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add request</span><br><span class="line">$ yarn add querystring</span><br></pre></td></tr></table></figure><blockquote><p>其中querystring是将json数据转换为url请求参数的库</p></blockquote><p>然后开始编写请求方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config/index'</span>)</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取AccessToken</span></span><br><span class="line"><span class="keyword">const</span> getAccessToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="string">'grant_type'</span>: <span class="string">'client_credential'</span>,</span><br><span class="line">    <span class="string">'appid'</span>: config.appid,</span><br><span class="line">    <span class="string">'secret'</span>: config.appsecret</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;config.wxUrl&#125;</span>cgi-bin/token?<span class="subst">$&#123;qs.stringify(params)&#125;</span>`</span></span><br><span class="line">  <span class="comment">// console.log('getAccessToken请求地址为', url)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: url</span><br><span class="line">    &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(body))</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开<code>/bin/www</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wxAPI = <span class="built_in">require</span>(<span class="string">'../api/wx'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onListening</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">var</span> getToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    wxAPI.getAccessToken().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      global.access_token = data.access_token</span><br><span class="line">      <span class="built_in">console</span>.log(global.access_token)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  getToken()</span><br><span class="line">  <span class="comment">// 每隔7000秒重新获取一次access_token</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getToken()</span><br><span class="line">  &#125;, <span class="number">7000</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新运行项目，就会在控制台打印出我们获取到的token，这里将<code>access_token</code>保存到了global全局对象中，方便其他地方使用。</p><blockquote><p>nodemon好像不会监听www文件的修改，所以需要我们重新启动服务。</p></blockquote><h2 id="2、配置自定义菜单"><a href="#2、配置自定义菜单" class="headerlink" title="2、配置自定义菜单"></a>2、配置自定义菜单</h2><p>有了<code>access_token</code>，我们就可以放心地向微信服务器发送请求了。但在此之前，我们还没有定义自己的菜单呢。我这里将菜单保存为json格式，同时也是熟悉一下文件操作：</p><p><strong>/config/wxmenus.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"button"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"记账"</span>,</span><br><span class="line">      <span class="attr">"sub_button"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"收入"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"add_money"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"支出"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"sub_money"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"账单"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"bill"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"预算"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"wish"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"待办"</span>,</span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"todo_list"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我要做记账的功能，所以就预先把菜单定义好，后面也省得再去调整了。</p><p>首先尝试一下能否正确读取出json文件：</p><p><strong>/api/wx.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">// 设置自定义菜单</span></span><br><span class="line"><span class="keyword">const</span> setMenu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取json文件</span></span><br><span class="line">    fs.readFile(<span class="string">'./config/wxmenus.json'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 得到配置的菜单信息</span></span><br><span class="line">        <span class="keyword">var</span> m = <span class="built_in">JSON</span>.parse(data.toString())</span><br><span class="line">        resolve(m)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里的文件路径是基于项目路径而不是<code>wx.js</code>当前路径。</p></blockquote><p>然后同样在<code>www</code>中的<code>onListening</code>添加调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置微信菜单</span></span><br><span class="line">  wxAPI.setMenu().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>重启服务就会在控制台看到我们要的结果：</p><p><img src="https://i.loli.net/2019/07/16/5d2d3ab4418e332726.png" alt></p><p>下面继续修改<code>wx.js</code>，将我们配置的菜单发送给微信服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置自定义菜单</span></span><br><span class="line"><span class="keyword">const</span> setMenu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取json文件</span></span><br><span class="line">    fs.readFile(<span class="string">'./config/wxmenus.json'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 得到配置的菜单信息</span></span><br><span class="line">        <span class="keyword">const</span> menuData = data.toString()</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;config.wxUrl&#125;</span>cgi-bin/menu/create?access_token=<span class="subst">$&#123;global.access_token&#125;</span>`</span></span><br><span class="line">        request(&#123;</span><br><span class="line">          method: <span class="string">'POST'</span>,</span><br><span class="line">          url: url,</span><br><span class="line">          form: menuData</span><br><span class="line">        &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(<span class="built_in">JSON</span>.parse(body))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完这个之后还不够，因为这里用到了<code>access_token</code>，我们必须保证在发送菜单的这个请求时我们已经获取到了<code>access_token</code>，那么我们就要修改<code>www</code>文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isInit = <span class="literal">false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onListening</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">var</span> getToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    wxAPI.getAccessToken().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      global.access_token = data.access_token</span><br><span class="line">      <span class="built_in">console</span>.log(global.access_token)</span><br><span class="line">      <span class="keyword">if</span> (!isInit) &#123;</span><br><span class="line">        <span class="comment">// 设置微信菜单</span></span><br><span class="line">        wxAPI.setMenu().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(error)</span><br><span class="line">        &#125;)</span><br><span class="line">        isInit = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  getToken()</span><br><span class="line">  <span class="comment">// 每隔7000秒重新获取一次access_token</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getToken()</span><br><span class="line">  &#125;, <span class="number">7000</span> * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是通过一个标志位来判断获取<code>access_token</code>后是否还需要发送设置菜单的请求。然后取消关注测试号，再重新关注一下：</p><p><img src="https://i.loli.net/2019/07/16/5d2d3f74af56976941.png" alt></p><p>可以看到我们的菜单已经设置生效了。在这个过程中我还注意到控制台还接收到了用户关注和取消关注事件的请求，这表明这个post接口不只是用来接收消息的，应该还有其他用处。</p><h2 id="3、接收菜单点击事件"><a href="#3、接收菜单点击事件" class="headerlink" title="3、接收菜单点击事件"></a>3、接收菜单点击事件</h2><p>到这一步就要参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140454" target="_blank" rel="noopener">微信官方文档</a>给的事件类型了，然后在<code>/routes/wx.js</code>中根据不同类型做出不同回应即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听end事件，用于处理接收完成的数据</span></span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> xml = Buffer.concat(buffer).toString(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">var</span> json = xmlParser.convertToJson(xmlParser.getTraversalObj(xml))</span><br><span class="line">    <span class="built_in">console</span>.log(json)</span><br><span class="line">    <span class="comment">// 定义返回消息</span></span><br><span class="line">    <span class="keyword">var</span> resbody = <span class="string">'success'</span></span><br><span class="line">    <span class="keyword">var</span> tempBody = &#123;</span><br><span class="line">      xml: &#123;</span><br><span class="line">        ToUserName: json.xml.FromUserName,</span><br><span class="line">        FromUserName: json.xml.ToUserName,</span><br><span class="line">        CreateTime: timestamp,</span><br><span class="line">        MsgType: <span class="string">'text'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> jParser = <span class="keyword">new</span> xmlParser.j2xParser()</span><br><span class="line">    <span class="comment">// 判断消息类型</span></span><br><span class="line">    <span class="keyword">if</span> (json.xml.MsgType === <span class="string">'text'</span>) &#123;</span><br><span class="line">      <span class="comment">// 普通文字消息</span></span><br><span class="line">      tempBody.xml.Content = <span class="string">'你好,我在努力进步中哦...'</span></span><br><span class="line">      resbody = jParser.parse(tempBody)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.MsgType === <span class="string">'event'</span>) &#123;</span><br><span class="line">      <span class="comment">// 事件类型 一共有六种事件1 关注/取消关注事件 2 扫描带参数二维码事件 3 上报地理位置事件 4 自定义菜单事件 5 点击菜单拉取消息时的事件推送 6 点击菜单跳转链接时的事件推送</span></span><br><span class="line">      <span class="keyword">if</span> (json.xml.Event === <span class="string">'CLICK'</span>) &#123;</span><br><span class="line">        <span class="comment">// 自定义菜单事件</span></span><br><span class="line">        tempBody.xml.Content = <span class="string">`您点击了<span class="subst">$&#123;json.xml.EventKey&#125;</span>`</span></span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.Event === <span class="string">'subscribe'</span>) &#123;</span><br><span class="line">        <span class="comment">// 关注事件</span></span><br><span class="line">        tempBody.xml.Content = <span class="string">'欢迎关注'</span></span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.Event === <span class="string">'unsubscribe'</span>) &#123;</span><br><span class="line">        <span class="comment">// 取消关注事件 该事件不能给用户发送消息</span></span><br><span class="line">        resbody = <span class="string">''</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.Event === <span class="string">'LOCATION'</span>) &#123;</span><br><span class="line">        <span class="comment">// 上报地理位置事件 暂时不考虑</span></span><br><span class="line">        resbody = <span class="string">''</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他事件有点复杂，先不做处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(resbody)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>然后取消关注测试号再重新关注，将刚刚的几种事件类型试一下，看看会不会做出正确的响应即可。</p><p><img src="https://i.loli.net/2019/07/16/5d2d4eae5ff7167356.png" alt></p><h1 id="五、部署到正式的公众号"><a href="#五、部署到正式的公众号" class="headerlink" title="五、部署到正式的公众号"></a>五、部署到正式的公众号</h1><p>我的服务器是CentOS，并且是刚刚创建的，一片空白，那现在就需要安装nodejs环境和ftp服务了。</p><p>以前自己在Linux下安装过ftp，不过失败了。但这次！看了leoxuan的<a href="https://www.cnblogs.com/leoxuan/p/8329998.html" target="_blank" rel="noopener">CentOS7 FTP安装与配置</a>后，我成功了！</p><p><img src="https://i.loli.net/2019/07/16/5d2d55a2cdf5d21109.png" alt></p><p>大家在按着这个教程来的时候用户名一定要弄对，上面截图中的一个错误就是我直接复制文章中的代码忽略了用户名才出错的。</p><blockquote><p>传输文件时我这里一直无法传输，按文章中说的关闭SeLinux也不行，更改权限775不起作用，最后索性改为777才可以成功上传。</p></blockquote><p>下面，在<code>app.js</code>中修改我们的代码，不再监听<code>/cqm/wx</code>了，这次翻身做主人，直接监听<code>/wx</code>！</p><p>然后打包（压缩）项目，上传到服务器。</p><p>下面需要在服务器安装nodejs，这里<del>我是参照<a href="https://www.cnblogs.com/liangjiongyao/p/9120535.html" target="_blank" rel="noopener">CentOS7.5安装nodejs</a>进行安装的。我选择的是第二种方法，毕竟以后全局安装插件就可以省点事了。</del></p><p><del>不过编译真的好慢啊，我写完这行字的时候它还没有编译好。。。</del></p><p>上面的安装对我来说完全不起作用，又参考了一篇文章<a href="https://blog.csdn.net/MatrixGod/article/details/81905159" target="_blank" rel="noopener">在CentOS 7上安装Node.js的4种方法（包含npm）</a>,用其中的第四种方法，终于是成功了，下面我把命令粘贴一下，方便以后使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">nvm list-remote</span><br><span class="line">nvm install v10.16.0</span><br><span class="line">node -v</span><br><span class="line">npm</span><br></pre></td></tr></table></figure><p>然后再安装我们需要的各种依赖，就可以使用<code>yarn start</code>启动项目了。</p><p><img src="https://i.loli.net/2019/07/16/5d2d63cced9cc33840.png" alt></p><p>但我们的服务是放在3000端口的，我们需要配置nginx服务器的反向代理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  aqzscn.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000/wx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一番配置，运行，然后在微信公众号上配置自己的服务器信息（不要忘记修改Appid和Secret为公众号的），然后你就会发现，还有一大堆问题要解决。</p><p><img src="https://i.loli.net/2019/07/16/5d2d6f3d5c13419133.png" alt></p><p>其中ip不在白名单的问题好解决，直接在公众号上设置就好了，但下面的问题是真的没办法解决。</p><p>没有权限。。好忧桑。。兴奋了大半天，没办法搞下去吖</p><p>服务号又只能企业来做，那我只好等有钱了注册个公司搞这个了。</p><p>那最后的最后，就试一下发送消息是否成功把。</p><p><img src="https://i.loli.net/2019/07/16/5d2d710489eb360784.png" alt></p><p>看样子是可以的，那还算是有点安慰，不枉这么长时间的辛苦。</p><p><img src="https://i.loli.net/2019/07/16/5d2d71888a30d64987.png" alt></p><p>看着这少得可怜的权限，以后怕是只能玩聊天机器人了。</p><p>总的来说，下面就要想点奇招才能完成自己的记账功能了。那么各位看官，请看下回分解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直想写一个记账软件，但界面的设计真让我头大。这不，刚买了个服务器，那用这个当后台存储，微信公众号菜单作为界面交互，练个手？&lt;/p&gt;
&lt;p&gt;我的服务器只有&lt;strong&gt;512M内存，10G硬盘&lt;/strong&gt;，跑Java就别想了。刚刚看自己的SpringBoot应用跑在
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="微信开发" scheme="https://godbobo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github Pages个人博客（三）</title>
    <link href="https://godbobo.github.io/2019/07/15/learn-hexo-03/"/>
    <id>https://godbobo.github.io/2019/07/15/learn-hexo-03/</id>
    <published>2019-07-15T10:54:52.000Z</published>
    <updated>2019-07-15T10:54:52.088Z</updated>
    
    <content type="html"><![CDATA[<p>这里是对Hexo的第三次探究主要就是将博客的内容丰富了一下。</p><p>有兴趣的小伙伴可以看看前面两篇文章：</p><p><a href="https://godbobo.github.io/2019/07/14/learn-hexo-01/">Hexo搭建Github Pages个人博客（一）</a></p><p><a href="https://godbobo.github.io/2019/07/14/learn-hexo-02/">Hexo搭建Github Pages个人博客（二）</a></p><p>下面进入正文。</p><h1 id="一、设置侧边栏社交链接"><a href="#一、设置侧边栏社交链接" class="headerlink" title="一、设置侧边栏社交链接"></a>一、设置侧边栏社交链接</h1><p>打开主题配置，搜索<code>social</code>，下面已经用注释帮我们写好了很多链接的模板，直接套上自己的就可以了。下面放上我的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/godbobo</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:bobobiubiubiubiu@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line"><span class="attr">  Weibo:</span> <span class="attr">https://weibo.com/p/1005056965815024/info</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="attr">https://github.com/godbobo</span> <span class="string">||</span> <span class="string">twitter</span></span><br><span class="line"><span class="attr">  Zhihu:</span> <span class="attr">https://www.zhihu.com/people/zheng-bo-33-3/activities</span> <span class="string">||</span> <span class="string">university</span></span><br><span class="line"><span class="attr">  Instagram:</span> <span class="attr">https://www.instagram.com/bobobiubiubiubiu/</span> <span class="string">||</span> <span class="string">instagram</span></span><br></pre></td></tr></table></figure><p>唯一需要注意的就是知乎的图标<code>font awesome</code>上面没有，我找了个<code>university</code>替代，反正有个叫知乎大学的鬼东西（用都没用过）</p><p>下面是实现效果：</p><p><img src="https://i.loli.net/2019/07/15/5d2bcdb3c542e18963.png" alt></p><h1 id="二、标签前面用图标表示"><a href="#二、标签前面用图标表示" class="headerlink" title="二、标签前面用图标表示"></a>二、标签前面用图标表示</h1><p>默认情况下标签前面是一个<code>#</code>，换成标签图标那得有多高大上。</p><p>这个操作并不难，以前的版本可能还需要改模板代码，现在直接在<strong>主题配置文件</strong>改配置就行了！</p><p>搜索<code>tag-icon</code>，将其改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>可以看到，标签前面已经有小图标了。</p><p><img src="https://i.loli.net/2019/07/15/5d2bcf63e155583942.png" alt></p><h1 id="三、头像的折腾"><a href="#三、头像的折腾" class="headerlink" title="三、头像的折腾"></a>三、头像的折腾</h1><p>主题配置文件中有个<code>avatar.ratated</code>的属性，设置为<code>true</code>后，鼠标移动到头像上就会旋转360度。</p><p>想要更加高级的动画的话，可以用animate.css。首先在bootcdn找到它的link标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/animate.css/3.7.2/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将其添加到<code>\themes\next\layout\_partials\head\head.swig</code>文件的末尾，在<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>中搜索<code>avatar.rotated</code>，可以发现刚刚旋转360度的代码实现，将其注释掉并换为animate.css中的动画即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if hexo-config('avatar.rotated') &#123;</span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">-webkit-animation</span>: bounceIn <span class="number">1s</span>;</span><br><span class="line"><span class="attribute">animation</span>: bounceIn <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/*.site-author-image &#123;</span></span><br><span class="line"><span class="comment">    transition: transform 1.0s ease-out;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  .site-author-image:hover &#123;</span></span><br><span class="line"><span class="comment">    transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人感觉这个折腾的意义不大，所以我最后还是没有给头像加动画，静静地待在那里不好么~</p><blockquote><p>若要尝试动画效果，可以去<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">animate.css官网</a>查看。</p></blockquote><h1 id="四、站点图标"><a href="#四、站点图标" class="headerlink" title="四、站点图标"></a>四、站点图标</h1><p>在主题配置文件中搜索<code>favicon</code>即可配置，图片资源放在主题目录下的<code>source</code>中，具体我就不尝试了，因为还没有找到一个好的图标，默认的就挺好看的。</p><h1 id="五、鼠标点击特效"><a href="#五、鼠标点击特效" class="headerlink" title="五、鼠标点击特效"></a>五、鼠标点击特效</h1><p>鼠标在点击页面空白处的时候显示向上移动的心，想不想要想不想要？</p><p><img src="https://i.loli.net/2019/07/15/5d2c096c7091c36017.png" alt></p><p>这个js文件比较好找，我自己也找了一个版本，效果还OK，就直接放到附录的<a href="#1、鼠标点击特效文件">鼠标点击特效文件</a>里了，有需要的可以直接复制。</p><p>将heart.js文件放在<code>/themes/next/source/js/</code>目录中，找到<code>/themes/next/layout/_layout.swig</code>，搜索<code>vendors.swig</code>，在这一行的上面引入刚刚创建的js文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/heart.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>放到文件末尾似乎和Next有冲突，放在这个位置我这里是没有问题的。</p></blockquote><h1 id="六、评论系统"><a href="#六、评论系统" class="headerlink" title="六、评论系统"></a>六、评论系统</h1><p>文章如果没有评论岂不是失去了灵魂？</p><p>经过一天时间，leanCloud的实名认证终于下来了。进入控制台后，点击应用-创建应用，输入名字即可创建应用。</p><p><img src="https://i.loli.net/2019/07/15/5d2c340328cc970131.png" alt></p><p>然后回到主题配置中，搜索<code>valine</code>，开启并填写自己的<code>appid</code>和<code>appkey</code>，最好把语言也修改一下，邮件通知我觉得就没有必要了，万一有一天我的博客很火把我吵得生活不能自理怎么办？</p><p>重新运行即可看到效果：</p><p><img src="https://i.loli.net/2019/07/15/5d2c33dfa1e4b49155.png" alt></p><p>当然，为了安全起见，还是要设置安全域名的：</p><p><img src="https://i.loli.net/2019/07/15/5d2c346f4fd6961026.png" alt></p><h1 id="七、留言板"><a href="#七、留言板" class="headerlink" title="七、留言板"></a>七、留言板</h1><p>评论系统都有了，那留言板还不是手到擒来？</p><p>在站点根目录键入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page message-board</span><br></pre></td></tr></table></figure><p>打开<code>/source/message-board/index.md</code>，修改标题名：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 留言板</span><br><span class="line">date: 2019-07-15 17:38:28</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>主题配置文件搜索<code>menu</code>，在下面添加一行代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">/message-board/</span> <span class="string">||</span> <span class="string">inbox</span></span><br></pre></td></tr></table></figure><blockquote><p>我这里懒得去弄多语言了，直接把汉字作为key</p></blockquote><p>重新运行，噔噔噔噔~</p><p><img src="https://i.loli.net/2019/07/15/5d2c4b12633cf66012.png" alt></p><h1 id="八、浏览量功能"><a href="#八、浏览量功能" class="headerlink" title="八、浏览量功能"></a>八、浏览量功能</h1><p>知道你看过我，我会很开心的~</p><p>打开leanCloud，依次点击应用 - 存储 - 创建Class，然后创建一个名为<code>Couter</code>的Class，并设置权限为无限制。</p><p>主题配置中，搜索<code>valine</code>，开启<code>visitor</code>功能即可。</p><p><img src="https://i.loli.net/2019/07/15/5d2c4d45872a192983.png" alt></p><p>这样只是开启了文章的浏览量统计功能，这当然不够，我要知道整个网站的访问量！</p><p>主题配置中搜索<code>busuanzi_count</code>,设置为<code>true</code>即可。</p><p><img src="https://i.loli.net/2019/07/15/5d2c507adf0dd59363.png" alt></p><p>怎么样，有没有吓一跳，这么多访客量！好吧，反正我是吓一跳，后面才明白我什么都没配它就给我显示了，那它应该记的是整个网址的访问量，而<code>localhost</code>？每天有多少人访问呢？</p><p>哈哈哈哈哈哈哈</p><h1 id="九、修改文章内链接样式"><a href="#九、修改文章内链接样式" class="headerlink" title="九、修改文章内链接样式"></a>九、修改文章内链接样式</h1><p>蓝色链接看多了，黑色链接就不怎么习惯了。</p><p>打开<code>themes\next\source\css\_common\components\post\post.styl</code>，新增如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*修改链接样式*/</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，就可以习惯了~</p><p><img src="https://i.loli.net/2019/07/15/5d2c4efad9bde95229.png" alt></p><h1 id="十、显示公众号订阅"><a href="#十、显示公众号订阅" class="headerlink" title="十、显示公众号订阅"></a>十、显示公众号订阅</h1><p>我也是个想要订阅的人。</p><p>在微信公众平台的公众号设置中下载自己的二维码</p><p><img src="https://i.loli.net/2019/07/15/5d2c5312b918481087.png" alt></p><p>然后把它放到站点的<code>/source/uploads</code>目录下，并重命名为<code>wechat-qcode.jpg</code></p><p>主题配置中搜索<code>wechat_subscriber</code>，开启该功能并取消注释即可。</p><p><img src="https://i.loli.net/2019/07/15/5d2c53b20471028001.png" alt></p><h1 id="十一、打赏功能"><a href="#十一、打赏功能" class="headerlink" title="十一、打赏功能"></a>十一、打赏功能</h1><p>公众号都有了，不要点打赏怎么行？</p><p>主题配置中搜索<code>reward_settings</code>,把下面的内容开启就行了，付款的图片当然也是需要的。</p><p><img src="https://i.loli.net/2019/07/15/5d2c54f0dffdd60965.png" alt></p><p>看到下面的比特币，好想把它开启，可是我并没有。。。</p><p>微信收款码获取方式：</p><p>聊天列表 - 收付款 - 二维码收款 - 保存收款码</p><blockquote><p>我不想设置金额，我想要大大的惊喜。。（我想的可真多。。）</p></blockquote><p>支付宝就比较简单，首页点击收钱就可以看到<strong>保存图片</strong>的按钮了。</p><p>实现效果如下：</p><p><img src="https://i.loli.net/2019/07/15/5d2c56f77596b33997.png" alt></p><blockquote><p>千万不要开启<strong>reward_settings.animation</strong>！！！这是我的忠告~</p></blockquote><h1 id="十二、腾讯公益404页面"><a href="#十二、腾讯公益404页面" class="headerlink" title="十二、腾讯公益404页面"></a>十二、腾讯公益404页面</h1><p>既然收了打赏，那就做点公益把</p><p>在<code>/themes/next/source/</code>目录下新建404页面，内容复制即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果如下：</p><p><img src="https://i.loli.net/2019/07/15/5d2c5842a372562732.png" alt></p><p>不过奇怪的是我故意输错网址，却是一个空白的错误界面，非要我输入<a href="http://localhost:4000/404.html" target="_blank" rel="noopener">http://localhost:4000/404.html</a>才会显示。不知道是出什么问题了。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="1、鼠标点击特效文件"><a href="#1、鼠标点击特效文件" class="headerlink" title="1、鼠标点击特效文件"></a>1、鼠标点击特效文件</h2><p><strong>heart.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从jianhuax.com下载的</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,document,undefined</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> hearts = [];</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">callback</span>)</span>&#123;</span><br><span class="line">setTimeout(callback,<span class="number">1000</span>/<span class="number">60</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">init();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">css(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>);</span><br><span class="line">attachEvent();</span><br><span class="line">gameloop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gameloop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;hearts.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(hearts[i].alpha &lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(hearts[i].el);</span><br><span class="line">hearts.splice(i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">hearts[i].y--;</span><br><span class="line">hearts[i].scale += <span class="number">0.004</span>;</span><br><span class="line">hearts[i].alpha -= <span class="number">0.013</span>;</span><br><span class="line">hearts[i].el.style.cssText = <span class="string">"left:"</span>+hearts[i].x+<span class="string">"px;top:"</span>+hearts[i].y+<span class="string">"px;opacity:"</span>+hearts[i].alpha+<span class="string">";transform:scale("</span>+hearts[i].scale+<span class="string">","</span>+hearts[i].scale+<span class="string">") rotate(45deg);background:"</span>+hearts[i].color;</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(gameloop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attachEvent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="built_in">window</span>.onclick===<span class="string">"function"</span> &amp;&amp; <span class="built_in">window</span>.onclick;</span><br><span class="line"><span class="built_in">window</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">old &amp;&amp; old();</span><br><span class="line">createHeart(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHeart</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">d.className = <span class="string">"heart"</span>;</span><br><span class="line">hearts.push(&#123;</span><br><span class="line">el : d,</span><br><span class="line">x : event.clientX - <span class="number">5</span>,</span><br><span class="line">y : event.clientY - <span class="number">5</span>,</span><br><span class="line">scale : <span class="number">1</span>,</span><br><span class="line">alpha : <span class="number">1</span>,</span><br><span class="line">color : randomColor()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line">style.type=<span class="string">"text/css"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">style.styleSheet.cssText = css;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"rgb("</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">","</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">","</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次修改的大部分还都是可以直接配置的，但还没有结束，这不是我的博客的最终样子。它还需要做最后的蜕变！</p><p>下一篇文章应该就是大量的自定义样式了，敬请期待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里是对Hexo的第三次探究主要就是将博客的内容丰富了一下。&lt;/p&gt;
&lt;p&gt;有兴趣的小伙伴可以看看前面两篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://godbobo.github.io/2019/07/14/learn-hexo-01/&quot;&gt;Hexo搭建Githu
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="hexo" scheme="https://godbobo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github Pages个人博客（二）</title>
    <link href="https://godbobo.github.io/2019/07/14/learn-hexo-02/"/>
    <id>https://godbobo.github.io/2019/07/14/learn-hexo-02/</id>
    <published>2019-07-14T14:40:21.000Z</published>
    <updated>2019-07-14T14:40:21.821Z</updated>
    
    <content type="html"><![CDATA[<p>有点无聊，有点焦虑。</p><p>今天下午刚搞完第一波Hexo的部署，晚上又闲的没事干，那就继续捣鼓这个博客吧。</p><p>这是第二篇有关Hexo的文章，没有看过第一篇的可以去瞅瞅：</p><p><a href="https://godbobo.github.io/2019/07/14/learn-hexo-01/">Hexo搭建Github Pages个人博客（一）</a></p><h1 id="一、背景动画"><a href="#一、背景动画" class="headerlink" title="一、背景动画"></a>一、背景动画</h1><p>相信大家在浏览网站时肯定见过网页背景随鼠标移动而变化的特效，以前以为很高大上，原来就是引一个js库的事。</p><blockquote><p>这个功能仅适用于next主题，其他主题没有实验过。</p></blockquote><p>打开<code>/themes/next/_config.yml</code>，搜索<code>Animation Settings</code>，第一个默认是开启的，看着可配置项有<code>fadeIn</code>之类的，猜想应该就是首页加载时各个部件的渐隐效果，那就不去动它了。</p><p>下面第二个叫<code>pace</code>的，看注释应该是进度条动画，那我觉得聊胜于无，开启就是了。下面就以这个库为例，讲一下怎么开启这个动画效果。</p><p>首先当然是要把<code>pace.enable</code>设置为<code>true</code>，单单这样是不够的，next主题并没有包含这个插件。如果就这样去运行，页面不会发生任何变化，而且控制台还会报404错误。</p><p>因此下一步就是去下载这个插件，next主题很贴心地把插件的地址放在了注释里面：</p><p><img src="https://i.loli.net/2019/07/14/5d2b17a2962a946732.png" alt></p><p>下载之后将其解压到<code>/themes/next/sources/lib</code>下面，然后将文件夹重命名为<code>pace</code>。</p><blockquote><p>其他插件的导入方式类似，文件夹的名称要和配置文件中的名称保持一致。</p></blockquote><p>导入成功之后就可以运行查看效果了。默认的<code>minimal</code>是浏览器顶部的一个蓝色进度条动画（页面加载时显示，普通情况下一条黑边）。</p><p>为了方便大家对比，也是解决这个无聊的周末夜晚，我一个一个把这些效果实验一下，供大家参考：</p><p><a href="#1、进度条动画主题描述">1、进度条动画主题描述</a></p><blockquote><p>进度条下面的就都是背景动画了，官方文档说不能同时开启两个，但我试了一下，可以呀，只是不太好看而已~</p></blockquote><p>我也把所有的背景动画的特效试了一下，大家可以看截图选择自己看着舒服的。</p><p><a href="#2、背景动画特效展示">2、背景动画特效展示</a></p><blockquote><p><strong>注意</strong>：下载的插件要把目录中的<code>.github</code>目录删掉，否则提交到github之后会找不到插件的路径。</p></blockquote><h1 id="二、百度统计"><a href="#二、百度统计" class="headerlink" title="二、百度统计"></a>二、百度统计</h1><p>详见<a href="https://theme-next.iissnan.com/third-party-services.html#analytics-baidu" target="_blank" rel="noopener">https://theme-next.iissnan.com/third-party-services.html#analytics-baidu</a></p><p>配置成功后可以将项目发布在github上，然后检查是否安装正确：</p><p><img src="https://i.loli.net/2019/07/14/5d2b2df59e46e11713.png" alt></p><h1 id="三、谷歌站点收录"><a href="#三、谷歌站点收录" class="headerlink" title="三、谷歌站点收录"></a>三、谷歌站点收录</h1><p>详见<a href="https://theme-next.iissnan.com/third-party-services.html#google-webmaster-tools" target="_blank" rel="noopener">https://theme-next.iissnan.com/third-party-services.html#google-webmaster-tools</a></p><p>刚刚配置的时候忘了截图了，现在已经找不到那个页面了。</p><p>不过只要注意在输入网址之后展开第一种验证方式就可以找到我们要的代码了。</p><h1 id="四、本地搜索功能"><a href="#四、本地搜索功能" class="headerlink" title="四、本地搜索功能"></a>四、本地搜索功能</h1><p>用第三方搜索还要注册还要收费，我只需要一个简单的搜索哦~</p><p>详见<a href="https://theme-next.iissnan.com/third-party-services.html#local-search" target="_blank" rel="noopener">https://theme-next.iissnan.com/third-party-services.html#local-search</a></p><p><img src="https://i.loli.net/2019/07/14/5d2b2dc06746f68964.png" alt></p><p>搭建完成的效果也还OK</p><h1 id="五、显示文章基本信息"><a href="#五、显示文章基本信息" class="headerlink" title="五、显示文章基本信息"></a>五、显示文章基本信息</h1><p>就是这种效果：</p><p><img src="https://i.loli.net/2019/07/14/5d2b30450ce4141448.png" alt></p><p>打开<code>_config.yml</code>配置站点：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span> <span class="comment"># 阅读时长</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span> <span class="comment"># 所有文章总字数</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span> <span class="comment"># 所有文章阅读中时长</span></span><br></pre></td></tr></table></figure><p>打开<code>/themes/next/_config.yml</code>配置主题：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span>  <span class="comment"># 是否换行显示 字数统计 及 阅读时长</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 文章 字数统计 阅读时长 使用图标 还是 文本表示</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span> <span class="comment"># 博客底部统计 字数统计 阅读时长 使用图标 还是 文本表示</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure><p>这样我们只是配置好了，但是插件还没有安装，下面就安装插件（网上看的一篇文章说next主题自带该插件，我信以为真，结果死活不显示统计数量，也不报错，还专门去github上下载该插件，结果最后才发现是要用npm安装的。。。）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-symbols-count-time</span><br></pre></td></tr></table></figure><p>然后重新运行就可以了，底部也会出现整个站点的统计字数。</p><h1 id="六、滚动时显示文章进度"><a href="#六、滚动时显示文章进度" class="headerlink" title="六、滚动时显示文章进度"></a>六、滚动时显示文章进度</h1><p>在主题配置中搜索<code>back2top</code>，然后你懂的~</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在侧边栏显示该控件</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 显示阅读进度</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后效果如下：</p><p><img src="https://i.loli.net/2019/07/14/5d2b36481c0f979568.png" alt></p><p>在点击这个控件后就会返回顶部。</p><p>虽然说放在侧边栏与潜意识里的返回顶部按钮不同，且用百分比来装饰，让人误以为它只是用来显示而不能点击的。但胜在能与周围融为一体呀，我不管，我就要这么设置！</p><h1 id="七、生成网站地图"><a href="#七、生成网站地图" class="headerlink" title="七、生成网站地图"></a>七、生成网站地图</h1><p>第三步已经生成了谷歌的站点地图，这里的设置主要是针对百度的。</p><p>安装<code>sitemap</code>插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-generator-sitemap</span><br><span class="line">$ yarn add hexo-generator-baidu-sitemap</span><br></pre></td></tr></table></figure><p>然后将站点配置文件中的url改为自己的github地址即可。</p><p>重新运行，从地址栏输入<code>/baidusitemap.xml</code>查看有没有生成。</p><p><img src="https://i.loli.net/2019/07/14/5d2b3cd50360797106.png" alt></p><blockquote><p>似乎百度不能抓取github.io下的内容，那搞它有什么用，不搞了不搞了。</p></blockquote><h1 id="八、附录"><a href="#八、附录" class="headerlink" title="八、附录"></a>八、附录</h1><h2 id="1、进度条动画主题描述"><a href="#1、进度条动画主题描述" class="headerlink" title="1、进度条动画主题描述"></a>1、进度条动画主题描述</h2><table><thead><tr><th>theme</th><th>效果描述</th></tr></thead><tbody><tr><td>big-counter</td><td>页面右上角显示加载百分比（数字）</td></tr><tr><td>bounce</td><td>页面右上角显示一个跳动的小球，逐渐远去并消失</td></tr><tr><td>barber-shop</td><td>整个页面都被进度条占满。。。</td></tr><tr><td>center-atom</td><td>页面中间显示一个小花，花朵中间显示加载百分比</td></tr><tr><td>center-circle</td><td>页面中间显示有百分比的圆，有一个翻转消失的动画</td></tr><tr><td>center-radar</td><td>页面中间一个雷达旋转的动画</td></tr><tr><td>center-simple</td><td>顾名思义，特别简单，页面中间一个进度条</td></tr><tr><td>corner-indicator</td><td>右上角一个切角，里面是转圈的线条</td></tr><tr><td>fill-left</td><td>从左到右填充页面，与barber-shop的区别是不会遮挡页面元素。（十分不推荐选这个）</td></tr><tr><td>flat-top</td><td>页面上方显示一个较宽的进度条</td></tr><tr><td>flash</td><td>页面上方显示较细的进度条，同时右上角有个加载状态的圆。（整体感觉不错，我可能会选它）</td></tr><tr><td>loading-bar</td><td>同样是页面中间一个进度条。。</td></tr><tr><td>mac-osx</td><td>页面产生波浪，顶部有进度条。。（不是太好看呀，感觉侮辱了macOs呀）</td></tr><tr><td>material</td><td>页面中间一个透明的圆，里面是百分比。（挺清爽的感觉，还可以）</td></tr><tr><td>minimal</td><td>页面上方显示一个很细的进度条</td></tr></tbody></table><p>这些主题尝试下来，有一个共同的特点，在页面超过一屏的情况下，顶部会有一个黑色的进度条区域（不管这里会不会显示进度条），所以建议选择带有<strong>顶部进度条</strong>的主题。</p><h2 id="2、背景动画特效展示"><a href="#2、背景动画特效展示" class="headerlink" title="2、背景动画特效展示"></a>2、背景动画特效展示</h2><p>canvas_nest:</p><p><img src="https://i.loli.net/2019/07/14/5d2b20f80689359611.png" alt></p><p>就是红框中的那些线条，可以跟随鼠标移动。</p><p>three.three_waves:</p><blockquote><p>three共包含三种特效，因此配置文件中有两个开关都要打开才行。</p></blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b21ae53fcd20531.png" alt></p><p>效果挺震撼的，在页面空白区域比较多的时候看着特别爽。</p><p>three.canvas_lines:</p><p><img src="https://i.loli.net/2019/07/14/5d2b223ac6d9173596.png" alt></p><p>three.canvas_sphere:</p><p><img src="https://i.loli.net/2019/07/14/5d2b228770dd943557.png" alt></p><p>这个动画动的幅度比较小，一般只能在页面切换时才能看到，平时就被文章给盖住了。</p><p>canvas_ribbon：</p><p><img src="https://i.loli.net/2019/07/14/5d2b22ecc174c58373.png" alt></p><p>这个不会动，只会在鼠标点击时切换背景。</p><p>总的来说，这些动画都挺好看的，但是我就觉得有一种哗众取宠的感觉。我的注意力应该放在文字本身，你旁边动来动去的背景是想干啥？</p><p>所以最终我选择了奢华低调有内涵的<code>three.canvas_sphere</code></p><p>最后，还是想说一下，本来想搞一个评论系统的，结果leanCloud刚实名认证不能创建应用，其他的要么被墙要么收费，真是难为死我了。</p><p>说不得还得来个Hexo系列文章三呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有点无聊，有点焦虑。&lt;/p&gt;
&lt;p&gt;今天下午刚搞完第一波Hexo的部署，晚上又闲的没事干，那就继续捣鼓这个博客吧。&lt;/p&gt;
&lt;p&gt;这是第二篇有关Hexo的文章，没有看过第一篇的可以去瞅瞅：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://godbobo.github.io/
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="hexo" scheme="https://godbobo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github Pages个人博客（一）</title>
    <link href="https://godbobo.github.io/2019/07/14/learn-hexo-01/"/>
    <id>https://godbobo.github.io/2019/07/14/learn-hexo-01/</id>
    <published>2019-07-14T06:01:56.000Z</published>
    <updated>2019-07-14T06:02:32.963Z</updated>
    
    <content type="html"><![CDATA[<p>以前也了解过Hexo，但因为各种操作都需要敲命令，我这么懒，就是不想敲命令~所以就没怎么玩过这个。这些天无意间了解到有个Hexo的客户端，觉得可以试试了。</p><p>搭建完成之后文章列表只有一篇HelloWorld，不能忍不能忍，于是诞生了这篇文章。。。。</p><h1 id="一、开启Github-Pages"><a href="#一、开启Github-Pages" class="headerlink" title="一、开启Github Pages"></a>一、开启Github Pages</h1><p>在Github中创建一个新的仓库，仓库名字为：<code>[你的用户名].github.io</code>,例如我的用户名为<code>godbobo</code>，那么填写的名称就是<code>godbobo.github.io</code></p><p><img src="https://i.loli.net/2019/07/14/5d2ab49f087dd61642.png" alt></p><p>其他什么都不用填，点击创建。然后打开该项目的<code>Settings</code>:</p><p><img src="https://i.loli.net/2019/07/14/5d2ab5a71117050843.png" alt></p><p>在<code>Github Pages</code>这个栏目下点击<code>Choose Theme</code>。（我这个是已经创建好的，界面和没有创建过的是不一样的）</p><p><img src="https://i.loli.net/2019/07/14/5d2ab5c5393be44329.png" alt></p><p>然后会跳转到选择主题的界面，直接默认第一个就好，反正后面还要换成Hexo的，选择之后在新的页面点击<code>commit</code>提交更改，一个崭新的Github Pages就建立好了，并且可以直接通过刚才的项目名进行访问。</p><p><img src="https://i.loli.net/2019/07/14/5d2ab6a79d38b79277.png" alt></p><blockquote><p>一个账号只能有一个Github Pages可以通过这种方式访问。</p></blockquote><p>到这一步，Github Pages就算是配置好了，下面就要开始激动人心的Hexo配置了。</p><h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h1><p>首先全局安装Hexo脚手架：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>不知道为什么，我用yarn安装之后命令行没有<code>hexo</code>这个命令，万般无奈之下，我还是用了npm来安装。。。</p></blockquote><p>用脚手架初始化博客目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init godbobo.github.io</span><br><span class="line">$ <span class="built_in">cd</span> godbobo.github.io</span><br><span class="line">$ yarn</span><br></pre></td></tr></table></figure><blockquote><p>这里为了保险起见我没把项目放到中文目录下，直接在D盘建的文件夹。</p></blockquote><p>生成并运行Hexo：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line"><span class="comment"># g 即 generate</span></span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># s 即 serve</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器<a href="http://localhost:4000" target="_blank" rel="noopener">localhost:4000</a>，即可看到效果：</p><p><img src="https://i.loli.net/2019/07/14/5d2ab925c59d435206.png" alt></p><p>注意到地址栏了吗？我已经把它部署到Github Pages上了，要实现这样的效果，请看下回分解~</p><p>哦不，是下一步。</p><h1 id="三、部署到Github-Pages"><a href="#三、部署到Github-Pages" class="headerlink" title="三、部署到Github Pages"></a>三、部署到Github Pages</h1><p>本地安装git以及如何连接到github的过程就不在这里讲了，下面直接开始正文：</p><p>安装<code>hexo-deployer-git</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在生成的项目中可以看到有一个<code>_config.yml</code>的文件，它是hexo的用户配置文件：</p><p><img src="https://i.loli.net/2019/07/14/5d2aba9c8126997245.png" alt></p><p>我们需要在这里配置自己刚刚创建的Github Pages地址，在该文件中搜索<code>deploy</code>或直接到文件末尾，做出类似下图的修改：</p><p><img src="https://i.loli.net/2019/07/14/5d2abb271fa3465005.png" alt></p><p>然后命令行中输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># d 即 deploy</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>如果是第一次执行这个命令会让你输入github的账号密码，输入之后就能够发布到Github Pages上了。</p><h1 id="四、个性化配置"><a href="#四、个性化配置" class="headerlink" title="四、个性化配置"></a>四、个性化配置</h1><h2 id="1、主题配置"><a href="#1、主题配置" class="headerlink" title="1、主题配置"></a>1、主题配置</h2><p>主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes</a>上面找到自己满意的，不过这里我还是推荐朴素又不失内涵的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next主题</a>，它还有四个子主题可供选择。</p><p>将主题下载下来后(直接download zip就行了，用git命令感觉好慢)，解压并将目录重命名为<code>next</code>，然后放到hexo项目的<code>/themes/</code>下。</p><p><img src="https://i.loli.net/2019/07/14/5d2abd642d56a30213.png" alt></p><p>然后打开项目（站点）配置文件<code>_config.yml</code>，搜索theme或直接到文件末尾，将默认主题改为<code>next</code>即可。</p><p><img src="https://i.loli.net/2019/07/14/5d2abdd6cc2d873221.png" alt></p><p>然后重新运行<code>hexo s</code>就可以看到主题已经改变。</p><h2 id="2、设置语言"><a href="#2、设置语言" class="headerlink" title="2、设置语言"></a>2、设置语言</h2><p>运行后发现整个页面都是英文，我大字都不识几个让我看英文？这可不行。</p><p>打开站点配置文件<code>_config.yml</code>及主题配置文件<code>/themes/next/_config.yml</code>，搜索到<code>language</code>，并将其改为<code>zh-CN</code>即可。</p><p>放上我更换主题以及换了语言之后的页面样子：</p><p><img src="https://i.loli.net/2019/07/14/5d2abf2ed2ba730575.png" alt></p><h2 id="3、设置next子主题"><a href="#3、设置next子主题" class="headerlink" title="3、设置next子主题"></a>3、设置next子主题</h2><p>咦，你的next主题怎么和我的不一样？我也要我也要~</p><p>在刚刚hexo-next的github页面可以看到这个主题下一共有四个子主题可供选择：</p><p><img src="https://i.loli.net/2019/07/14/5d2abfa4087d120431.png" alt></p><p>经过一番挑选，我觉得<code>Gemini</code>可能更养眼一点，打开主题配置文件<code>/themes/next/_config.yml</code>，搜索<code>scheme</code>，将其改为<code>Gemini</code>并重新生成页面即可。</p><h2 id="4、支持RSS"><a href="#4、支持RSS" class="headerlink" title="4、支持RSS"></a>4、支持RSS</h2><p>如果自己能读到自己的Feed，那该有多好~</p><p>安装<code>hexo-generator-feed</code>插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-generator-feed</span><br></pre></td></tr></table></figure><p>完毕！</p><p>没错，就是这么简单！</p><p>点击RSS链接，就会跳转到<code>atom.xml</code>页面，这就表示RSS已经成功生成了。</p><p><img src="https://i.loli.net/2019/07/14/5d2ac1258118235520.png" alt></p><h1 id="五、使用hexo-client"><a href="#五、使用hexo-client" class="headerlink" title="五、使用hexo-client"></a>五、使用hexo-client</h1><p>说了大半天，花里胡哨，我要怎么不费吹灰之力新建文章编辑文章？</p><p>打开<a href="https://github.com/gaoyoubo/hexo-client" target="_blank" rel="noopener">https://github.com/gaoyoubo/hexo-client</a>这个仓库，在README的最下方有最新版的下载地址，然后下载并安装。</p><p>首次进入需要设置hexo项目的目录，设置即可。</p><p>目前整个项目还很简陋，编辑文章时虽说有上传图片的功能，但却不能通过剪切板上传，还是很鸡肋的。所以现在这篇文章我就是通过<code>Typora</code>来编写，<code>PicGo</code>来上传图片的。</p><p>整个软件用起来并不复杂，稍微摸索以下就会了，只是添加标签和分类的功能肉眼是找不到的，需要在编辑文章时找到<code>Front-matter</code>，在这个里面配置标签、分类信息：</p><p><img src="https://i.loli.net/2019/07/14/5d2ac3476602659335.png" alt></p><p>其中title为<code>tags</code>表示标签，<code>categories</code>表示分类，如果要添加多个，需要使用yml文件的数组格式。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>在查找问题的过程中了解到Hexo的文档，以后要深入折腾的话可以参考一下：</p><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></li><li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Hexo-Next主题配置文档</a></li></ul><p>一般来说，每次更改内容后，最好要依次执行以下下面三个命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这条不执行应该也可以，我这里每次改东西后不执行它也不会有问题</span></span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>最后，看hexo官网中的描述，还有好多花样自己没有尝试过，比如评论功能，所以后续应该会有第二篇写hexo的文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前也了解过Hexo，但因为各种操作都需要敲命令，我这么懒，就是不想敲命令~所以就没怎么玩过这个。这些天无意间了解到有个Hexo的客户端，觉得可以试试了。&lt;/p&gt;
&lt;p&gt;搭建完成之后文章列表只有一篇HelloWorld，不能忍不能忍，于是诞生了这篇文章。。。。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="hexo" scheme="https://godbobo.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
