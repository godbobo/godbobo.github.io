<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑博的博客</title>
  
  <subtitle>人生如梦未醒时，梦如人生我是谁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://godbobo.github.io/"/>
  <updated>2019-07-22T06:17:22.496Z</updated>
  <id>https://godbobo.github.io/</id>
  
  <author>
    <name>Godbobo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信公众号制作记账功能（三）</title>
    <link href="https://godbobo.github.io/2019/07/22/wechat-account-03/"/>
    <id>https://godbobo.github.io/2019/07/22/wechat-account-03/</id>
    <published>2019-07-22T06:17:22.000Z</published>
    <updated>2019-07-22T06:17:22.496Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章基本上把技术上的实现都讲了一遍，证明实现这个功能是切实可行的。下面就对建好的服务雏形进行完善和增加功能。</p><p>先放这个系列的文章：</p><p><a href="https://godbobo.github.io/2019/07/16/wechat-account-01/">微信公众号制作记账功能（一）</a></p><p><a href="https://godbobo.github.io/2019/07/17/wechat-account-02/">微信公众号制作记账功能（二）</a></p><h1 id="一、默认回复"><a href="#一、默认回复" class="headerlink" title="一、默认回复"></a>一、默认回复</h1><p>前面设置的默认回复就是简单的一句话，一点都不够智能，当然了，我再怎么改造，只要不用到聊天机器人这种功能，那就不会特别智能。但聊天机器人的API都是要收费的哎，而如果我用python在服务器上自己搭一个，那我真怕服务器会受不了这么大的压力。</p><p>那要怎么办呢？至少每次给用户的回复都不一样吧。这时我想到了<code>hitokoto</code>这个API，接口基本上没什么限制，每次都会返回一个新的句子，挺适合我的需求的。</p><p>下面新建<strong>/api/api.js</strong>，用于请求接口数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处放置有关请求API接口的代码</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一言数据</span></span><br><span class="line"><span class="keyword">const</span> getHitokoto = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: <span class="string">'https://international.v1.hitokoto.cn/'</span></span><br><span class="line">    &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(body))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getHitokoto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口有了，下面就要使用这个接口，这里用到上篇文章说的链式调用处理信息。首先建立<code>/service/default.js</code>，这里同样要实现功能的分发，因为后面可能会为默认回复增加不同的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>)</span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'../api/api'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能分发</span></span><br><span class="line"><span class="keyword">const</span> doQuery = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (payload.Content === <span class="string">'一言'</span> || payload.Content === <span class="string">'hitokoto'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> returnHitokoto(payload, <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> returnHitokoto(payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一言</span></span><br><span class="line"><span class="keyword">const</span> returnHitokoto = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;, isTarget = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> api.getHitokoto().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tips = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (!isTarget) &#123;</span><br><span class="line">      tips = <span class="string">'主人我太笨了，没有明白你的意思。不过我准备了一句话，你看你喜不喜欢？\n\n'</span></span><br><span class="line">      <span class="comment">// 构造未识别对话记录</span></span><br><span class="line">      <span class="keyword">const</span> unknownWord = &#123;</span><br><span class="line">        openid: FromUserName,</span><br><span class="line">        content: Content,</span><br><span class="line">        createTime: CreateTime</span><br><span class="line">      &#125;</span><br><span class="line">      db.unkonwnDb.insert(unknownWord)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">`<span class="subst">$&#123;tips&#125;</span><span class="subst">$&#123;data.hitokoto&#125;</span>\n\nby <span class="subst">$&#123;data.<span class="keyword">from</span>&#125;</span>`</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = doQuery</span><br></pre></td></tr></table></figure><p>因为获取一句话同样是一个小功能，所以就先判断是否是专门获取一句话的，如果是的话，就不再添加<em>我不懂我不懂</em>之类的废话了，哈哈。</p><p>然后就是链式调用的实现了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通文字消息</span></span><br><span class="line">      moneyManager.doQuery(json.xml).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">          <span class="keyword">return</span> msg</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> defaultFilter(json.xml)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">        res.send(resbody)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error)</span><br><span class="line">        res.send(<span class="string">'服务器发生异常，请联系微信号aqzscn解决'</span>)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>可以这么做的原因是如果上一个过滤器匹配到命令，它的返回值就不会为空，反之则会为空。这里当然是用的最笨的过滤器实现方式–手动添加，不过至少功能是实现了。</p><p>然后就可以尝试发送一条系统不懂的消息了：</p><p><img src="https://i.loli.net/2019/07/18/5d2fbe27ea40223895.png" alt></p><p>怎么样？效果还可以吧</p><p>但这时我遇到一个问题，我请求<code>hitokoto</code>源是要消耗一段时间的，但微信服务器等不及呀，它就启动了它的三次重试机制。那我就只好增加一个过滤机制了，打开<code>app.js</code>，在系统启动时新增一个全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义缓存消息id的数组,防止重复响应</span></span><br><span class="line">global.tempMsg = []</span><br></pre></td></tr></table></figure><p>然后在<code>/routes/wx.js</code>中先判断是否是重复消息，不是的话才允许向下执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为系统还会请求其他服务器，返回可能会有延时，因此在这里判断并保存每个消息的openid和msgid(可能是在if语句外面，不过目前只是处理文字信息，先不考虑那么多了吧)</span></span><br><span class="line">      <span class="keyword">let</span> mIndex = <span class="number">-1</span></span><br><span class="line">      global.tempMsg.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.openid === openid &amp;&amp; item.msgid === json.xml.MsgId) &#123;</span><br><span class="line">          mIndex = index</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (mIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        res.send(resbody)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mIndex = global.tempMsg.length</span><br><span class="line">        <span class="comment">// 添加到缓存</span></span><br><span class="line">        global.tempMsg.push(&#123;</span><br><span class="line">          openid: openid,</span><br><span class="line">          msgid: json.xml.MsgId</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在请求执行完之后，再将缓存中的数据删除</span></span><br><span class="line">global.tempMsg.splice(mIndex, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这样就能防止重复对一个请求做出响应了。但不足的是代码实现不够优雅，后面应该增加一个前置过滤器来处理这种事情。</p><h1 id="二、账单分页"><a href="#二、账单分页" class="headerlink" title="二、账单分页"></a>二、账单分页</h1><p>这个功能的实现就比较简单了，预期的实现效果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求：账单</span><br><span class="line">回复：第一页账单</span><br><span class="line"></span><br><span class="line">请求：账单2</span><br><span class="line">回复：第二页账单</span><br></pre></td></tr></table></figure><p>首先就是对功能分发的改造：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配以账单开头的命令</span></span><br><span class="line"><span class="keyword">if</span> (payload.Content.indexOf(<span class="string">'账单'</span>) === <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>查询账单时就是多了一个计算页数的过程，然后分页的逻辑<code>nedb</code>中已经有了，直接用就是了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询账单</span></span><br><span class="line"><span class="keyword">const</span> queryBill = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pageIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (Content.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> temPage = <span class="built_in">parseInt</span>(Content.replace(<span class="string">'账单'</span>,<span class="string">''</span>))</span><br><span class="line">      <span class="keyword">if</span> (temPage) &#123;</span><br><span class="line">        pageIndex = temPage</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pageIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      pageIndex--</span><br><span class="line">    &#125;</span><br><span class="line">    db.moneyDb.find(&#123;<span class="attr">openid</span>: FromUserName&#125;).sort(&#123;<span class="attr">recordTime</span>: <span class="number">-1</span>&#125;).skip(pageIndex * config.billRows).limit(config.billRows).exec(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">      docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> d = dateUtil.getNowSimpleFormatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(item.recordTime * <span class="number">1000</span>))</span><br><span class="line">        <span class="keyword">const</span> s = <span class="string">`[<span class="subst">$&#123;d&#125;</span>] <span class="subst">$&#123;item.type&#125;</span> <span class="subst">$&#123;item.price&#125;</span>元\n`</span></span><br><span class="line">        str += s</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> msg = str ? (<span class="string">'您的账单如下:\n'</span> + str + <span class="string">'\n回复【账单+数字】可翻页'</span>) : <span class="string">'没有查询到账单哦~'</span></span><br><span class="line">      res(msg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就有了这种效果：</p><p><img src="https://i.loli.net/2019/07/18/5d2fc22c74dab45935.png" alt></p><blockquote><p>刚刚在正式的公众号看时间显示有点问题，待会儿看看怎么回事。</p></blockquote><h1 id="三、统计功能"><a href="#三、统计功能" class="headerlink" title="三、统计功能"></a>三、统计功能</h1><p>统计功能的预期实现效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求：统计</span><br><span class="line">回复：当天收支情况</span><br><span class="line"></span><br><span class="line">请求：统计2</span><br><span class="line">回复：近2天收支情况</span><br></pre></td></tr></table></figure><p>这个功能也是很简单就能实现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配统计开头的命令</span></span><br><span class="line">fun doQuery:</span><br><span class="line"><span class="keyword">if</span> (payload.Content.indexOf(<span class="string">'统计'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line"><span class="keyword">const</span> tongji = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dayIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (Content.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> temday = <span class="built_in">parseInt</span>(Content.replace(<span class="string">'统计'</span>,<span class="string">''</span>))</span><br><span class="line">      <span class="keyword">if</span> (temday &amp;&amp; temday &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        dayIndex = temday</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(CreateTime * <span class="number">1000</span>)</span><br><span class="line">    now.setDate(now.getDate() - dayIndex)</span><br><span class="line">    <span class="keyword">const</span> d = dateUtil.getStartOfDay(now)</span><br><span class="line">    db.moneyDb.find(&#123; <span class="attr">recordTime</span>: &#123; <span class="attr">$gt</span>: d.getTime()/<span class="number">1000</span> &#125;, <span class="attr">openid</span>: FromUserName&#125;, (err, docs) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 定义结余、收入、支出</span></span><br><span class="line">      <span class="keyword">let</span> remain = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> reward = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> cost = <span class="number">0</span></span><br><span class="line">      docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        remain += item.yk * item.price</span><br><span class="line">        <span class="keyword">if</span> (item.yk &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          reward += item.price</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          cost += item.price</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> dayTxt = dayIndex === <span class="number">0</span> ? <span class="string">'当天'</span> : <span class="string">`近<span class="subst">$&#123;dayIndex&#125;</span>天`</span></span><br><span class="line">      <span class="keyword">const</span> msg = <span class="string">`<span class="subst">$&#123;dayTxt&#125;</span>的收支情况如下：\n【结余】: <span class="subst">$&#123;remain&#125;</span> 元\n【收入】: <span class="subst">$&#123;reward&#125;</span> 元\n【支出】: <span class="subst">$&#123;cost&#125;</span> 元`</span></span><br><span class="line">      res(msg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现效果如下：</p><p><img src="https://i.loli.net/2019/07/18/5d2fc3586244997545.png" alt></p><h1 id="四、固定开支"><a href="#四、固定开支" class="headerlink" title="四、固定开支"></a>四、固定开支</h1><p>我们每个月都会有固定开支，如工资、花呗、分期，这些固定的项目其实是不需要用户手动去输入的，系统完全可以帮用户做到。</p><p>预期效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请求：月开销预设</span><br><span class="line">回复：请输入\n示例：【1工资2000】【2分期还款-500】\nTips:文字前的数字为每月几日，只支持1-28，不填写默认为1日</span><br><span class="line">==================</span><br><span class="line">30分钟内未回复则放弃当前指令</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">请求：1工资1999</span><br><span class="line">回复：设置成功\n每月1日工资收入1999</span><br></pre></td></tr></table></figure><p>要实现这样的效果，就要缓存用户上一步的指令，并且要知道指令的总步骤数量及当前进行到哪一步。</p><p>既然缓存了，就要有删除的步骤，一种方式是定义一个定时器，每隔一段时间清除失效的指令。另一种方式是在用户下一次请求时判断指令是否失效，如果失效就重新开始。</p><p>这里也要考虑到如果用户一直不发下个请求呢？难道服务器要一直缓存直到内存爆炸？所以定时器一定要有，但太频繁也不好，所以还是要在读取指令前判断用户之前的指令是否失效。</p><p>其实到现在这个步骤，整个后台应用就显得有点复杂了，我们必须要把过滤器的思路贯彻到底，重新改写响应逻辑，实现路由入口处的简洁。</p><p>首先，路由入口会收到两种消息类型：普通消息及事件推送，为了区分它们，我们先建立消息类型分发器<code>msgTypeDispatcher.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/index'</span>)</span><br><span class="line"><span class="keyword">const</span> moneyManager = <span class="built_in">require</span>(<span class="string">'./money'</span>)</span><br><span class="line"><span class="keyword">const</span> defaultManager = <span class="built_in">require</span>(<span class="string">'./default'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doDispatch = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过MsgType区分事件还是普通消息</span></span><br><span class="line">    <span class="keyword">if</span> (payload.MsgType !== <span class="string">'event'</span>) &#123;</span><br><span class="line">      resolve(doNormalMsgPreFilter(payload))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(doEventMsgPreFilter(payload))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通消息的前置过滤器</span></span><br><span class="line"><span class="keyword">const</span> doNormalMsgPreFilter = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断系统是否正在处理该消息</span></span><br><span class="line">  <span class="keyword">let</span> mIndex = <span class="number">-1</span></span><br><span class="line">  global.tempMsg.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.openid === payload.FromUserName &amp;&amp; item.msgid === payload.MsgId) &#123;</span><br><span class="line">      mIndex = index</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (mIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果正在处理，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'success'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mIndex = global.tempMsg.length</span><br><span class="line">    <span class="comment">// 添加到缓存，表示系统正在处理</span></span><br><span class="line">    global.tempMsg.push(&#123;</span><br><span class="line">      openid: payload.FromUserName,</span><br><span class="line">      msgid: payload.MsgId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (payload.MsgType === <span class="string">'text'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> moneyManager.doQuery(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultManager.doQuery(payload)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> doNormalMsgSufFilter(mIndex, msg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doNormalMsgSufFilter(mIndex, <span class="string">'不支持的消息类型'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通消息的后置过滤器</span></span><br><span class="line"><span class="keyword">const</span> doNormalMsgSufFilter = <span class="function">(<span class="params">index, msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 最终请求会走到这里，在这里从缓存中删除该消息</span></span><br><span class="line">  global.tempMsg.splice(index, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件消息的前置过滤器</span></span><br><span class="line"><span class="keyword">const</span> doEventMsgPreFilter = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 暂时不需要对事件有额外操作，判断事件类型后直接返回结果即可</span></span><br><span class="line">  <span class="keyword">if</span> (payload.Event === <span class="string">'subscribe'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> subscribe()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Event === <span class="string">'unsubscribe'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> unsubscribe()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'不支持的事件类型'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理关注事件</span></span><br><span class="line"><span class="keyword">const</span> subscribe = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> config.banner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理取消关注事件</span></span><br><span class="line"><span class="keyword">const</span> unsubscribe = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = doDispatch</span><br></pre></td></tr></table></figure><p>将消息分发的逻辑抽取出来之后，<code>/routes/wx.js</code>接口的代码就变得非常简洁了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msgDiapatcher(json.xml).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">      tempBody.xml.Content = msg</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error)</span><br><span class="line">      tempBody.xml.Content = <span class="string">'系统运行出错，请联系微信号aqzscn解决'</span></span><br><span class="line">    &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res.send(jParser.parse(tempBody))</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>因为设定固定开支的步骤一共需要两步，那么我们就要保存上一步的状态，为了统一所有具有多个步骤的操作，新增一个步骤过滤器，在过滤器中可以直接执行相应步骤的代码。而且为了方便以后拓展，通过设定step来判断步骤执行到第几步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presetManager = <span class="built_in">require</span>(<span class="string">'./preset'</span>)</span><br><span class="line"><span class="keyword">const</span> garbageManager = <span class="built_in">require</span>(<span class="string">'./garbage'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doFilter = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断用户是否正在执行上一步操作</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  global.stepMsg.some(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.openid === payload.FromUserName) &#123;</span><br><span class="line">      index = idx</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Content === <span class="string">'q'</span>) &#123;</span><br><span class="line">    <span class="comment">// 从缓存中移除该命令</span></span><br><span class="line">    global.stepMsg.splice(index, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'已恢复正常模式'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 进入到指定的命令中</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 更新步骤消息的最后时间</span></span><br><span class="line">    global.stepMsg[index].time = <span class="built_in">Math</span>.ceil(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">switch</span> (global.stepMsg[index].command) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'setKz'</span>:</span><br><span class="line">        <span class="keyword">const</span> msg = presetManager.setKz(payload, global.stepMsg[index].step)</span><br><span class="line">        <span class="comment">// 从缓存中移除该命令</span></span><br><span class="line">        global.stepMsg.splice(index, <span class="number">1</span>)</span><br><span class="line">        resolve(msg)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'queryGarbage'</span>:</span><br><span class="line">        resolve(garbageManager.queryStep(payload, global.stepMsg[index].step))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        resolve(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  doFilter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立完成后在消息分发器中调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (payload.MsgType === <span class="string">'text'</span> || payload.Content) &#123;</span><br><span class="line">    <span class="comment">// 首先执行步骤过滤器</span></span><br><span class="line">    <span class="keyword">const</span> filterRes = stepFilter.doFilter(payload)</span><br><span class="line">    <span class="keyword">if</span> (filterRes) &#123;</span><br><span class="line">      <span class="keyword">return</span> filterRes</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过上面的处理，步骤消息就能到达指定的方法中，并且该方法也不必去管怎么去缓存当前步骤，怎么去删除缓存的事情，在我看来还算是一个较好的解决方案。下面把处理固定开支的代码放上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doQuery = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (payload.Content === <span class="string">'月收支预设'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> setKz(payload)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Content === <span class="string">'查询收支预设'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> queryPreset(payload)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预设开支</span></span><br><span class="line"><span class="keyword">const</span> setKz = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content&#125;, index = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">''</span></span><br><span class="line">  <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="comment">// 将该用户的命令设置到缓存中</span></span><br><span class="line">      global.stepMsg.push(&#123;</span><br><span class="line">        openid: FromUserName,</span><br><span class="line">        step: <span class="number">1</span>,</span><br><span class="line">        command: <span class="string">'setKz'</span>,</span><br><span class="line">        time: CreateTime</span><br><span class="line">      &#125;)</span><br><span class="line">      msg = <span class="string">'请输入\n示例1：【1工资2000】\n示例2：【2分期还款-500】\nTips:文字前的数字为每月几日，只支持1-28，不填写默认为1日'</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">const</span> dayReg = Content.match(<span class="regexp">/^\d&#123;1,2&#125;/</span>)</span><br><span class="line">      <span class="keyword">const</span> titleReg = Content.match(<span class="regexp">/[^\d-]+/</span>)</span><br><span class="line">      <span class="keyword">const</span> priceReg = Content.match(<span class="regexp">/-?\d+$/</span>)</span><br><span class="line">      <span class="keyword">if</span> (titleReg &amp;&amp; priceReg) &#123;</span><br><span class="line">        <span class="keyword">const</span> day = dayReg ? <span class="built_in">parseInt</span>(dayReg[<span class="number">0</span>]) : <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> title = titleReg[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">const</span> price = <span class="built_in">parseInt</span>(priceReg[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> (day &lt; <span class="number">1</span> || day &gt; <span class="number">28</span>) &#123;</span><br><span class="line">          msg = <span class="string">'为保证程序正常执行，只允许在每月1日到28日设置固定收支'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> kz = &#123;</span><br><span class="line">            openid: FromUserName,</span><br><span class="line">            day: day,</span><br><span class="line">            title: title,</span><br><span class="line">            money: price</span><br><span class="line">          &#125;</span><br><span class="line">          db.presetDb.insert(kz)</span><br><span class="line">          msg = <span class="string">`设置成功！\n将于每月<span class="subst">$&#123;day&#125;</span>日自动添加账单【<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;price&#125;</span>元】`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        msg = <span class="string">'信息匹配失败，请检查是否符合【1工资2000】的格式'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      msg = <span class="string">'预设收支命令匹配失败'</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询收支预设</span></span><br><span class="line"><span class="keyword">const</span> queryPreset = <span class="function">(<span class="params">&#123;FromUserName&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    db.presetDb.find(&#123;<span class="attr">openid</span>: FromUserName&#125;).sort(&#123;<span class="attr">day</span>: <span class="number">1</span>&#125;).exec(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (docs) &#123;</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="string">'您的预设信息如下：\n'</span></span><br><span class="line">        docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> zy = item.money &gt; <span class="number">0</span> ? <span class="string">'增加'</span> : <span class="string">'扣除'</span></span><br><span class="line">          <span class="keyword">const</span> money = <span class="built_in">Math</span>.abs(item.money)</span><br><span class="line">          msg += <span class="string">`每月<span class="subst">$&#123;item.day&#125;</span>日 <span class="subst">$&#123;zy&#125;</span>【<span class="subst">$&#123;item.title&#125;</span><span class="subst">$&#123;money&#125;</span>元】\n`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(<span class="string">'没有查询到您预设的收支\n回复【月收支预设】来设置一笔吧'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  doQuery,</span><br><span class="line">  setKz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的实现效果就是：</p><p><img src="https://i.loli.net/2019/07/22/5d3554528a9f672026.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章基本上把技术上的实现都讲了一遍，证明实现这个功能是切实可行的。下面就对建好的服务雏形进行完善和增加功能。&lt;/p&gt;
&lt;p&gt;先放这个系列的文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://godbobo.github.io/2019/07/16/wechat-a
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="微信开发" scheme="https://godbobo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号制作记账功能（二）</title>
    <link href="https://godbobo.github.io/2019/07/17/wechat-account-02/"/>
    <id>https://godbobo.github.io/2019/07/17/wechat-account-02/</id>
    <published>2019-07-17T09:07:47.000Z</published>
    <updated>2019-07-17T09:07:47.270Z</updated>
    
    <content type="html"><![CDATA[<p>上次<a href="https://godbobo.github.io/2019/07/16/wechat-account-01/">微信公众号制作记账功能（一）</a>把nodejs的环境搭好了，并且可以简单地回复用户地信息了，那么接下来就要正式实现我们地功能了。</p><p>为了方便大家查看，也方便大家自己部署到公众号上，我把代码放到<a href="https://github.com/godbobo/wx" target="_blank" rel="noopener">github</a>上了，有兴趣可以去看一下。</p><h1 id="一、功能分发"><a href="#一、功能分发" class="headerlink" title="一、功能分发"></a>一、功能分发</h1><p>因为我的订阅号的权限十分有限，那么基本上就只能靠用户的输入来猜测命令了，打开<code>/routes/wx.js</code>，找到处理普通文字消息的代码，进行如下修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断消息类型</span></span><br><span class="line">    <span class="keyword">if</span> (json.xml.MsgType === <span class="string">'text'</span>) &#123;</span><br><span class="line">      <span class="comment">// 普通文字消息</span></span><br><span class="line">      moneyManager.doQuery(json.xml).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!msg) &#123;</span><br><span class="line">          tempBody.xml.Content = <span class="string">'你好,我在努力进步中哦...'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tempBody.xml.Content = msg</span><br><span class="line">        &#125;</span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">        res.send(resbody)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1、链式调用模块"><a href="#1、链式调用模块" class="headerlink" title="1、链式调用模块"></a>1、链式调用模块</h2><p>首先我的需求是不止有记账这一种功能，可以想见，那么多命令，如果都在<code>wx.js</code>里判断，那以后光找功能就要找好久。</p><p>我的思路是，将命令划分为几个模块，然后每个模块有自己专门的命令分发方法，每个模块处理完之后，<code>wx.js</code>就只负责将处理的结果返回给用户。</p><p>那么怎么判断这个命令属于哪个模块呢？我的想法是利用Promise的链式调用，如果上一个模块没有返回值，就执行下一个模块的命令分发，直至匹配到一个模块。类似下面这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modelA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modelB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">modelA().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!res) &#123;</span><br><span class="line">        <span class="keyword">return</span> modelB()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>目前只定义了一个模块，暂时看不出效果，不过后面我会定义一个默认模块，即若前面的模块都没有匹配到命令时，进入该模块返回一个默认的回复信息。</p><h2 id="2、命令识别"><a href="#2、命令识别" class="headerlink" title="2、命令识别"></a>2、命令识别</h2><blockquote><p>人工智能离用户很近，但离开发者很远~</p></blockquote><p>首先，记账模块有三个子功能：记账、查询账单、统计，而且记账时我想让用户直接输入，因为输入就已经够麻烦了，不能再增加步骤了。</p><p>那么在分发的入口就先去匹配固定的命令，如果没有匹配到，再去匹配记账这个随机性很大的命令。而在匹配记账的过程中，我用的是比较笨的方法，定义一个用户可能会输入的数组，然后再去匹配。</p><p>下面放上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /service/money.js</span></span><br><span class="line"><span class="keyword">const</span> keywords = [ <span class="string">'吃饭'</span>, <span class="string">'购物'</span>, <span class="string">'工资'</span>, <span class="string">'日用'</span>, <span class="string">'交通'</span>, <span class="string">'零食'</span>, <span class="string">'运动'</span>, <span class="string">'娱乐'</span>, <span class="string">'通讯'</span>, <span class="string">'服饰'</span>, <span class="string">'住房'</span>, <span class="string">'居家'</span>, <span class="string">'社交'</span>, <span class="string">'旅行'</span>, <span class="string">'烟酒'</span>, <span class="string">'数码'</span>, <span class="string">'医疗'</span>, <span class="string">'书籍'</span>, <span class="string">'礼物'</span>, <span class="string">'快递'</span>, <span class="string">'水果'</span>, <span class="string">'蔬菜'</span>, <span class="string">'亲友'</span>, <span class="string">'彩票'</span>, <span class="string">'捐赠'</span>, <span class="string">'维修'</span>, <span class="string">'办公'</span>, <span class="string">'宠物'</span>, <span class="string">'学习'</span>, <span class="string">'汽车'</span>, <span class="string">'美容'</span>, <span class="string">'兼职'</span>, <span class="string">'理财'</span>, <span class="string">'礼金'</span>, <span class="string">'早餐'</span>, <span class="string">'午餐'</span>, <span class="string">'晚餐'</span>, <span class="string">'早饭'</span>, <span class="string">'午饭'</span>, <span class="string">'晚饭'</span>]</span><br><span class="line"><span class="keyword">const</span> mt = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能分发</span></span><br><span class="line"><span class="keyword">const</span> doQuery = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 在此处比较数量是否一致，防止输入时出错</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'记账关键词与盈亏数量对比：'</span>, keywords.length, mt.length)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (payload.Content === <span class="string">'账单'</span>) &#123;</span><br><span class="line">      queryBill(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.Content === <span class="string">'统计'</span>) &#123;</span><br><span class="line">      tongji(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 记账</span></span><br><span class="line">      addBill(payload).then(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(msg)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记账</span></span><br><span class="line"><span class="keyword">const</span> addBill = <span class="function">(<span class="params">&#123;FromUserName, CreateTime, Content, MsgId&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">    keywords.some(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Content.indexOf(item) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        index = idx</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> price = <span class="built_in">parseFloat</span>(Content.replace(keywords[index], <span class="string">''</span>))</span><br><span class="line">      <span class="keyword">if</span> (!price) &#123;</span><br><span class="line">        res(<span class="string">'错误提示：未输入金额或金额格式错误\n所属模块：[记账]'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> tempTxt = mt[index] &gt; <span class="number">0</span> ? <span class="string">'收入'</span> : <span class="string">'支出'</span></span><br><span class="line">        retMsg = <span class="string">`记录成功！\n<span class="subst">$&#123;keywords[index]&#125;</span> <span class="subst">$&#123;tempTxt&#125;</span> <span class="subst">$&#123;price&#125;</span>元`</span></span><br><span class="line">        res(retMsg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询账单</span></span><br><span class="line"><span class="keyword">const</span> queryBill = <span class="function">(<span class="params">&#123;FromUserName, CreateTime&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'您的账单如下:\n'</span></span><br><span class="line">      res(str)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line"><span class="keyword">const</span> tongji = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  doQuery</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将模块都放在<code>service</code>目录，以便统一管理。上面的代码<code>Promise</code>用得总感觉有点别扭，但还是可以正常运行的，等哪天开窍了估计就能写出更优雅的代码了。</p><h1 id="二、数据存储"><a href="#二、数据存储" class="headerlink" title="二、数据存储"></a>二、数据存储</h1><p>记账记账，如果不存下来，那还叫什么记账？</p><h2 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h2><p>nodejs在数据存储方面的选择其实有很多种，但限于我的服务器很菜，我只能选择基于文件系统的数据库了，那就排除掉MySql、Redis。然后我听人推荐LevelDb，好家伙，感觉比Redis难用多了，我就想简单地放个对象数组，放了大半天都失败了，还读取不到！然后又把目光放到Sqlite3上面，又是一个好家伙，我还要在代码中定义数据结构，这还是我印象中地js吗？</p><p>就在我彷徨不所知时，一道闪电击中了我的脑袋，<code>nedb</code>!赶忙在github上搜索，竟然搜到了这个数据库，然后赶紧试试能不能用，好不好用。用过之后，我只有一个感觉，丝滑~</p><p>我就稍微介绍一下它吧（太丝滑了，必须得多说几句啊），nedb是mongoDb的一个子集，mongoDb相信大家会有所耳闻，而子集，就是将mongoDb的常用操作抽取出来了，所以用着是真的顺手。啥也不说了，先放链接：</p><p><a href="https://github.com/louischatriot/nedb" target="_blank" rel="noopener">https://github.com/louischatriot/nedb</a></p><p><img src="https://i.loli.net/2019/07/17/5d2ed79ec3b9399820.png" alt></p><p>这是我生成的数据库文件，没错，只有一个文件，文件内容肉眼可读！一个字，强啊。</p><h2 id="2、应用"><a href="#2、应用" class="headerlink" title="2、应用"></a>2、应用</h2><p>在<code>nedb</code>中，一个表就是一个文件（个人肤浅见解），因此管理表的任务就交给我们了。</p><p>我的做法是专门用一个文件<code>/service/db.js</code>去管理数据库信息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Datastore = <span class="built_in">require</span>(<span class="string">'nedb'</span>)</span><br><span class="line"><span class="comment">// 生成nedb的实例并自动打开数据库</span></span><br><span class="line"><span class="keyword">var</span> moneyDb = <span class="keyword">new</span> Datastore(&#123; <span class="attr">filename</span>: <span class="string">'moneyLog.db'</span>, <span class="attr">autoload</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里我考虑到项目中不止会用到一张表，就用这种方式导出多个nedb的操作对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  moneyDb</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>/service/money.js</code>中的用法就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造账单记录</span></span><br><span class="line"><span class="keyword">const</span> bill = &#123;</span><br><span class="line">    msgId: MsgId,</span><br><span class="line">    type: keywords[index],</span><br><span class="line">    yk: mt[index],</span><br><span class="line">    price: price,</span><br><span class="line">    openid: FromUserName,</span><br><span class="line">    recordTime: CreateTime</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没错，就这么简单就插入了</span></span><br><span class="line">db.moneyDb.insert(bill)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'您的账单如下:\n'</span></span><br><span class="line"><span class="comment">// 查询也很简单，还可以排序，具体的可以看github上的文档</span></span><br><span class="line">db.moneyDb.find(&#123;<span class="attr">openid</span>: FromUserName&#125;).sort(&#123;<span class="attr">recordTime</span>: <span class="number">-1</span>&#125;).exec(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">docs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> d = dateUtil.getNowSimpleFormatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(CreateTime * <span class="number">1000</span>))</span><br><span class="line"><span class="keyword">const</span> s = <span class="string">`[<span class="subst">$&#123;d&#125;</span>] <span class="subst">$&#123;item.type&#125;</span> <span class="subst">$&#123;item.price&#125;</span>元\n`</span></span><br><span class="line">str += s</span><br><span class="line">&#125;)</span><br><span class="line">res(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>做到这一步之后，就可以运行查看效果了。</p><p><img src="https://i.loli.net/2019/07/17/5d2edad30427c47415.png" alt></p><p>可以看到，这里我专门取消关注后再新增的记录，一样可以获取到以前的记录。</p><p>当然，这个功能还有许多地方要完善，比如支持查询啦，支持翻页啦，这些就放到下次再讲吧。</p><h1 id="三、自适应环境"><a href="#三、自适应环境" class="headerlink" title="三、自适应环境"></a>三、自适应环境</h1><p>这个标题实在想不到既简短又直击要害的了…</p><p>通常情况下，我们的开发环境和生产环境的配置信息是有所不同的，那我们每次切换环境都要重新手动修改配置文件吗？</p><p>这当然不行。</p><p>以前这种区分开发环境和生产环境的功能也用过，不过都是别人写好的模板，这次总算自己实现了一下。</p><p>原理很简单，我们的系统都是可以设置环境变量的，而我们平常运行项目执行的<code>yarn start</code>或者<code>npm start</code>其实都是执行的<code>package.json</code>中配置的<code>scripts: {&quot;start&quot;: &quot;node xxxx.js&quot;}</code>这种命令。那我们就可以在执行这个命令之前先将系统的环境变量设为开发环境或生产环境，然后程序里读取当前是开发环境还是生产环境，然后加载不同的配置文件就可以了。</p><p>首先，了解一下设置环境变量的方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows系统</span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV=development</span><br><span class="line"><span class="comment"># Linux/Mac系统</span></span><br><span class="line"><span class="built_in">export</span> NODE_ENV=development</span><br></pre></td></tr></table></figure><p>不同操作系统的命令不一样，这确实给我造成了不小的困扰，但也只能在不同的系统上再手动改一下了。</p><p>然后修改<code>packages.json</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 开发环境是windows，因此先设置为windows的命令</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "set NODE_ENV=development&amp;&amp; nodemon ./bin/www",</span><br><span class="line">    "prod": "set NODE_ENV=production&amp;&amp; nodemon ./bin/www"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>上面用到了<code>&amp;&amp;</code>用于在同一行内区分两条命令，同时要注意的是，<strong><code>&amp;&amp;</code>前面不能用空格分开！</strong>，这导致我一直无法区分开发环境和生产环境。</p><p>这样修改之后，在js代码中，就可以通过以下代码进行判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这样设置完成基本上就可以了，但因为我想把代码放到github上让大家参考，又不能把自己的密钥之类的放在上面，那么我就还需要想点褶子。</p><p>首先，项目中要将开发环境和生产环境的配置文件分开，同时要将私密信息单独创建一个文件，还要有一个文件专门放不会变的配置信息。因此，我的<code>config</code>文件夹就变成了这个样子：</p><p><img src="https://i.loli.net/2019/07/17/5d2ee305ec3e220680.png" alt></p><p>其中<code>*.self.js</code>是我配置私密信息的地方，然后在<code>dev.js</code>中获取，最后在<code>index.js</code>中判断环境后获取对应的配置信息。然后，我再将<code>*.self.js</code>的文件设置为忽略上传就可以了。不过这样的话我又要去写<code>README.md</code>了。。。</p><p>下面附上<code>index.js</code>中区分环境的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> devConfig = <span class="built_in">require</span>(<span class="string">'./dev'</span>)</span><br><span class="line"><span class="keyword">const</span> prodConfig = <span class="built_in">require</span>(<span class="string">'./prod'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区分开发环境和生产环境</span></span><br><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV || <span class="string">'development'</span></span><br><span class="line"><span class="keyword">var</span> isDev = env === <span class="string">'development'</span></span><br><span class="line"><span class="comment">// 每次启动时会打印当前运行环境，更好的提醒使用者</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'当前运行环境：'</span>,env)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appid = isDev ? devConfig.appid : prodConfig.appid</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在做这个记账功能的时候，数据库的选择真的是卡了我好长时间，还好有那一道闪电~</p><p>最后，希望大家可以关注一下我的公众号，体验一下微信记账的感觉~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次&lt;a href=&quot;https://godbobo.github.io/2019/07/16/wechat-account-01/&quot;&gt;微信公众号制作记账功能（一）&lt;/a&gt;把nodejs的环境搭好了，并且可以简单地回复用户地信息了，那么接下来就要正式实现我们地功能了。&lt;/p
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="微信开发" scheme="https://godbobo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号制作记账功能（一）</title>
    <link href="https://godbobo.github.io/2019/07/16/wechat-account-01/"/>
    <id>https://godbobo.github.io/2019/07/16/wechat-account-01/</id>
    <published>2019-07-16T06:47:38.000Z</published>
    <updated>2019-07-16T06:47:38.433Z</updated>
    
    <content type="html"><![CDATA[<p>一直想写一个记账软件，但界面的设计真让我头大。这不，刚买了个服务器，那用这个当后台存储，微信公众号菜单作为界面交互，练个手？</p><p>我的服务器只有<strong>512M内存，10G硬盘</strong>，跑Java就别想了。刚刚看自己的SpringBoot应用跑在自己电脑上就占了479M内存，这还没说Mysql呢，服务器还挂着SSR，没办法，不能用Java来开发了。</p><p>从网上查找Java、Python、nodejs、php的性能比较，都说nodejs性能最好，那就玩nodejs喽（当然我在python上纠结过，不过nodejs一是比较熟悉，而是自己想实现的聊天机器人可以通过API调用来实现，也就是python能做的nodejs都有替代方案，性能又好，那必须选它了）</p><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1、安装express"><a href="#1、安装express" class="headerlink" title="1、安装express"></a>1、安装express</h2><p>这里就参考<a href="http://expressjs.com/zh-cn/starter/installing.html" target="_blank" rel="noopener">Express官方文档</a>一步步操作的。</p><p>不过官方文档稍微有点啰嗦，说了前一步，结果后面告诉你前面的方法太Low了。所以这里我就把关键部分再描述一遍。</p><p>全局安装Express脚手架：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add express-generator</span><br></pre></td></tr></table></figure><p>创建项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express --view=pug myapp</span><br></pre></td></tr></table></figure><blockquote><p>如果不输入项目名[myapp]，就会在当前目录生成各种文件。</p><p>如果不输入–view=pug，控制台会报错jade模板不能用之类的事，我怂，我输入。</p></blockquote><p>进入项目，安装依赖并运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">$ yarn</span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><h2 id="2、控制台输出端口信息"><a href="#2、控制台输出端口信息" class="headerlink" title="2、控制台输出端口信息"></a>2、控制台输出端口信息</h2><p>这时控制台是很干巴巴的，对于就喜欢看控制台不停输出信息的Java开发者来说，难受吖。</p><p>打开<code>/bin/www</code>，找到末尾的<code>onListening</code>方法，这样进行改动：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onListening</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  debug(<span class="string">'Listening on '</span> + bind);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening on '</span> + bind)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后控制台就会输出<code>Listening on port 3000</code>了，舒服了舒服了。</p><h2 id="3、代码自动刷新"><a href="#3、代码自动刷新" class="headerlink" title="3、代码自动刷新"></a>3、代码自动刷新</h2><p>习惯了<code>vuejs</code>的自动刷新，每每改完文件还要<code>Ctrl + C</code>、<code>Y</code>、<code>⬆</code>是真的痛苦。还好我有~</p><p><strong>nodemon</strong></p><p>首先全局安装nodemon：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add nodemon</span><br></pre></td></tr></table></figure><p>打开<code>package.json</code>，修改<code>scripts</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"nodemon ./bin/www"</span></span><br></pre></td></tr></table></figure><p>依旧是原来的配方，<code>yarn start</code>启动项目，舒服了舒服了。</p><p><img src="https://i.loli.net/2019/07/15/5d2c8143a82a922054.png" alt></p><h1 id="二、与微信服务器“配对”"><a href="#二、与微信服务器“配对”" class="headerlink" title="二、与微信服务器“配对”"></a>二、与微信服务器“配对”</h1><p>申请微信公众号之后，在开发者工具中找到公众平台测试账号，填写接口配置信息。</p><p><img src="https://i.loli.net/2019/07/15/5d2c81d64dce639607.png" alt></p><p>当然现在点击保存肯定是提示配置失败的，下面我们开始配置自己的Express服务器来正确响应微信服务器的消息。</p><p>在<code>/routes/</code>目录下新建<code>wx.js</code>文件，直接把<code>user.js</code>的内容复制过来。打开<code>app.js</code>，仿照<code>user.js</code>导入路由的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wxRouter = <span class="built_in">require</span>(<span class="string">'./routes/wx'</span>)</span><br><span class="line">app.use(<span class="string">'/cqm/wx'</span>, wxRouter)</span><br></pre></td></tr></table></figure><p>然后在测试号的页面再次点击保存，这次不是为了配对成功，而是查看接口会传来什么参数，然后我们需要验证这是微信服务器发来的消息。</p><p>此时需要安装一个模块用来加密信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add jssha --dev</span><br></pre></td></tr></table></figure><p>然后就是根据传来的参数验证信息，成功后把<code>echostr</code>字段返回给微信服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信服务器认证</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1 获取微信服务器请求参数</span></span><br><span class="line">  <span class="keyword">var</span> signature = req.query.signature <span class="comment">// 加密签名</span></span><br><span class="line">  <span class="keyword">var</span> timestamp = req.query.timestamp <span class="comment">// 时间戳</span></span><br><span class="line">  <span class="keyword">var</span> nonce = req.query.nonce <span class="comment">// 随机数</span></span><br><span class="line">  <span class="keyword">var</span> echostr = req.query.echostr <span class="comment">// 随机字符串</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`接收到微信服务器认证请求`</span>)</span><br><span class="line">  <span class="comment">// 2 将token timestamp nonce 按字典序排序</span></span><br><span class="line">  <span class="keyword">var</span> array = [config.token, timestamp, nonce]</span><br><span class="line">  array.sort()</span><br><span class="line">  <span class="comment">// 3 将参数加密</span></span><br><span class="line">  <span class="keyword">var</span> tempStr = array.join(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">var</span> shaObj = <span class="keyword">new</span> jsSHA(<span class="string">'SHA-1'</span>, <span class="string">'TEXT'</span>)</span><br><span class="line">  shaObj.update(tempStr)</span><br><span class="line">  <span class="keyword">var</span> scyptoStr = shaObj.getHash(<span class="string">'HEX'</span>)</span><br><span class="line">  <span class="comment">// 4 将加密后的字符串与signature对比，相同则表示验证成功</span></span><br><span class="line">  <span class="keyword">if</span> (signature === scyptoStr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'验证成功'</span>)</span><br><span class="line">    res.send(echostr)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'验证失败'</span>)</span><br><span class="line">    res.send(<span class="string">'验证失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>保存后在微信测试号里再次保存配置信息，就可以保存成功了。</p><blockquote><p>我在测试时用到了一个公司的反向代理工具，把自己电脑映射到服务器的指定网址了。其实原理是差不多的，你只要有一台自己的服务器，在上面配置nginx反向代理，映射到你本机，就可以实现开发环境与微信服务器联调了。</p></blockquote><h1 id="三、响应用户发来的消息"><a href="#三、响应用户发来的消息" class="headerlink" title="三、响应用户发来的消息"></a>三、响应用户发来的消息</h1><p>微信服务器会把用户发送的消息以post方式发送到刚刚验证的接口，同样的，我们需要正确回复微信服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信服务器消息接收</span></span><br><span class="line">router.post(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> signature = req.query.signature</span><br><span class="line">  <span class="keyword">var</span> timestamp = req.query.timestamp</span><br><span class="line">  <span class="keyword">var</span> nonce = req.query.nonce</span><br><span class="line">  <span class="keyword">var</span> openid = req.query.openid</span><br><span class="line">  <span class="comment">// 需要回复success微信才会认为服务器已经收到消息</span></span><br><span class="line">  <span class="keyword">var</span> to = <span class="string">`&lt;ToUserName&gt;<span class="subst">$&#123;openid&#125;</span>&lt;/ToUserName&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">from</span> = <span class="string">`&lt;FromUserName&gt;<span class="subst">$&#123;config.userName&#125;</span>&lt;/FromUserName&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> time = <span class="string">`&lt;CreateTime&gt;<span class="subst">$&#123;timestamp&#125;</span>&lt;/CreateTime&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="string">`&lt;MsgType&gt;text&lt;/MsgType&gt;`</span></span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">`&lt;Content&gt;你好,我在努力进步中哦...&lt;/Content&gt;`</span></span><br><span class="line">  res.send(<span class="string">`&lt;xml&gt;<span class="subst">$&#123;to&#125;</span><span class="subst">$&#123;<span class="keyword">from</span>&#125;</span><span class="subst">$&#123;time&#125;</span><span class="subst">$&#123;type&#125;</span><span class="subst">$&#123;msg&#125;</span>&lt;/xml&gt;`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后手机关注自己的测试号并随便发送一个消息，就可以看到自己的回复了：</p><p><img src="https://i.loli.net/2019/07/16/5d2d182b5ff4654818.png" alt></p><p>还是很神奇的，不过到这一步只是简单实现了回复消息，实际上我们没有识别用户的输入，也没有做其他复杂的机制，比如5秒内无法回复时要先返回<code>success</code>告知微信服务器我收到消息了，还要应对微信服务器的3次重试机制。</p><p>下面就先实现识别用户发送消息的功能：</p><p>在nodejs中，接收post请求参数的方式和Java的不一样，Java直接就可以获取了，而nodejs还要等待数据传输完毕。因此我们就需要先监听数据传输事件，并将数据保存到一个buffer中，然后监听接收完成的事件，接着才是处理数据及返回消息的步骤：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = []</span><br><span class="line"><span class="comment">// 监听data事件 用于接收数据</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    buffer.push(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 监听end事件，用于处理接收完成的数据</span></span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Buffer.concat(buffer).toString(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment">// 需要回复success微信才会认为服务器已经收到消息</span></span><br><span class="line">    <span class="keyword">var</span> to = <span class="string">`&lt;ToUserName&gt;<span class="subst">$&#123;openid&#125;</span>&lt;/ToUserName&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = <span class="string">`&lt;FromUserName&gt;<span class="subst">$&#123;config.userName&#125;</span>&lt;/FromUserName&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="string">`&lt;CreateTime&gt;<span class="subst">$&#123;timestamp&#125;</span>&lt;/CreateTime&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">`&lt;MsgType&gt;text&lt;/MsgType&gt;`</span></span><br><span class="line">    <span class="keyword">var</span> msg = <span class="string">`&lt;Content&gt;你好,我在努力进步中哦...&lt;/Content&gt;`</span></span><br><span class="line">    res.send(<span class="string">`&lt;xml&gt;<span class="subst">$&#123;to&#125;</span><span class="subst">$&#123;<span class="keyword">from</span>&#125;</span><span class="subst">$&#123;time&#125;</span><span class="subst">$&#123;type&#125;</span><span class="subst">$&#123;msg&#125;</span>&lt;/xml&gt;`</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>用惯了Java的我，发现不能直接获取post请求参数之后，我还傻傻地去找转换工具，结果看到了一个<code>body-parser</code>，用了之后发现没效果。算了算了，入乡随俗。</p></blockquote><p>这样修改之后，就可以获取到用户发来的消息了：</p><p><img src="https://i.loli.net/2019/07/16/5d2d1de895fec15097.png" alt></p><p>下面就是解析信息了（看到请求消息才明白官方文档的<code>![CDATA[]]</code>是不能省略的，但竟然识别出了我的回复，强吖）</p><p>安装<code>fast-xml-parser</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add fast-xml-parser</span><br></pre></td></tr></table></figure><p>解析xml数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlParser = <span class="built_in">require</span>(<span class="string">'fast-xml-parser'</span>)</span><br><span class="line"><span class="keyword">var</span> xml = Buffer.concat(buffer).toString(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xml)</span><br><span class="line"><span class="keyword">var</span> json = xmlParser.convertToJson(xmlParser.getTraversalObj(xml))</span><br><span class="line"><span class="built_in">console</span>.log(json)</span><br></pre></td></tr></table></figure><p>然后，我们熟悉的json就又回来啦：</p><p><img src="https://i.loli.net/2019/07/16/5d2d2086e8f5727885.png" alt></p><h1 id="四、自定义菜单"><a href="#四、自定义菜单" class="headerlink" title="四、自定义菜单"></a>四、自定义菜单</h1><p>被动回复我们现在可以做到了，下面就是要主动向微信服务器发送消息告诉它我们要设置菜单项！</p><h2 id="1、获取access-token"><a href="#1、获取access-token" class="headerlink" title="1、获取access_token"></a>1、获取access_token</h2><p>与微信服务器的很多交互都需要用到<code>access_token</code>的，而<code>access_token</code>有7200秒（2小时）的有效期，那我们需要做的，就是在项目启动后获取一次<code>access_token</code>，并且启动一个定时器，每隔7000秒重新获取一次。</p><p>因为习惯了<code>vue.js</code>的开发模式，我这里在项目根目录下新建了<code>/api/wx.js</code>文件，专门负责发送微信请求。在请求库的选择上，因为我们现在是服务端，不可能只请求一个域名，那么用axios设置baseUrl的方式就不是特别合适，就直接用<code>request</code>库来发送请求就好了，每次请求都定义一下url，也没有特别麻烦，而且我看很多人都这么用，那应该不会错了。</p><p>安装<code>request</code>和<code>querystring</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add request</span><br><span class="line">$ yarn add querystring</span><br></pre></td></tr></table></figure><blockquote><p>其中querystring是将json数据转换为url请求参数的库</p></blockquote><p>然后开始编写请求方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config/index'</span>)</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取AccessToken</span></span><br><span class="line"><span class="keyword">const</span> getAccessToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="string">'grant_type'</span>: <span class="string">'client_credential'</span>,</span><br><span class="line">    <span class="string">'appid'</span>: config.appid,</span><br><span class="line">    <span class="string">'secret'</span>: config.appsecret</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;config.wxUrl&#125;</span>cgi-bin/token?<span class="subst">$&#123;qs.stringify(params)&#125;</span>`</span></span><br><span class="line">  <span class="comment">// console.log('getAccessToken请求地址为', url)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: url</span><br><span class="line">    &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(body))</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开<code>/bin/www</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wxAPI = <span class="built_in">require</span>(<span class="string">'../api/wx'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onListening</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">var</span> getToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    wxAPI.getAccessToken().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      global.access_token = data.access_token</span><br><span class="line">      <span class="built_in">console</span>.log(global.access_token)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  getToken()</span><br><span class="line">  <span class="comment">// 每隔7000秒重新获取一次access_token</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getToken()</span><br><span class="line">  &#125;, <span class="number">7000</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新运行项目，就会在控制台打印出我们获取到的token，这里将<code>access_token</code>保存到了global全局对象中，方便其他地方使用。</p><blockquote><p>nodemon好像不会监听www文件的修改，所以需要我们重新启动服务。</p></blockquote><h2 id="2、配置自定义菜单"><a href="#2、配置自定义菜单" class="headerlink" title="2、配置自定义菜单"></a>2、配置自定义菜单</h2><p>有了<code>access_token</code>，我们就可以放心地向微信服务器发送请求了。但在此之前，我们还没有定义自己的菜单呢。我这里将菜单保存为json格式，同时也是熟悉一下文件操作：</p><p><strong>/config/wxmenus.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"button"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"记账"</span>,</span><br><span class="line">      <span class="attr">"sub_button"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"收入"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"add_money"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"支出"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"sub_money"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"账单"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"bill"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"预算"</span>,</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"wish"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"click"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"待办"</span>,</span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"todo_list"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我要做记账的功能，所以就预先把菜单定义好，后面也省得再去调整了。</p><p>首先尝试一下能否正确读取出json文件：</p><p><strong>/api/wx.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">// 设置自定义菜单</span></span><br><span class="line"><span class="keyword">const</span> setMenu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取json文件</span></span><br><span class="line">    fs.readFile(<span class="string">'./config/wxmenus.json'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 得到配置的菜单信息</span></span><br><span class="line">        <span class="keyword">var</span> m = <span class="built_in">JSON</span>.parse(data.toString())</span><br><span class="line">        resolve(m)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里的文件路径是基于项目路径而不是<code>wx.js</code>当前路径。</p></blockquote><p>然后同样在<code>www</code>中的<code>onListening</code>添加调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置微信菜单</span></span><br><span class="line">  wxAPI.setMenu().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>重启服务就会在控制台看到我们要的结果：</p><p><img src="https://i.loli.net/2019/07/16/5d2d3ab4418e332726.png" alt></p><p>下面继续修改<code>wx.js</code>，将我们配置的菜单发送给微信服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置自定义菜单</span></span><br><span class="line"><span class="keyword">const</span> setMenu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取json文件</span></span><br><span class="line">    fs.readFile(<span class="string">'./config/wxmenus.json'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 得到配置的菜单信息</span></span><br><span class="line">        <span class="keyword">const</span> menuData = data.toString()</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;config.wxUrl&#125;</span>cgi-bin/menu/create?access_token=<span class="subst">$&#123;global.access_token&#125;</span>`</span></span><br><span class="line">        request(&#123;</span><br><span class="line">          method: <span class="string">'POST'</span>,</span><br><span class="line">          url: url,</span><br><span class="line">          form: menuData</span><br><span class="line">        &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(<span class="built_in">JSON</span>.parse(body))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完这个之后还不够，因为这里用到了<code>access_token</code>，我们必须保证在发送菜单的这个请求时我们已经获取到了<code>access_token</code>，那么我们就要修改<code>www</code>文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isInit = <span class="literal">false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onListening</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">var</span> getToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    wxAPI.getAccessToken().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      global.access_token = data.access_token</span><br><span class="line">      <span class="built_in">console</span>.log(global.access_token)</span><br><span class="line">      <span class="keyword">if</span> (!isInit) &#123;</span><br><span class="line">        <span class="comment">// 设置微信菜单</span></span><br><span class="line">        wxAPI.setMenu().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(error)</span><br><span class="line">        &#125;)</span><br><span class="line">        isInit = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  getToken()</span><br><span class="line">  <span class="comment">// 每隔7000秒重新获取一次access_token</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getToken()</span><br><span class="line">  &#125;, <span class="number">7000</span> * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是通过一个标志位来判断获取<code>access_token</code>后是否还需要发送设置菜单的请求。然后取消关注测试号，再重新关注一下：</p><p><img src="https://i.loli.net/2019/07/16/5d2d3f74af56976941.png" alt></p><p>可以看到我们的菜单已经设置生效了。在这个过程中我还注意到控制台还接收到了用户关注和取消关注事件的请求，这表明这个post接口不只是用来接收消息的，应该还有其他用处。</p><h2 id="3、接收菜单点击事件"><a href="#3、接收菜单点击事件" class="headerlink" title="3、接收菜单点击事件"></a>3、接收菜单点击事件</h2><p>到这一步就要参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140454" target="_blank" rel="noopener">微信官方文档</a>给的事件类型了，然后在<code>/routes/wx.js</code>中根据不同类型做出不同回应即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听end事件，用于处理接收完成的数据</span></span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> xml = Buffer.concat(buffer).toString(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">var</span> json = xmlParser.convertToJson(xmlParser.getTraversalObj(xml))</span><br><span class="line">    <span class="built_in">console</span>.log(json)</span><br><span class="line">    <span class="comment">// 定义返回消息</span></span><br><span class="line">    <span class="keyword">var</span> resbody = <span class="string">'success'</span></span><br><span class="line">    <span class="keyword">var</span> tempBody = &#123;</span><br><span class="line">      xml: &#123;</span><br><span class="line">        ToUserName: json.xml.FromUserName,</span><br><span class="line">        FromUserName: json.xml.ToUserName,</span><br><span class="line">        CreateTime: timestamp,</span><br><span class="line">        MsgType: <span class="string">'text'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> jParser = <span class="keyword">new</span> xmlParser.j2xParser()</span><br><span class="line">    <span class="comment">// 判断消息类型</span></span><br><span class="line">    <span class="keyword">if</span> (json.xml.MsgType === <span class="string">'text'</span>) &#123;</span><br><span class="line">      <span class="comment">// 普通文字消息</span></span><br><span class="line">      tempBody.xml.Content = <span class="string">'你好,我在努力进步中哦...'</span></span><br><span class="line">      resbody = jParser.parse(tempBody)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.MsgType === <span class="string">'event'</span>) &#123;</span><br><span class="line">      <span class="comment">// 事件类型 一共有六种事件1 关注/取消关注事件 2 扫描带参数二维码事件 3 上报地理位置事件 4 自定义菜单事件 5 点击菜单拉取消息时的事件推送 6 点击菜单跳转链接时的事件推送</span></span><br><span class="line">      <span class="keyword">if</span> (json.xml.Event === <span class="string">'CLICK'</span>) &#123;</span><br><span class="line">        <span class="comment">// 自定义菜单事件</span></span><br><span class="line">        tempBody.xml.Content = <span class="string">`您点击了<span class="subst">$&#123;json.xml.EventKey&#125;</span>`</span></span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.Event === <span class="string">'subscribe'</span>) &#123;</span><br><span class="line">        <span class="comment">// 关注事件</span></span><br><span class="line">        tempBody.xml.Content = <span class="string">'欢迎关注'</span></span><br><span class="line">        resbody = jParser.parse(tempBody)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.Event === <span class="string">'unsubscribe'</span>) &#123;</span><br><span class="line">        <span class="comment">// 取消关注事件 该事件不能给用户发送消息</span></span><br><span class="line">        resbody = <span class="string">''</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.xml.Event === <span class="string">'LOCATION'</span>) &#123;</span><br><span class="line">        <span class="comment">// 上报地理位置事件 暂时不考虑</span></span><br><span class="line">        resbody = <span class="string">''</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他事件有点复杂，先不做处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(resbody)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>然后取消关注测试号再重新关注，将刚刚的几种事件类型试一下，看看会不会做出正确的响应即可。</p><p><img src="https://i.loli.net/2019/07/16/5d2d4eae5ff7167356.png" alt></p><h1 id="五、部署到正式的公众号"><a href="#五、部署到正式的公众号" class="headerlink" title="五、部署到正式的公众号"></a>五、部署到正式的公众号</h1><p>我的服务器是CentOS，并且是刚刚创建的，一片空白，那现在就需要安装nodejs环境和ftp服务了。</p><p>以前自己在Linux下安装过ftp，不过失败了。但这次！看了leoxuan的<a href="https://www.cnblogs.com/leoxuan/p/8329998.html" target="_blank" rel="noopener">CentOS7 FTP安装与配置</a>后，我成功了！</p><p><img src="https://i.loli.net/2019/07/16/5d2d55a2cdf5d21109.png" alt></p><p>大家在按着这个教程来的时候用户名一定要弄对，上面截图中的一个错误就是我直接复制文章中的代码忽略了用户名才出错的。</p><blockquote><p>传输文件时我这里一直无法传输，按文章中说的关闭SeLinux也不行，更改权限775不起作用，最后索性改为777才可以成功上传。</p></blockquote><p>下面，在<code>app.js</code>中修改我们的代码，不再监听<code>/cqm/wx</code>了，这次翻身做主人，直接监听<code>/wx</code>！</p><p>然后打包（压缩）项目，上传到服务器。</p><p>下面需要在服务器安装nodejs，这里<del>我是参照<a href="https://www.cnblogs.com/liangjiongyao/p/9120535.html" target="_blank" rel="noopener">CentOS7.5安装nodejs</a>进行安装的。我选择的是第二种方法，毕竟以后全局安装插件就可以省点事了。</del></p><p><del>不过编译真的好慢啊，我写完这行字的时候它还没有编译好。。。</del></p><p>上面的安装对我来说完全不起作用，又参考了一篇文章<a href="https://blog.csdn.net/MatrixGod/article/details/81905159" target="_blank" rel="noopener">在CentOS 7上安装Node.js的4种方法（包含npm）</a>,用其中的第四种方法，终于是成功了，下面我把命令粘贴一下，方便以后使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">nvm list-remote</span><br><span class="line">nvm install v10.16.0</span><br><span class="line">node -v</span><br><span class="line">npm</span><br></pre></td></tr></table></figure><p>然后再安装我们需要的各种依赖，就可以使用<code>yarn start</code>启动项目了。</p><p><img src="https://i.loli.net/2019/07/16/5d2d63cced9cc33840.png" alt></p><p>但我们的服务是放在3000端口的，我们需要配置nginx服务器的反向代理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  aqzscn.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000/wx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一番配置，运行，然后在微信公众号上配置自己的服务器信息（不要忘记修改Appid和Secret为公众号的），然后你就会发现，还有一大堆问题要解决。</p><p><img src="https://i.loli.net/2019/07/16/5d2d6f3d5c13419133.png" alt></p><p>其中ip不在白名单的问题好解决，直接在公众号上设置就好了，但下面的问题是真的没办法解决。</p><p>没有权限。。好忧桑。。兴奋了大半天，没办法搞下去吖</p><p>服务号又只能企业来做，那我只好等有钱了注册个公司搞这个了。</p><p>那最后的最后，就试一下发送消息是否成功把。</p><p><img src="https://i.loli.net/2019/07/16/5d2d710489eb360784.png" alt></p><p>看样子是可以的，那还算是有点安慰，不枉这么长时间的辛苦。</p><p><img src="https://i.loli.net/2019/07/16/5d2d71888a30d64987.png" alt></p><p>看着这少得可怜的权限，以后怕是只能玩聊天机器人了。</p><p>总的来说，下面就要想点奇招才能完成自己的记账功能了。那么各位看官，请看下回分解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直想写一个记账软件，但界面的设计真让我头大。这不，刚买了个服务器，那用这个当后台存储，微信公众号菜单作为界面交互，练个手？&lt;/p&gt;
&lt;p&gt;我的服务器只有&lt;strong&gt;512M内存，10G硬盘&lt;/strong&gt;，跑Java就别想了。刚刚看自己的SpringBoot应用跑在
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="微信开发" scheme="https://godbobo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github Pages个人博客（三）</title>
    <link href="https://godbobo.github.io/2019/07/15/learn-hexo-03/"/>
    <id>https://godbobo.github.io/2019/07/15/learn-hexo-03/</id>
    <published>2019-07-15T10:54:52.000Z</published>
    <updated>2019-07-15T10:54:52.088Z</updated>
    
    <content type="html"><![CDATA[<p>这里是对Hexo的第三次探究主要就是将博客的内容丰富了一下。</p><p>有兴趣的小伙伴可以看看前面两篇文章：</p><p><a href="https://godbobo.github.io/2019/07/14/learn-hexo-01/">Hexo搭建Github Pages个人博客（一）</a></p><p><a href="https://godbobo.github.io/2019/07/14/learn-hexo-02/">Hexo搭建Github Pages个人博客（二）</a></p><p>下面进入正文。</p><h1 id="一、设置侧边栏社交链接"><a href="#一、设置侧边栏社交链接" class="headerlink" title="一、设置侧边栏社交链接"></a>一、设置侧边栏社交链接</h1><p>打开主题配置，搜索<code>social</code>，下面已经用注释帮我们写好了很多链接的模板，直接套上自己的就可以了。下面放上我的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/godbobo</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:bobobiubiubiubiu@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line"><span class="attr">  Weibo:</span> <span class="attr">https://weibo.com/p/1005056965815024/info</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="attr">https://github.com/godbobo</span> <span class="string">||</span> <span class="string">twitter</span></span><br><span class="line"><span class="attr">  Zhihu:</span> <span class="attr">https://www.zhihu.com/people/zheng-bo-33-3/activities</span> <span class="string">||</span> <span class="string">university</span></span><br><span class="line"><span class="attr">  Instagram:</span> <span class="attr">https://www.instagram.com/bobobiubiubiubiu/</span> <span class="string">||</span> <span class="string">instagram</span></span><br></pre></td></tr></table></figure><p>唯一需要注意的就是知乎的图标<code>font awesome</code>上面没有，我找了个<code>university</code>替代，反正有个叫知乎大学的鬼东西（用都没用过）</p><p>下面是实现效果：</p><p><img src="https://i.loli.net/2019/07/15/5d2bcdb3c542e18963.png" alt></p><h1 id="二、标签前面用图标表示"><a href="#二、标签前面用图标表示" class="headerlink" title="二、标签前面用图标表示"></a>二、标签前面用图标表示</h1><p>默认情况下标签前面是一个<code>#</code>，换成标签图标那得有多高大上。</p><p>这个操作并不难，以前的版本可能还需要改模板代码，现在直接在<strong>主题配置文件</strong>改配置就行了！</p><p>搜索<code>tag-icon</code>，将其改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>可以看到，标签前面已经有小图标了。</p><p><img src="https://i.loli.net/2019/07/15/5d2bcf63e155583942.png" alt></p><h1 id="三、头像的折腾"><a href="#三、头像的折腾" class="headerlink" title="三、头像的折腾"></a>三、头像的折腾</h1><p>主题配置文件中有个<code>avatar.ratated</code>的属性，设置为<code>true</code>后，鼠标移动到头像上就会旋转360度。</p><p>想要更加高级的动画的话，可以用animate.css。首先在bootcdn找到它的link标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/animate.css/3.7.2/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将其添加到<code>\themes\next\layout\_partials\head\head.swig</code>文件的末尾，在<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>中搜索<code>avatar.rotated</code>，可以发现刚刚旋转360度的代码实现，将其注释掉并换为animate.css中的动画即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if hexo-config('avatar.rotated') &#123;</span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">-webkit-animation</span>: bounceIn <span class="number">1s</span>;</span><br><span class="line"><span class="attribute">animation</span>: bounceIn <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/*.site-author-image &#123;</span></span><br><span class="line"><span class="comment">    transition: transform 1.0s ease-out;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  .site-author-image:hover &#123;</span></span><br><span class="line"><span class="comment">    transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人感觉这个折腾的意义不大，所以我最后还是没有给头像加动画，静静地待在那里不好么~</p><blockquote><p>若要尝试动画效果，可以去<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">animate.css官网</a>查看。</p></blockquote><h1 id="四、站点图标"><a href="#四、站点图标" class="headerlink" title="四、站点图标"></a>四、站点图标</h1><p>在主题配置文件中搜索<code>favicon</code>即可配置，图片资源放在主题目录下的<code>source</code>中，具体我就不尝试了，因为还没有找到一个好的图标，默认的就挺好看的。</p><h1 id="五、鼠标点击特效"><a href="#五、鼠标点击特效" class="headerlink" title="五、鼠标点击特效"></a>五、鼠标点击特效</h1><p>鼠标在点击页面空白处的时候显示向上移动的心，想不想要想不想要？</p><p><img src="https://i.loli.net/2019/07/15/5d2c096c7091c36017.png" alt></p><p>这个js文件比较好找，我自己也找了一个版本，效果还OK，就直接放到附录的<a href="#1、鼠标点击特效文件">鼠标点击特效文件</a>里了，有需要的可以直接复制。</p><p>将heart.js文件放在<code>/themes/next/source/js/</code>目录中，找到<code>/themes/next/layout/_layout.swig</code>，搜索<code>vendors.swig</code>，在这一行的上面引入刚刚创建的js文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/heart.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>放到文件末尾似乎和Next有冲突，放在这个位置我这里是没有问题的。</p></blockquote><h1 id="六、评论系统"><a href="#六、评论系统" class="headerlink" title="六、评论系统"></a>六、评论系统</h1><p>文章如果没有评论岂不是失去了灵魂？</p><p>经过一天时间，leanCloud的实名认证终于下来了。进入控制台后，点击应用-创建应用，输入名字即可创建应用。</p><p><img src="https://i.loli.net/2019/07/15/5d2c340328cc970131.png" alt></p><p>然后回到主题配置中，搜索<code>valine</code>，开启并填写自己的<code>appid</code>和<code>appkey</code>，最好把语言也修改一下，邮件通知我觉得就没有必要了，万一有一天我的博客很火把我吵得生活不能自理怎么办？</p><p>重新运行即可看到效果：</p><p><img src="https://i.loli.net/2019/07/15/5d2c33dfa1e4b49155.png" alt></p><p>当然，为了安全起见，还是要设置安全域名的：</p><p><img src="https://i.loli.net/2019/07/15/5d2c346f4fd6961026.png" alt></p><h1 id="七、留言板"><a href="#七、留言板" class="headerlink" title="七、留言板"></a>七、留言板</h1><p>评论系统都有了，那留言板还不是手到擒来？</p><p>在站点根目录键入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page message-board</span><br></pre></td></tr></table></figure><p>打开<code>/source/message-board/index.md</code>，修改标题名：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 留言板</span><br><span class="line">date: 2019-07-15 17:38:28</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>主题配置文件搜索<code>menu</code>，在下面添加一行代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">/message-board/</span> <span class="string">||</span> <span class="string">inbox</span></span><br></pre></td></tr></table></figure><blockquote><p>我这里懒得去弄多语言了，直接把汉字作为key</p></blockquote><p>重新运行，噔噔噔噔~</p><p><img src="https://i.loli.net/2019/07/15/5d2c4b12633cf66012.png" alt></p><h1 id="八、浏览量功能"><a href="#八、浏览量功能" class="headerlink" title="八、浏览量功能"></a>八、浏览量功能</h1><p>知道你看过我，我会很开心的~</p><p>打开leanCloud，依次点击应用 - 存储 - 创建Class，然后创建一个名为<code>Couter</code>的Class，并设置权限为无限制。</p><p>主题配置中，搜索<code>valine</code>，开启<code>visitor</code>功能即可。</p><p><img src="https://i.loli.net/2019/07/15/5d2c4d45872a192983.png" alt></p><p>这样只是开启了文章的浏览量统计功能，这当然不够，我要知道整个网站的访问量！</p><p>主题配置中搜索<code>busuanzi_count</code>,设置为<code>true</code>即可。</p><p><img src="https://i.loli.net/2019/07/15/5d2c507adf0dd59363.png" alt></p><p>怎么样，有没有吓一跳，这么多访客量！好吧，反正我是吓一跳，后面才明白我什么都没配它就给我显示了，那它应该记的是整个网址的访问量，而<code>localhost</code>？每天有多少人访问呢？</p><p>哈哈哈哈哈哈哈</p><h1 id="九、修改文章内链接样式"><a href="#九、修改文章内链接样式" class="headerlink" title="九、修改文章内链接样式"></a>九、修改文章内链接样式</h1><p>蓝色链接看多了，黑色链接就不怎么习惯了。</p><p>打开<code>themes\next\source\css\_common\components\post\post.styl</code>，新增如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*修改链接样式*/</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，就可以习惯了~</p><p><img src="https://i.loli.net/2019/07/15/5d2c4efad9bde95229.png" alt></p><h1 id="十、显示公众号订阅"><a href="#十、显示公众号订阅" class="headerlink" title="十、显示公众号订阅"></a>十、显示公众号订阅</h1><p>我也是个想要订阅的人。</p><p>在微信公众平台的公众号设置中下载自己的二维码</p><p><img src="https://i.loli.net/2019/07/15/5d2c5312b918481087.png" alt></p><p>然后把它放到站点的<code>/source/uploads</code>目录下，并重命名为<code>wechat-qcode.jpg</code></p><p>主题配置中搜索<code>wechat_subscriber</code>，开启该功能并取消注释即可。</p><p><img src="https://i.loli.net/2019/07/15/5d2c53b20471028001.png" alt></p><h1 id="十一、打赏功能"><a href="#十一、打赏功能" class="headerlink" title="十一、打赏功能"></a>十一、打赏功能</h1><p>公众号都有了，不要点打赏怎么行？</p><p>主题配置中搜索<code>reward_settings</code>,把下面的内容开启就行了，付款的图片当然也是需要的。</p><p><img src="https://i.loli.net/2019/07/15/5d2c54f0dffdd60965.png" alt></p><p>看到下面的比特币，好想把它开启，可是我并没有。。。</p><p>微信收款码获取方式：</p><p>聊天列表 - 收付款 - 二维码收款 - 保存收款码</p><blockquote><p>我不想设置金额，我想要大大的惊喜。。（我想的可真多。。）</p></blockquote><p>支付宝就比较简单，首页点击收钱就可以看到<strong>保存图片</strong>的按钮了。</p><p>实现效果如下：</p><p><img src="https://i.loli.net/2019/07/15/5d2c56f77596b33997.png" alt></p><blockquote><p>千万不要开启<strong>reward_settings.animation</strong>！！！这是我的忠告~</p></blockquote><h1 id="十二、腾讯公益404页面"><a href="#十二、腾讯公益404页面" class="headerlink" title="十二、腾讯公益404页面"></a>十二、腾讯公益404页面</h1><p>既然收了打赏，那就做点公益把</p><p>在<code>/themes/next/source/</code>目录下新建404页面，内容复制即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果如下：</p><p><img src="https://i.loli.net/2019/07/15/5d2c5842a372562732.png" alt></p><p>不过奇怪的是我故意输错网址，却是一个空白的错误界面，非要我输入<a href="http://localhost:4000/404.html" target="_blank" rel="noopener">http://localhost:4000/404.html</a>才会显示。不知道是出什么问题了。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="1、鼠标点击特效文件"><a href="#1、鼠标点击特效文件" class="headerlink" title="1、鼠标点击特效文件"></a>1、鼠标点击特效文件</h2><p><strong>heart.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从jianhuax.com下载的</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,document,undefined</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> hearts = [];</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">callback</span>)</span>&#123;</span><br><span class="line">setTimeout(callback,<span class="number">1000</span>/<span class="number">60</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">init();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">css(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>);</span><br><span class="line">attachEvent();</span><br><span class="line">gameloop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gameloop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;hearts.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(hearts[i].alpha &lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(hearts[i].el);</span><br><span class="line">hearts.splice(i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">hearts[i].y--;</span><br><span class="line">hearts[i].scale += <span class="number">0.004</span>;</span><br><span class="line">hearts[i].alpha -= <span class="number">0.013</span>;</span><br><span class="line">hearts[i].el.style.cssText = <span class="string">"left:"</span>+hearts[i].x+<span class="string">"px;top:"</span>+hearts[i].y+<span class="string">"px;opacity:"</span>+hearts[i].alpha+<span class="string">";transform:scale("</span>+hearts[i].scale+<span class="string">","</span>+hearts[i].scale+<span class="string">") rotate(45deg);background:"</span>+hearts[i].color;</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(gameloop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attachEvent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="built_in">window</span>.onclick===<span class="string">"function"</span> &amp;&amp; <span class="built_in">window</span>.onclick;</span><br><span class="line"><span class="built_in">window</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">old &amp;&amp; old();</span><br><span class="line">createHeart(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHeart</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">d.className = <span class="string">"heart"</span>;</span><br><span class="line">hearts.push(&#123;</span><br><span class="line">el : d,</span><br><span class="line">x : event.clientX - <span class="number">5</span>,</span><br><span class="line">y : event.clientY - <span class="number">5</span>,</span><br><span class="line">scale : <span class="number">1</span>,</span><br><span class="line">alpha : <span class="number">1</span>,</span><br><span class="line">color : randomColor()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line">style.type=<span class="string">"text/css"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">style.styleSheet.cssText = css;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"rgb("</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">","</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">","</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次修改的大部分还都是可以直接配置的，但还没有结束，这不是我的博客的最终样子。它还需要做最后的蜕变！</p><p>下一篇文章应该就是大量的自定义样式了，敬请期待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里是对Hexo的第三次探究主要就是将博客的内容丰富了一下。&lt;/p&gt;
&lt;p&gt;有兴趣的小伙伴可以看看前面两篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://godbobo.github.io/2019/07/14/learn-hexo-01/&quot;&gt;Hexo搭建Githu
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="hexo" scheme="https://godbobo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github Pages个人博客（二）</title>
    <link href="https://godbobo.github.io/2019/07/14/learn-hexo-02/"/>
    <id>https://godbobo.github.io/2019/07/14/learn-hexo-02/</id>
    <published>2019-07-14T14:40:21.000Z</published>
    <updated>2019-07-14T14:40:21.821Z</updated>
    
    <content type="html"><![CDATA[<p>有点无聊，有点焦虑。</p><p>今天下午刚搞完第一波Hexo的部署，晚上又闲的没事干，那就继续捣鼓这个博客吧。</p><p>这是第二篇有关Hexo的文章，没有看过第一篇的可以去瞅瞅：</p><p><a href="https://godbobo.github.io/2019/07/14/learn-hexo-01/">Hexo搭建Github Pages个人博客（一）</a></p><h1 id="一、背景动画"><a href="#一、背景动画" class="headerlink" title="一、背景动画"></a>一、背景动画</h1><p>相信大家在浏览网站时肯定见过网页背景随鼠标移动而变化的特效，以前以为很高大上，原来就是引一个js库的事。</p><blockquote><p>这个功能仅适用于next主题，其他主题没有实验过。</p></blockquote><p>打开<code>/themes/next/_config.yml</code>，搜索<code>Animation Settings</code>，第一个默认是开启的，看着可配置项有<code>fadeIn</code>之类的，猜想应该就是首页加载时各个部件的渐隐效果，那就不去动它了。</p><p>下面第二个叫<code>pace</code>的，看注释应该是进度条动画，那我觉得聊胜于无，开启就是了。下面就以这个库为例，讲一下怎么开启这个动画效果。</p><p>首先当然是要把<code>pace.enable</code>设置为<code>true</code>，单单这样是不够的，next主题并没有包含这个插件。如果就这样去运行，页面不会发生任何变化，而且控制台还会报404错误。</p><p>因此下一步就是去下载这个插件，next主题很贴心地把插件的地址放在了注释里面：</p><p><img src="https://i.loli.net/2019/07/14/5d2b17a2962a946732.png" alt></p><p>下载之后将其解压到<code>/themes/next/sources/lib</code>下面，然后将文件夹重命名为<code>pace</code>。</p><blockquote><p>其他插件的导入方式类似，文件夹的名称要和配置文件中的名称保持一致。</p></blockquote><p>导入成功之后就可以运行查看效果了。默认的<code>minimal</code>是浏览器顶部的一个蓝色进度条动画（页面加载时显示，普通情况下一条黑边）。</p><p>为了方便大家对比，也是解决这个无聊的周末夜晚，我一个一个把这些效果实验一下，供大家参考：</p><p><a href="#1、进度条动画主题描述">1、进度条动画主题描述</a></p><blockquote><p>进度条下面的就都是背景动画了，官方文档说不能同时开启两个，但我试了一下，可以呀，只是不太好看而已~</p></blockquote><p>我也把所有的背景动画的特效试了一下，大家可以看截图选择自己看着舒服的。</p><p><a href="#2、背景动画特效展示">2、背景动画特效展示</a></p><blockquote><p><strong>注意</strong>：下载的插件要把目录中的<code>.github</code>目录删掉，否则提交到github之后会找不到插件的路径。</p></blockquote><h1 id="二、百度统计"><a href="#二、百度统计" class="headerlink" title="二、百度统计"></a>二、百度统计</h1><p>详见<a href="https://theme-next.iissnan.com/third-party-services.html#analytics-baidu" target="_blank" rel="noopener">https://theme-next.iissnan.com/third-party-services.html#analytics-baidu</a></p><p>配置成功后可以将项目发布在github上，然后检查是否安装正确：</p><p><img src="https://i.loli.net/2019/07/14/5d2b2df59e46e11713.png" alt></p><h1 id="三、谷歌站点收录"><a href="#三、谷歌站点收录" class="headerlink" title="三、谷歌站点收录"></a>三、谷歌站点收录</h1><p>详见<a href="https://theme-next.iissnan.com/third-party-services.html#google-webmaster-tools" target="_blank" rel="noopener">https://theme-next.iissnan.com/third-party-services.html#google-webmaster-tools</a></p><p>刚刚配置的时候忘了截图了，现在已经找不到那个页面了。</p><p>不过只要注意在输入网址之后展开第一种验证方式就可以找到我们要的代码了。</p><h1 id="四、本地搜索功能"><a href="#四、本地搜索功能" class="headerlink" title="四、本地搜索功能"></a>四、本地搜索功能</h1><p>用第三方搜索还要注册还要收费，我只需要一个简单的搜索哦~</p><p>详见<a href="https://theme-next.iissnan.com/third-party-services.html#local-search" target="_blank" rel="noopener">https://theme-next.iissnan.com/third-party-services.html#local-search</a></p><p><img src="https://i.loli.net/2019/07/14/5d2b2dc06746f68964.png" alt></p><p>搭建完成的效果也还OK</p><h1 id="五、显示文章基本信息"><a href="#五、显示文章基本信息" class="headerlink" title="五、显示文章基本信息"></a>五、显示文章基本信息</h1><p>就是这种效果：</p><p><img src="https://i.loli.net/2019/07/14/5d2b30450ce4141448.png" alt></p><p>打开<code>_config.yml</code>配置站点：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span> <span class="comment"># 阅读时长</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span> <span class="comment"># 所有文章总字数</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span> <span class="comment"># 所有文章阅读中时长</span></span><br></pre></td></tr></table></figure><p>打开<code>/themes/next/_config.yml</code>配置主题：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span>  <span class="comment"># 是否换行显示 字数统计 及 阅读时长</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 文章 字数统计 阅读时长 使用图标 还是 文本表示</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span> <span class="comment"># 博客底部统计 字数统计 阅读时长 使用图标 还是 文本表示</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure><p>这样我们只是配置好了，但是插件还没有安装，下面就安装插件（网上看的一篇文章说next主题自带该插件，我信以为真，结果死活不显示统计数量，也不报错，还专门去github上下载该插件，结果最后才发现是要用npm安装的。。。）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-symbols-count-time</span><br></pre></td></tr></table></figure><p>然后重新运行就可以了，底部也会出现整个站点的统计字数。</p><h1 id="六、滚动时显示文章进度"><a href="#六、滚动时显示文章进度" class="headerlink" title="六、滚动时显示文章进度"></a>六、滚动时显示文章进度</h1><p>在主题配置中搜索<code>back2top</code>，然后你懂的~</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在侧边栏显示该控件</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 显示阅读进度</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后效果如下：</p><p><img src="https://i.loli.net/2019/07/14/5d2b36481c0f979568.png" alt></p><p>在点击这个控件后就会返回顶部。</p><p>虽然说放在侧边栏与潜意识里的返回顶部按钮不同，且用百分比来装饰，让人误以为它只是用来显示而不能点击的。但胜在能与周围融为一体呀，我不管，我就要这么设置！</p><h1 id="七、生成网站地图"><a href="#七、生成网站地图" class="headerlink" title="七、生成网站地图"></a>七、生成网站地图</h1><p>第三步已经生成了谷歌的站点地图，这里的设置主要是针对百度的。</p><p>安装<code>sitemap</code>插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-generator-sitemap</span><br><span class="line">$ yarn add hexo-generator-baidu-sitemap</span><br></pre></td></tr></table></figure><p>然后将站点配置文件中的url改为自己的github地址即可。</p><p>重新运行，从地址栏输入<code>/baidusitemap.xml</code>查看有没有生成。</p><p><img src="https://i.loli.net/2019/07/14/5d2b3cd50360797106.png" alt></p><blockquote><p>似乎百度不能抓取github.io下的内容，那搞它有什么用，不搞了不搞了。</p></blockquote><h1 id="八、附录"><a href="#八、附录" class="headerlink" title="八、附录"></a>八、附录</h1><h2 id="1、进度条动画主题描述"><a href="#1、进度条动画主题描述" class="headerlink" title="1、进度条动画主题描述"></a>1、进度条动画主题描述</h2><table><thead><tr><th>theme</th><th>效果描述</th></tr></thead><tbody><tr><td>big-counter</td><td>页面右上角显示加载百分比（数字）</td></tr><tr><td>bounce</td><td>页面右上角显示一个跳动的小球，逐渐远去并消失</td></tr><tr><td>barber-shop</td><td>整个页面都被进度条占满。。。</td></tr><tr><td>center-atom</td><td>页面中间显示一个小花，花朵中间显示加载百分比</td></tr><tr><td>center-circle</td><td>页面中间显示有百分比的圆，有一个翻转消失的动画</td></tr><tr><td>center-radar</td><td>页面中间一个雷达旋转的动画</td></tr><tr><td>center-simple</td><td>顾名思义，特别简单，页面中间一个进度条</td></tr><tr><td>corner-indicator</td><td>右上角一个切角，里面是转圈的线条</td></tr><tr><td>fill-left</td><td>从左到右填充页面，与barber-shop的区别是不会遮挡页面元素。（十分不推荐选这个）</td></tr><tr><td>flat-top</td><td>页面上方显示一个较宽的进度条</td></tr><tr><td>flash</td><td>页面上方显示较细的进度条，同时右上角有个加载状态的圆。（整体感觉不错，我可能会选它）</td></tr><tr><td>loading-bar</td><td>同样是页面中间一个进度条。。</td></tr><tr><td>mac-osx</td><td>页面产生波浪，顶部有进度条。。（不是太好看呀，感觉侮辱了macOs呀）</td></tr><tr><td>material</td><td>页面中间一个透明的圆，里面是百分比。（挺清爽的感觉，还可以）</td></tr><tr><td>minimal</td><td>页面上方显示一个很细的进度条</td></tr></tbody></table><p>这些主题尝试下来，有一个共同的特点，在页面超过一屏的情况下，顶部会有一个黑色的进度条区域（不管这里会不会显示进度条），所以建议选择带有<strong>顶部进度条</strong>的主题。</p><h2 id="2、背景动画特效展示"><a href="#2、背景动画特效展示" class="headerlink" title="2、背景动画特效展示"></a>2、背景动画特效展示</h2><p>canvas_nest:</p><p><img src="https://i.loli.net/2019/07/14/5d2b20f80689359611.png" alt></p><p>就是红框中的那些线条，可以跟随鼠标移动。</p><p>three.three_waves:</p><blockquote><p>three共包含三种特效，因此配置文件中有两个开关都要打开才行。</p></blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b21ae53fcd20531.png" alt></p><p>效果挺震撼的，在页面空白区域比较多的时候看着特别爽。</p><p>three.canvas_lines:</p><p><img src="https://i.loli.net/2019/07/14/5d2b223ac6d9173596.png" alt></p><p>three.canvas_sphere:</p><p><img src="https://i.loli.net/2019/07/14/5d2b228770dd943557.png" alt></p><p>这个动画动的幅度比较小，一般只能在页面切换时才能看到，平时就被文章给盖住了。</p><p>canvas_ribbon：</p><p><img src="https://i.loli.net/2019/07/14/5d2b22ecc174c58373.png" alt></p><p>这个不会动，只会在鼠标点击时切换背景。</p><p>总的来说，这些动画都挺好看的，但是我就觉得有一种哗众取宠的感觉。我的注意力应该放在文字本身，你旁边动来动去的背景是想干啥？</p><p>所以最终我选择了奢华低调有内涵的<code>three.canvas_sphere</code></p><p>最后，还是想说一下，本来想搞一个评论系统的，结果leanCloud刚实名认证不能创建应用，其他的要么被墙要么收费，真是难为死我了。</p><p>说不得还得来个Hexo系列文章三呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有点无聊，有点焦虑。&lt;/p&gt;
&lt;p&gt;今天下午刚搞完第一波Hexo的部署，晚上又闲的没事干，那就继续捣鼓这个博客吧。&lt;/p&gt;
&lt;p&gt;这是第二篇有关Hexo的文章，没有看过第一篇的可以去瞅瞅：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://godbobo.github.io/
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="hexo" scheme="https://godbobo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github Pages个人博客（一）</title>
    <link href="https://godbobo.github.io/2019/07/14/learn-hexo-01/"/>
    <id>https://godbobo.github.io/2019/07/14/learn-hexo-01/</id>
    <published>2019-07-14T06:01:56.000Z</published>
    <updated>2019-07-14T06:02:32.963Z</updated>
    
    <content type="html"><![CDATA[<p>以前也了解过Hexo，但因为各种操作都需要敲命令，我这么懒，就是不想敲命令~所以就没怎么玩过这个。这些天无意间了解到有个Hexo的客户端，觉得可以试试了。</p><p>搭建完成之后文章列表只有一篇HelloWorld，不能忍不能忍，于是诞生了这篇文章。。。。</p><h1 id="一、开启Github-Pages"><a href="#一、开启Github-Pages" class="headerlink" title="一、开启Github Pages"></a>一、开启Github Pages</h1><p>在Github中创建一个新的仓库，仓库名字为：<code>[你的用户名].github.io</code>,例如我的用户名为<code>godbobo</code>，那么填写的名称就是<code>godbobo.github.io</code></p><p><img src="https://i.loli.net/2019/07/14/5d2ab49f087dd61642.png" alt></p><p>其他什么都不用填，点击创建。然后打开该项目的<code>Settings</code>:</p><p><img src="https://i.loli.net/2019/07/14/5d2ab5a71117050843.png" alt></p><p>在<code>Github Pages</code>这个栏目下点击<code>Choose Theme</code>。（我这个是已经创建好的，界面和没有创建过的是不一样的）</p><p><img src="https://i.loli.net/2019/07/14/5d2ab5c5393be44329.png" alt></p><p>然后会跳转到选择主题的界面，直接默认第一个就好，反正后面还要换成Hexo的，选择之后在新的页面点击<code>commit</code>提交更改，一个崭新的Github Pages就建立好了，并且可以直接通过刚才的项目名进行访问。</p><p><img src="https://i.loli.net/2019/07/14/5d2ab6a79d38b79277.png" alt></p><blockquote><p>一个账号只能有一个Github Pages可以通过这种方式访问。</p></blockquote><p>到这一步，Github Pages就算是配置好了，下面就要开始激动人心的Hexo配置了。</p><h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h1><p>首先全局安装Hexo脚手架：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>不知道为什么，我用yarn安装之后命令行没有<code>hexo</code>这个命令，万般无奈之下，我还是用了npm来安装。。。</p></blockquote><p>用脚手架初始化博客目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init godbobo.github.io</span><br><span class="line">$ <span class="built_in">cd</span> godbobo.github.io</span><br><span class="line">$ yarn</span><br></pre></td></tr></table></figure><blockquote><p>这里为了保险起见我没把项目放到中文目录下，直接在D盘建的文件夹。</p></blockquote><p>生成并运行Hexo：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line"><span class="comment"># g 即 generate</span></span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># s 即 serve</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器<a href="http://localhost:4000" target="_blank" rel="noopener">localhost:4000</a>，即可看到效果：</p><p><img src="https://i.loli.net/2019/07/14/5d2ab925c59d435206.png" alt></p><p>注意到地址栏了吗？我已经把它部署到Github Pages上了，要实现这样的效果，请看下回分解~</p><p>哦不，是下一步。</p><h1 id="三、部署到Github-Pages"><a href="#三、部署到Github-Pages" class="headerlink" title="三、部署到Github Pages"></a>三、部署到Github Pages</h1><p>本地安装git以及如何连接到github的过程就不在这里讲了，下面直接开始正文：</p><p>安装<code>hexo-deployer-git</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在生成的项目中可以看到有一个<code>_config.yml</code>的文件，它是hexo的用户配置文件：</p><p><img src="https://i.loli.net/2019/07/14/5d2aba9c8126997245.png" alt></p><p>我们需要在这里配置自己刚刚创建的Github Pages地址，在该文件中搜索<code>deploy</code>或直接到文件末尾，做出类似下图的修改：</p><p><img src="https://i.loli.net/2019/07/14/5d2abb271fa3465005.png" alt></p><p>然后命令行中输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># d 即 deploy</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>如果是第一次执行这个命令会让你输入github的账号密码，输入之后就能够发布到Github Pages上了。</p><h1 id="四、个性化配置"><a href="#四、个性化配置" class="headerlink" title="四、个性化配置"></a>四、个性化配置</h1><h2 id="1、主题配置"><a href="#1、主题配置" class="headerlink" title="1、主题配置"></a>1、主题配置</h2><p>主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes</a>上面找到自己满意的，不过这里我还是推荐朴素又不失内涵的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next主题</a>，它还有四个子主题可供选择。</p><p>将主题下载下来后(直接download zip就行了，用git命令感觉好慢)，解压并将目录重命名为<code>next</code>，然后放到hexo项目的<code>/themes/</code>下。</p><p><img src="https://i.loli.net/2019/07/14/5d2abd642d56a30213.png" alt></p><p>然后打开项目（站点）配置文件<code>_config.yml</code>，搜索theme或直接到文件末尾，将默认主题改为<code>next</code>即可。</p><p><img src="https://i.loli.net/2019/07/14/5d2abdd6cc2d873221.png" alt></p><p>然后重新运行<code>hexo s</code>就可以看到主题已经改变。</p><h2 id="2、设置语言"><a href="#2、设置语言" class="headerlink" title="2、设置语言"></a>2、设置语言</h2><p>运行后发现整个页面都是英文，我大字都不识几个让我看英文？这可不行。</p><p>打开站点配置文件<code>_config.yml</code>及主题配置文件<code>/themes/next/_config.yml</code>，搜索到<code>language</code>，并将其改为<code>zh-CN</code>即可。</p><p>放上我更换主题以及换了语言之后的页面样子：</p><p><img src="https://i.loli.net/2019/07/14/5d2abf2ed2ba730575.png" alt></p><h2 id="3、设置next子主题"><a href="#3、设置next子主题" class="headerlink" title="3、设置next子主题"></a>3、设置next子主题</h2><p>咦，你的next主题怎么和我的不一样？我也要我也要~</p><p>在刚刚hexo-next的github页面可以看到这个主题下一共有四个子主题可供选择：</p><p><img src="https://i.loli.net/2019/07/14/5d2abfa4087d120431.png" alt></p><p>经过一番挑选，我觉得<code>Gemini</code>可能更养眼一点，打开主题配置文件<code>/themes/next/_config.yml</code>，搜索<code>scheme</code>，将其改为<code>Gemini</code>并重新生成页面即可。</p><h2 id="4、支持RSS"><a href="#4、支持RSS" class="headerlink" title="4、支持RSS"></a>4、支持RSS</h2><p>如果自己能读到自己的Feed，那该有多好~</p><p>安装<code>hexo-generator-feed</code>插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-generator-feed</span><br></pre></td></tr></table></figure><p>完毕！</p><p>没错，就是这么简单！</p><p>点击RSS链接，就会跳转到<code>atom.xml</code>页面，这就表示RSS已经成功生成了。</p><p><img src="https://i.loli.net/2019/07/14/5d2ac1258118235520.png" alt></p><h1 id="五、使用hexo-client"><a href="#五、使用hexo-client" class="headerlink" title="五、使用hexo-client"></a>五、使用hexo-client</h1><p>说了大半天，花里胡哨，我要怎么不费吹灰之力新建文章编辑文章？</p><p>打开<a href="https://github.com/gaoyoubo/hexo-client" target="_blank" rel="noopener">https://github.com/gaoyoubo/hexo-client</a>这个仓库，在README的最下方有最新版的下载地址，然后下载并安装。</p><p>首次进入需要设置hexo项目的目录，设置即可。</p><p>目前整个项目还很简陋，编辑文章时虽说有上传图片的功能，但却不能通过剪切板上传，还是很鸡肋的。所以现在这篇文章我就是通过<code>Typora</code>来编写，<code>PicGo</code>来上传图片的。</p><p>整个软件用起来并不复杂，稍微摸索以下就会了，只是添加标签和分类的功能肉眼是找不到的，需要在编辑文章时找到<code>Front-matter</code>，在这个里面配置标签、分类信息：</p><p><img src="https://i.loli.net/2019/07/14/5d2ac3476602659335.png" alt></p><p>其中title为<code>tags</code>表示标签，<code>categories</code>表示分类，如果要添加多个，需要使用yml文件的数组格式。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>在查找问题的过程中了解到Hexo的文档，以后要深入折腾的话可以参考一下：</p><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></li><li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Hexo-Next主题配置文档</a></li></ul><p>一般来说，每次更改内容后，最好要依次执行以下下面三个命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这条不执行应该也可以，我这里每次改东西后不执行它也不会有问题</span></span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>最后，看hexo官网中的描述，还有好多花样自己没有尝试过，比如评论功能，所以后续应该会有第二篇写hexo的文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前也了解过Hexo，但因为各种操作都需要敲命令，我这么懒，就是不想敲命令~所以就没怎么玩过这个。这些天无意间了解到有个Hexo的客户端，觉得可以试试了。&lt;/p&gt;
&lt;p&gt;搭建完成之后文章列表只有一篇HelloWorld，不能忍不能忍，于是诞生了这篇文章。。。。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="好多坑" scheme="https://godbobo.github.io/categories/%E5%A5%BD%E5%A4%9A%E5%9D%91/"/>
    
    
      <category term="hexo" scheme="https://godbobo.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
